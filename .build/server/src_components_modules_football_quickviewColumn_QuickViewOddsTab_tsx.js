"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "src_components_modules_football_quickviewColumn_QuickViewOddsTab_tsx";
exports.ids = ["src_components_modules_football_quickviewColumn_QuickViewOddsTab_tsx"];
exports.modules = {

/***/ "__barrel_optimize__?names=Dialog,Transition!=!./node_modules/@headlessui/react/dist/headlessui.esm.js":
/*!*************************************************************************************************************!*\
  !*** __barrel_optimize__?names=Dialog,Transition!=!./node_modules/@headlessui/react/dist/headlessui.esm.js ***!
  \*************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Dialog: () => (/* reexport safe */ _Users_nolan_Documents_www_blue_paper_b969_node_modules_headlessui_react_dist_components_dialog_dialog_js__WEBPACK_IMPORTED_MODULE_0__.Dialog),\n/* harmony export */   Transition: () => (/* reexport safe */ _Users_nolan_Documents_www_blue_paper_b969_node_modules_headlessui_react_dist_components_transitions_transition_js__WEBPACK_IMPORTED_MODULE_1__.Transition)\n/* harmony export */ });\n/* harmony import */ var _Users_nolan_Documents_www_blue_paper_b969_node_modules_headlessui_react_dist_components_dialog_dialog_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@headlessui/react/dist/components/dialog/dialog.js */ \"./node_modules/@headlessui/react/dist/components/dialog/dialog.js\");\n/* harmony import */ var _Users_nolan_Documents_www_blue_paper_b969_node_modules_headlessui_react_dist_components_transitions_transition_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./node_modules/@headlessui/react/dist/components/transitions/transition.js */ \"./node_modules/@headlessui/react/dist/components/transitions/transition.js\");\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX19iYXJyZWxfb3B0aW1pemVfXz9uYW1lcz1EaWFsb2csVHJhbnNpdGlvbiE9IS4vbm9kZV9tb2R1bGVzL0BoZWFkbGVzc3VpL3JlYWN0L2Rpc3QvaGVhZGxlc3N1aS5lc20uanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFDbUkiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ibHVlLXBhcGVyLWI5NjkvLi9ub2RlX21vZHVsZXMvQGhlYWRsZXNzdWkvcmVhY3QvZGlzdC9oZWFkbGVzc3VpLmVzbS5qcz9lYWY0Il0sInNvdXJjZXNDb250ZW50IjpbIlxuZXhwb3J0IHsgRGlhbG9nIH0gZnJvbSBcIi9Vc2Vycy9ub2xhbi9Eb2N1bWVudHMvd3d3L2JsdWUtcGFwZXItYjk2OS9ub2RlX21vZHVsZXMvQGhlYWRsZXNzdWkvcmVhY3QvZGlzdC9jb21wb25lbnRzL2RpYWxvZy9kaWFsb2cuanNcIlxuZXhwb3J0IHsgVHJhbnNpdGlvbiB9IGZyb20gXCIvVXNlcnMvbm9sYW4vRG9jdW1lbnRzL3d3dy9ibHVlLXBhcGVyLWI5Njkvbm9kZV9tb2R1bGVzL0BoZWFkbGVzc3VpL3JlYWN0L2Rpc3QvY29tcG9uZW50cy90cmFuc2l0aW9ucy90cmFuc2l0aW9uLmpzXCIiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///__barrel_optimize__?names=Dialog,Transition!=!./node_modules/@headlessui/react/dist/headlessui.esm.js\n");

/***/ }),

/***/ "./src/components/modules/football/odds/OddsChangeModal.tsx":
/*!******************************************************************!*\
  !*** ./src/components/modules/football/odds/OddsChangeModal.tsx ***!
  \******************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CornerTxOddsChangesTable: () => (/* binding */ CornerTxOddsChangesTable),\n/* harmony export */   Eu1x2OddsChangesTable: () => (/* binding */ Eu1x2OddsChangesTable),\n/* harmony export */   OddsChangesComponentTable: () => (/* binding */ OddsChangesComponentTable),\n/* harmony export */   \"default\": () => (/* binding */ OddsChangesModal)\n/* harmony export */ });\n/* harmony import */ var _emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @emotion/styled/base */ \"@emotion/styled/base\");\n/* harmony import */ var _barrel_optimize_names_Dialog_Transition_headlessui_react__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! __barrel_optimize__?names=Dialog,Transition!=!@headlessui/react */ \"__barrel_optimize__?names=Dialog,Transition!=!./node_modules/@headlessui/react/dist/headlessui.esm.js\");\n/* harmony import */ var _barrel_optimize_names_format_date_fns__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! __barrel_optimize__?names=format!=!date-fns */ \"__barrel_optimize__?names=format!=!./node_modules/date-fns/esm/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"react\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _hooks_useFootball_useOddsData__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/hooks/useFootball/useOddsData */ \"./src/hooks/useFootball/useOddsData.ts\");\n/* harmony import */ var _components_modules_football_odds_PeriodSwitcher__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @/components/modules/football/odds/PeriodSwitcher */ \"./src/components/modules/football/odds/PeriodSwitcher.tsx\");\n/* harmony import */ var _components_modules_football_odds_shared_components__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @/components/modules/football/odds/shared-components */ \"./src/components/modules/football/odds/shared-components.tsx\");\n/* harmony import */ var _components_modules_football_tw_components__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @/components/modules/football/tw-components */ \"./src/components/modules/football/tw-components/index.ts\");\n/* harmony import */ var _stores__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @/stores */ \"./src/stores/index.ts\");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @/utils */ \"./src/utils/index.ts\");\n/* harmony import */ var _public_svg_odd_down_svg__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../../../public/svg/odd-down.svg */ \"./public/svg/odd-down.svg\");\n/* harmony import */ var _public_svg_odd_up_svg__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../../../../public/svg/odd-up.svg */ \"./public/svg/odd-up.svg\");\n/* harmony import */ var _emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @emotion/react/jsx-runtime */ \"@emotion/react/jsx-runtime\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__, _hooks_useFootball_useOddsData__WEBPACK_IMPORTED_MODULE_2__, _components_modules_football_odds_PeriodSwitcher__WEBPACK_IMPORTED_MODULE_3__, _components_modules_football_odds_shared_components__WEBPACK_IMPORTED_MODULE_4__, _components_modules_football_tw_components__WEBPACK_IMPORTED_MODULE_5__, _stores__WEBPACK_IMPORTED_MODULE_6__, _emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__]);\n([_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__, _hooks_useFootball_useOddsData__WEBPACK_IMPORTED_MODULE_2__, _components_modules_football_odds_PeriodSwitcher__WEBPACK_IMPORTED_MODULE_3__, _components_modules_football_odds_shared_components__WEBPACK_IMPORTED_MODULE_4__, _components_modules_football_tw_components__WEBPACK_IMPORTED_MODULE_5__, _stores__WEBPACK_IMPORTED_MODULE_6__, _emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n\nfunction _EMOTION_STRINGIFIED_CSS_ERROR__() {\n    return \"You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).\";\n}\n/* eslint-disable @next/next/no-img-element */ \n\n\n\n\n\n\n\n\n\n\n\nfunction OddsChangesModal({ open, setOpen, bookMaker, matchId, half = 0 }) {\n    const cancelButtonRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    return (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(_barrel_optimize_names_Dialog_Transition_headlessui_react__WEBPACK_IMPORTED_MODULE_11__.Transition.Root, {\n        show: open,\n        as: react__WEBPACK_IMPORTED_MODULE_1__.Fragment,\n        children: (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(_barrel_optimize_names_Dialog_Transition_headlessui_react__WEBPACK_IMPORTED_MODULE_11__.Dialog, {\n            as: \"div\",\n            className: \"relative z-10\",\n            initialFocus: cancelButtonRef,\n            onClose: setOpen,\n            children: (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(\"div\", {\n                className: \"fixed inset-0 z-10 overflow-y-auto scrollbar\",\n                children: (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(\"div\", {\n                    className: \"flex min-h-full items-center justify-center p-4 text-center sm:p-0 \",\n                    children: (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(_barrel_optimize_names_Dialog_Transition_headlessui_react__WEBPACK_IMPORTED_MODULE_11__.Transition.Child, {\n                        as: react__WEBPACK_IMPORTED_MODULE_1__.Fragment,\n                        enter: \"ease-out duration-300\",\n                        enterFrom: \"opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95\",\n                        enterTo: \"opacity-100 translate-y-0 sm:scale-100\",\n                        leave: \"ease-in duration-200\",\n                        leaveFrom: \"opacity-100 translate-y-0 sm:scale-100\",\n                        leaveTo: \"opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95\",\n                        children: (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(_barrel_optimize_names_Dialog_Transition_headlessui_react__WEBPACK_IMPORTED_MODULE_11__.Dialog.Panel, {\n                            className: \"relative w-11/12 transform overflow-hidden rounded-lg bg-white  text-light-black shadow-xl transition-all dark:bg-modal dark:text-dark-text  sm:my-8 lg:w-[50vw]\",\n                            children: (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(OddsChangesComponentTable, {\n                                setOpen: setOpen,\n                                bookMaker: bookMaker,\n                                matchId: matchId,\n                                period: half\n                            })\n                        })\n                    })\n                })\n            })\n        })\n    });\n}\nconst OddsChangesComponentTable = ({ setOpen, bookMaker, matchId, period = 0 })=>{\n    const { compareType } = (0,_stores__WEBPACK_IMPORTED_MODULE_6__.useOddsDetailsStore)();\n    const [market, setMarket] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(()=>{\n        // TODO add more markets\n        if (![\n            \"hdp\",\n            \"std1x2\",\n            \"tx\",\n            \"score\",\n            \"cornerTx\",\n            \"eu1x2\"\n        ].includes(compareType)) {\n            return \"hdp\";\n        }\n        return compareType;\n    });\n    const [half, setHalf] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(period);\n    return (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsxs)(\"div\", {\n        className: \" divide-list \",\n        children: [\n            (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsxs)(\"div\", {\n                className: \" flex place-content-center items-center rounded-t-lg py-3 font-extrabold text-black dark:text-white\",\n                children: [\n                    bookMaker.name,\n                    \": Odds changes\"\n                ]\n            }),\n            (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsxs)(\"div\", {\n                className: \"flex items-center justify-between p-2.5\",\n                children: [\n                    market !== \"eu1x2\" && (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsxs)(\"div\", {\n                        className: \"flex gap-3\",\n                        children: [\n                            (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(_components_modules_football_tw_components__WEBPACK_IMPORTED_MODULE_5__.TwFilterBtn, {\n                                onClick: ()=>setMarket(\"hdp\"),\n                                isActive: market === \"hdp\",\n                                children: \"Tỷ lệ ch\\xe2u \\xc1\"\n                            }),\n                            (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(_components_modules_football_tw_components__WEBPACK_IMPORTED_MODULE_5__.TwFilterBtn, {\n                                onClick: ()=>setMarket(\"tx\"),\n                                isActive: market === \"tx\",\n                                children: \"Tỷ lệ t\\xe0i xỉu\"\n                            }),\n                            (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(_components_modules_football_tw_components__WEBPACK_IMPORTED_MODULE_5__.TwFilterBtn, {\n                                onClick: ()=>setMarket(\"std1x2\"),\n                                isActive: market === \"std1x2\",\n                                children: \"1x2\"\n                            })\n                        ]\n                    }),\n                    market === \"eu1x2\" && (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(_components_modules_football_tw_components__WEBPACK_IMPORTED_MODULE_5__.TwFilterBtn, {\n                        onClick: ()=>setMarket(\"eu1x2\"),\n                        isActive: market === \"eu1x2\",\n                        children: \"EU 1x2\"\n                    }),\n                    ![\n                        \"eu1x2\",\n                        \"cornerTx\"\n                    ].includes(market) && (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(_components_modules_football_odds_PeriodSwitcher__WEBPACK_IMPORTED_MODULE_3__.PeriodSwitcher, {\n                        options: [\n                            {\n                                name: \"FT\",\n                                value: 0\n                            },\n                            {\n                                name: \"HT\",\n                                value: 1\n                            }\n                        ],\n                        valGetter: setHalf,\n                        half: half\n                    })\n                ]\n            }),\n            (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(HeaderSection, {\n                market: market\n            }),\n            [\n                \"3in1\",\n                \"hdp\",\n                \"tx\",\n                \"std1x2\"\n            ].includes(market) && (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(Odds3in1ChangesTable, {\n                bookMaker: bookMaker,\n                market: market,\n                matchId: matchId,\n                half: half\n            }),\n            market === \"score\" && (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(ScoreOddsChangesTable, {\n                bookMaker: bookMaker,\n                market: market,\n                matchId: matchId,\n                half: half\n            }),\n            market === \"cornerTx\" && (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(CornerTxOddsChangesTable, {\n                bookMaker: bookMaker,\n                market: market,\n                matchId: matchId,\n                half: half\n            }),\n            market === \"eu1x2\" && (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(Eu1x2OddsChangesTable, {\n                bookMaker: bookMaker,\n                market: market,\n                matchId: matchId\n            }),\n            (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(\"div\", {\n                className: \"flex justify-end p-2\",\n                children: (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(_components_modules_football_tw_components__WEBPACK_IMPORTED_MODULE_5__.TwFilterBtn, {\n                    onClick: ()=>{\n                        setOpen(false);\n                    },\n                    children: \"Close\"\n                })\n            })\n        ]\n    });\n};\nconst HeaderSection = ({ market })=>{\n    return (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(\"table\", {\n        className: \"w-full text-center text-sm\",\n        children: (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsxs)(\"thead\", {\n            className: \"border border-dark-text/20 bg-light-match dark:bg-dark-match\",\n            children: [\n                [\n                    \"3in1\",\n                    \"hdp\",\n                    \"tx\",\n                    \"std1x2\"\n                ].includes(market) && (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsxs)(\"tr\", {\n                    className: \"divide-list-x h-10 w-full\",\n                    children: [\n                        (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(\"th\", {\n                            className: \"w-[15%]\",\n                            children: \"Time\"\n                        }),\n                        (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(\"th\", {\n                            className: \"w-[15%]\",\n                            children: \"Tỷ số\"\n                        }),\n                        (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(\"th\", {\n                            className: \"w-[15%]\",\n                            children: market === \"tx\" ? \"T\\xe0i\" : \"Chủ\"\n                        }),\n                        (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(\"th\", {\n                            className: \"w-[15%]\",\n                            children: market === \"tx\" ? \"K\\xe8o\" : \"H\\xf2a\"\n                        }),\n                        (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(\"th\", {\n                            className: \"w-[15%]\",\n                            children: market === \"tx\" ? \"Xỉu\" : \"Kh\\xe1ch\"\n                        }),\n                        (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(\"th\", {\n                            className: \"w-1/4\",\n                            children: \"Cập nhật\"\n                        })\n                    ]\n                }),\n                market === \"score\" && (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsxs)(\"tr\", {\n                    className: \"divide-list-x h-10 w-full\",\n                    children: [\n                        (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(\"th\", {\n                            className: \"w-[8%]\",\n                            children: \"Time\"\n                        }),\n                        (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(\"th\", {\n                            className: \"w-[10%]\",\n                            children: \"Time\"\n                        }),\n                        (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(\"th\", {\n                            className: \"w-[70%]\",\n                            children: \"Odds\"\n                        }),\n                        (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(\"th\", {\n                            className: \"\",\n                            children: \"Cập nhật\"\n                        })\n                    ]\n                }),\n                market === \"cornerTx\" && (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsxs)(\"tr\", {\n                    className: \"divide-list-x h-10 w-full\",\n                    children: [\n                        (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(\"th\", {\n                            className: \"w-[10%]\",\n                            children: \"Time\"\n                        }),\n                        (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(\"th\", {\n                            className: \"w-[10%]\",\n                            children: \"Over\"\n                        }),\n                        (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(\"th\", {\n                            className: \"w-[10%]\",\n                            children: \"Corners\"\n                        }),\n                        (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(\"th\", {\n                            className: \"w-[10%]\",\n                            children: \"Under\"\n                        }),\n                        (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(\"th\", {\n                            className: \"w-[20%]\",\n                            children: \"Update\"\n                        })\n                    ]\n                })\n            ]\n        })\n    });\n};\nconst Odds3in1ChangesTable = ({ bookMaker, market, matchId, half })=>{\n    const { oddsType } = (0,_stores__WEBPACK_IMPORTED_MODULE_6__.useOddsStore)();\n    const { data, isLoading } = (0,_hooks_useFootball_useOddsData__WEBPACK_IMPORTED_MODULE_2__.useMatchOddsChangeData)(matchId, bookMaker?.id, market, half);\n    if (isLoading) {\n        return (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(\"div\", {\n            className: \"h-[58vh]\",\n            children: \"Loading...\"\n        });\n    }\n    const oddsList = (data?.oddsList || []).sort((a, b)=>a.ct - b.ct);\n    return (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(\"div\", {\n        className: \"\",\n        children: (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(\"div\", {\n            className: \"h-[55vh] overflow-y-auto text-sm scrollbar\",\n            children: (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(\"table\", {\n                className: \"min-w-full  border-collapse text-center\",\n                children: (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(\"tbody\", {\n                    className: \"divide-list max-h-[45vh] w-full\",\n                    children: oddsList.map((change, index)=>{\n                        let matchTime = \"\";\n                        if (`${change.type}` === \"2\") {\n                            matchTime = \"Live\";\n                        } else if (change.type === 1) {\n                            matchTime = \"Initial\";\n                        } else if (change.mt) {\n                            matchTime = `${change.mt}'`;\n                        }\n                        const scoreText = !(0,_utils__WEBPACK_IMPORTED_MODULE_7__.isValEmpty)(change.hs) ? `${change.hs} - ${change.as}` : \"\";\n                        return (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsxs)(\"tr\", {\n                            className: \"divide-list-x h-8 w-full\",\n                            css: [\n                                index % 2 === 1 && {\n                                    \"--tw-bg-opacity\": \"1\",\n                                    \"backgroundColor\": \"rgb(242 246 249 / var(--tw-bg-opacity, 1))\",\n                                    \":is(.dark *)\": {\n                                        \"--tw-bg-opacity\": \"1\",\n                                        \"backgroundColor\": \"rgb(27 27 27 / var(--tw-bg-opacity, 1))\"\n                                    }\n                                },\n                                 false ? 0 : \";label:Odds3in1ChangesTable;\",\n                                 false ? 0 : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"\n                            ],\n                            \"data-tw\": \"bg-light-match dark:bg-dark-match\",\n                            children: [\n                                (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(\"td\", {\n                                    className: \"w-[15%]\",\n                                    children: matchTime\n                                }),\n                                (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(\"td\", {\n                                    className: \"w-[15%]\",\n                                    css: [\n                                        change.sc && {\n                                            \"backgroundColor\": \"rgb(33 135 229 / 0.3)\"\n                                        },\n                                         false ? 0 : \";label:Odds3in1ChangesTable;\",\n                                         false ? 0 : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"\n                                    ],\n                                    \"data-tw\": \"bg-logo-blue/30\",\n                                    children: scoreText\n                                }),\n                                change.close ? (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(\"td\", {\n                                    colSpan: 3,\n                                    className: \"text-dark-loss\",\n                                    children: \"Đ\\xf3ng\"\n                                }) : (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsxs)(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.Fragment, {\n                                    children: [\n                                        (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(\"td\", {\n                                            className: \"w-[15%]\",\n                                            children: (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsxs)(\"div\", {\n                                                className: \"mx-auto flex w-24 place-content-center items-center  justify-center gap-1\",\n                                                css: [\n                                                    change.ft === 1 && {\n                                                        \"--tw-text-opacity\": \"1\",\n                                                        \"color\": \"rgb(46 167 111 / var(--tw-text-opacity, 1))\"\n                                                    },\n                                                    change.ft === -1 && {\n                                                        \"--tw-text-opacity\": \"1\",\n                                                        \"color\": \"rgb(202 33 0 / var(--tw-text-opacity, 1))\"\n                                                    },\n                                                     false ? 0 : \";label:Odds3in1ChangesTable;\",\n                                                     false ? 0 : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"\n                                                ],\n                                                \"data-tw\": \"text-dark-win | text-dark-loss\",\n                                                children: [\n                                                    (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(\"span\", {\n                                                        children: (0,_utils__WEBPACK_IMPORTED_MODULE_7__.convertOdds)(change.odds?.f, market, oddsType, 1)\n                                                    }),\n                                                    (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsxs)(\"span\", {\n                                                        className: \"text-xxs\",\n                                                        children: [\n                                                            change.ft === -1 && (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(_public_svg_odd_down_svg__WEBPACK_IMPORTED_MODULE_8__[\"default\"], {}),\n                                                            change.ft === 1 && (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(_public_svg_odd_up_svg__WEBPACK_IMPORTED_MODULE_9__[\"default\"], {})\n                                                        ]\n                                                    })\n                                                ]\n                                            })\n                                        }),\n                                        (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(\"td\", {\n                                            className: \"w-[15%]\",\n                                            children: (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsxs)(\"div\", {\n                                                className: \"mx-auto flex w-24 items-center justify-center gap-1\",\n                                                css: [\n                                                    change.st === 1 && {\n                                                        \"--tw-text-opacity\": \"1\",\n                                                        \"color\": \"rgb(46 167 111 / var(--tw-text-opacity, 1))\"\n                                                    },\n                                                    change.st === -1 && {\n                                                        \"--tw-text-opacity\": \"1\",\n                                                        \"color\": \"rgb(202 33 0 / var(--tw-text-opacity, 1))\"\n                                                    },\n                                                     false ? 0 : \";label:Odds3in1ChangesTable;\",\n                                                     false ? 0 : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"\n                                                ],\n                                                \"data-tw\": \"text-dark-win | text-dark-loss\",\n                                                children: [\n                                                    (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(\"span\", {\n                                                        children: (0,_utils__WEBPACK_IMPORTED_MODULE_7__.convertOdds)(change.odds?.s, market, oddsType, 2)\n                                                    }),\n                                                    (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsxs)(\"span\", {\n                                                        className: \"text-xxs\",\n                                                        children: [\n                                                            change.st === -1 && (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(_public_svg_odd_down_svg__WEBPACK_IMPORTED_MODULE_8__[\"default\"], {}),\n                                                            change.st === 1 && (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(_public_svg_odd_up_svg__WEBPACK_IMPORTED_MODULE_9__[\"default\"], {})\n                                                        ]\n                                                    })\n                                                ]\n                                            })\n                                        }),\n                                        (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(\"td\", {\n                                            className: \"w-[15%]\",\n                                            children: (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsxs)(\"div\", {\n                                                className: \"mx-auto flex w-24 items-center justify-center gap-1\",\n                                                css: [\n                                                    change.tt === 1 && {\n                                                        \"--tw-text-opacity\": \"1\",\n                                                        \"color\": \"rgb(46 167 111 / var(--tw-text-opacity, 1))\"\n                                                    },\n                                                    change.tt === -1 && {\n                                                        \"--tw-text-opacity\": \"1\",\n                                                        \"color\": \"rgb(202 33 0 / var(--tw-text-opacity, 1))\"\n                                                    },\n                                                     false ? 0 : \";label:Odds3in1ChangesTable;\",\n                                                     false ? 0 : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"\n                                                ],\n                                                \"data-tw\": \"text-dark-win | text-dark-loss\",\n                                                children: [\n                                                    (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(\"span\", {\n                                                        children: (0,_utils__WEBPACK_IMPORTED_MODULE_7__.convertOdds)(change.odds?.t, market, oddsType, 3)\n                                                    }),\n                                                    (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsxs)(\"span\", {\n                                                        className: \"text-xxs\",\n                                                        children: [\n                                                            change.tt === -1 && (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(_public_svg_odd_down_svg__WEBPACK_IMPORTED_MODULE_8__[\"default\"], {}),\n                                                            change.tt === 1 && (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(_public_svg_odd_up_svg__WEBPACK_IMPORTED_MODULE_9__[\"default\"], {})\n                                                        ]\n                                                    })\n                                                ]\n                                            })\n                                        })\n                                    ]\n                                }),\n                                (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(\"td\", {\n                                    className: \"w-1/4\",\n                                    children: (0,_barrel_optimize_names_format_date_fns__WEBPACK_IMPORTED_MODULE_12__.format)(new Date(change.ct * 1000), \"dd/MM HH:mm\")\n                                })\n                            ]\n                        }, index);\n                    })\n                })\n            })\n        })\n    });\n};\nconst Eu1x2OddsChangesTable = ({ bookMaker, market, matchId })=>{\n    const { oddsType } = (0,_stores__WEBPACK_IMPORTED_MODULE_6__.useOddsStore)();\n    const { oddsEu1x2ChangeDataKelly } = (0,_stores__WEBPACK_IMPORTED_MODULE_6__.useOddsDetailsStore)();\n    const oddsChanges = oddsEu1x2ChangeDataKelly[bookMaker?.id] || [];\n    return (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.Fragment, {\n        children: (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsxs)(\"table\", {\n            className: \"w-full text-center text-sm\",\n            children: [\n                (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(OddsEu1x2ChangeHeader, {}),\n                (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(\"tbody\", {\n                    className: \"\",\n                    children: (oddsChanges || []).map((change, idx)=>{\n                        const next = oddsChanges[idx + 1] || {};\n                        const hUp = !(0,_utils__WEBPACK_IMPORTED_MODULE_7__.isValEmpty)(next) && change.h > next.h;\n                        const hDown = !(0,_utils__WEBPACK_IMPORTED_MODULE_7__.isValEmpty)(next) && change.h < next.h;\n                        const dUp = !(0,_utils__WEBPACK_IMPORTED_MODULE_7__.isValEmpty)(next) && change.d > next.d;\n                        const dDown = !(0,_utils__WEBPACK_IMPORTED_MODULE_7__.isValEmpty)(next) && change.d < next.d;\n                        const aUp = !(0,_utils__WEBPACK_IMPORTED_MODULE_7__.isValEmpty)(next) && change.a > next.a;\n                        const aDown = !(0,_utils__WEBPACK_IMPORTED_MODULE_7__.isValEmpty)(next) && change.a < next.a;\n                        return (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsxs)(\"tr\", {\n                            className: \"h-8 font-light\",\n                            css: [\n                                idx % 2 === 1 && {\n                                    \"--tw-bg-opacity\": \"1\",\n                                    \"backgroundColor\": \"rgb(242 246 249 / var(--tw-bg-opacity, 1))\",\n                                    \":is(.dark *)\": {\n                                        \"--tw-bg-opacity\": \"1\",\n                                        \"backgroundColor\": \"rgb(27 27 27 / var(--tw-bg-opacity, 1))\"\n                                    }\n                                },\n                                 false ? 0 : \";label:Eu1x2OddsChangesTable;\",\n                                 false ? 0 : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"\n                            ],\n                            \"data-tw\": \"bg-light-match dark:bg-dark-match\",\n                            children: [\n                                (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(_components_modules_football_odds_shared_components__WEBPACK_IMPORTED_MODULE_4__.TwCell, {\n                                    className: \"w-[6%] border\",\n                                    css: [\n                                        hUp && {\n                                            \"--tw-text-opacity\": \"1\",\n                                            \"color\": \"rgb(46 167 111 / var(--tw-text-opacity, 1))\"\n                                        },\n                                        hDown && {\n                                            \"--tw-text-opacity\": \"1\",\n                                            \"color\": \"rgb(202 33 0 / var(--tw-text-opacity, 1))\"\n                                        },\n                                         false ? 0 : \";label:Eu1x2OddsChangesTable;\",\n                                         false ? 0 : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"\n                                    ],\n                                    \"data-tw\": \"text-dark-win | text-dark-loss\",\n                                    children: (0,_utils__WEBPACK_IMPORTED_MODULE_7__.convertOdds)(change.h, \"eu1x2\", oddsType, 1)\n                                }),\n                                (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(_components_modules_football_odds_shared_components__WEBPACK_IMPORTED_MODULE_4__.TwCell, {\n                                    className: \"w-[6%] \",\n                                    css: [\n                                        dUp && {\n                                            \"--tw-text-opacity\": \"1\",\n                                            \"color\": \"rgb(46 167 111 / var(--tw-text-opacity, 1))\"\n                                        },\n                                        dDown && {\n                                            \"--tw-text-opacity\": \"1\",\n                                            \"color\": \"rgb(202 33 0 / var(--tw-text-opacity, 1))\"\n                                        },\n                                         false ? 0 : \";label:Eu1x2OddsChangesTable;\",\n                                         false ? 0 : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"\n                                    ],\n                                    \"data-tw\": \"text-dark-win | text-dark-loss\",\n                                    children: (0,_utils__WEBPACK_IMPORTED_MODULE_7__.convertOdds)(change.d, \"eu1x2\", oddsType, 2)\n                                }),\n                                (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(_components_modules_football_odds_shared_components__WEBPACK_IMPORTED_MODULE_4__.TwCell, {\n                                    className: \"w-[6%] border\",\n                                    css: [\n                                        aUp && {\n                                            \"--tw-text-opacity\": \"1\",\n                                            \"color\": \"rgb(46 167 111 / var(--tw-text-opacity, 1))\"\n                                        },\n                                        aDown && {\n                                            \"--tw-text-opacity\": \"1\",\n                                            \"color\": \"rgb(202 33 0 / var(--tw-text-opacity, 1))\"\n                                        },\n                                         false ? 0 : \";label:Eu1x2OddsChangesTable;\",\n                                         false ? 0 : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"\n                                    ],\n                                    \"data-tw\": \"text-dark-win | text-dark-loss\",\n                                    children: (0,_utils__WEBPACK_IMPORTED_MODULE_7__.convertOdds)(change.a, \"eu1x2\", oddsType, 3)\n                                }),\n                                (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(_components_modules_football_odds_shared_components__WEBPACK_IMPORTED_MODULE_4__.TwCell, {\n                                    className: \"w-[6%] border\",\n                                    children: (0,_utils__WEBPACK_IMPORTED_MODULE_7__.roundNum)(change.hWrate)\n                                }),\n                                (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(_components_modules_football_odds_shared_components__WEBPACK_IMPORTED_MODULE_4__.TwCell, {\n                                    className: \"w-[6%] border\",\n                                    children: (0,_utils__WEBPACK_IMPORTED_MODULE_7__.roundNum)(change.dWrate)\n                                }),\n                                (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(_components_modules_football_odds_shared_components__WEBPACK_IMPORTED_MODULE_4__.TwCell, {\n                                    className: \"w-[6%] border\",\n                                    children: (0,_utils__WEBPACK_IMPORTED_MODULE_7__.roundNum)(change.aWrate)\n                                }),\n                                (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(_components_modules_football_odds_shared_components__WEBPACK_IMPORTED_MODULE_4__.TwCell, {\n                                    className: \"w-[8%] border\",\n                                    children: (0,_utils__WEBPACK_IMPORTED_MODULE_7__.roundNum)(change.hReturnRate)\n                                }),\n                                (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(_components_modules_football_odds_shared_components__WEBPACK_IMPORTED_MODULE_4__.TwCell, {\n                                    className: \"w-[6%] border\",\n                                    css: [\n                                        change[\"hKelly\"] >= 1 && {\n                                            \"--tw-text-opacity\": \"1\",\n                                            \"color\": \"rgb(202 33 0 / var(--tw-text-opacity, 1))\"\n                                        },\n                                         false ? 0 : \";label:Eu1x2OddsChangesTable;\",\n                                         false ? 0 : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"\n                                    ],\n                                    \"data-tw\": \"text-dark-loss\",\n                                    children: change[\"hKelly\"]\n                                }),\n                                (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(_components_modules_football_odds_shared_components__WEBPACK_IMPORTED_MODULE_4__.TwCell, {\n                                    className: \"w-[6%] border\",\n                                    css: [\n                                        change[\"dKelly\"] >= 1 && {\n                                            \"--tw-text-opacity\": \"1\",\n                                            \"color\": \"rgb(202 33 0 / var(--tw-text-opacity, 1))\"\n                                        },\n                                         false ? 0 : \";label:Eu1x2OddsChangesTable;\",\n                                         false ? 0 : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"\n                                    ],\n                                    \"data-tw\": \"text-dark-loss\",\n                                    children: change[\"dKelly\"]\n                                }),\n                                (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(_components_modules_football_odds_shared_components__WEBPACK_IMPORTED_MODULE_4__.TwCell, {\n                                    className: \"w-[6%] border\",\n                                    css: [\n                                        change[\"aKelly\"] >= 1 && {\n                                            \"--tw-text-opacity\": \"1\",\n                                            \"color\": \"rgb(202 33 0 / var(--tw-text-opacity, 1))\"\n                                        },\n                                         false ? 0 : \";label:Eu1x2OddsChangesTable;\",\n                                         false ? 0 : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"\n                                    ],\n                                    \"data-tw\": \"text-dark-loss\",\n                                    children: change[\"aKelly\"]\n                                }),\n                                (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(_components_modules_football_odds_shared_components__WEBPACK_IMPORTED_MODULE_4__.TwCell, {\n                                    className: \"w-[10%] border\",\n                                    children: (0,_barrel_optimize_names_format_date_fns__WEBPACK_IMPORTED_MODULE_12__.format)(new Date(change.changeTime * 1000), \"dd/MM HH:mm\")\n                                })\n                            ]\n                        }, idx);\n                    })\n                })\n            ]\n        })\n    });\n};\nconst OddsEu1x2ChangeHeader = ()=>{\n    return (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(\"thead\", {\n        children: (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsxs)(_components_modules_football_odds_shared_components__WEBPACK_IMPORTED_MODULE_4__.TwHeaderRow, {\n            className: \"h-10 border bg-light-match dark:bg-dark-match\",\n            children: [\n                (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(_components_modules_football_odds_shared_components__WEBPACK_IMPORTED_MODULE_4__.TwCell, {\n                    className: \"w-[6%] border\",\n                    children: \"Chủ\"\n                }),\n                (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(_components_modules_football_odds_shared_components__WEBPACK_IMPORTED_MODULE_4__.TwCell, {\n                    className: \"w-[6%] \",\n                    children: \"Ho\\xe0\"\n                }),\n                (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(_components_modules_football_odds_shared_components__WEBPACK_IMPORTED_MODULE_4__.TwCell, {\n                    className: \"w-[6%] border\",\n                    children: \"Kh\\xe1ch\"\n                }),\n                (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(_components_modules_football_odds_shared_components__WEBPACK_IMPORTED_MODULE_4__.TwCell, {\n                    className: \"w-[6%] border\",\n                    children: \"Chủ %\"\n                }),\n                (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(_components_modules_football_odds_shared_components__WEBPACK_IMPORTED_MODULE_4__.TwCell, {\n                    className: \"w-[6%] border\",\n                    children: \"Ho\\xe0 %\"\n                }),\n                (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(_components_modules_football_odds_shared_components__WEBPACK_IMPORTED_MODULE_4__.TwCell, {\n                    className: \"w-[6%] border\",\n                    children: \"Kh\\xe1ch %\"\n                }),\n                (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(_components_modules_football_odds_shared_components__WEBPACK_IMPORTED_MODULE_4__.TwCell, {\n                    className: \"w-[8%] border\",\n                    children: \"Ho\\xe0n vốn %\"\n                }),\n                (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(_components_modules_football_odds_shared_components__WEBPACK_IMPORTED_MODULE_4__.TwCell, {\n                    className: \"w-[18%] border\",\n                    colSpan: 3,\n                    children: \"Ti\\xeau chuẩn Kelly\"\n                }),\n                (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(_components_modules_football_odds_shared_components__WEBPACK_IMPORTED_MODULE_4__.TwCell, {\n                    className: \"w-[10%] border\",\n                    children: \"Cập nhật\"\n                })\n            ]\n        })\n    });\n};\nconst ScoreOddsChangesTable = ({ bookMaker, market, matchId, half })=>{\n    // const { oddsType } = useOddsStore();\n    const { data, isFetching } = (0,_hooks_useFootball_useOddsData__WEBPACK_IMPORTED_MODULE_2__.useMatchOddsChangeData)(matchId, bookMaker?.id, market, half);\n    if (isFetching) {\n        return (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(\"div\", {\n            className: \"h-[59vh]\",\n            children: \"Loading...\"\n        });\n    }\n    const oddsList = data?.oddsList || [];\n    const shownList = oddsList.map((change, idx)=>{\n        const prevChange = oddsList[idx - 1] || {};\n        const prev = prevChange?.odds || {};\n        return {\n            ...change,\n            prev: prev\n        };\n    }).reverse();\n    return (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(\"div\", {\n        className: \"\",\n        children: (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(\"div\", {\n            className: \"max-h-[55vh] overflow-y-auto text-sm scrollbar\",\n            children: (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(\"table\", {\n                className: \"min-w-full  border-collapse text-center\",\n                children: (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(\"tbody\", {\n                    className: \"divide-list max-h-[45vh] w-full\",\n                    children: shownList.map((change, idx)=>{\n                        const odds = change.odds || {};\n                        const prev = change.prev || {};\n                        return (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsxs)(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.Fragment, {\n                            children: [\n                                (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsxs)(TwRowSc, {\n                                    className: \"divide-list-x h-11 w-full\",\n                                    css: [\n                                        idx % 2 === 1 && {\n                                            \"--tw-bg-opacity\": \"1\",\n                                            \"backgroundColor\": \"rgb(242 246 249 / var(--tw-bg-opacity, 1))\",\n                                            \":is(.dark *)\": {\n                                                \"--tw-bg-opacity\": \"1\",\n                                                \"backgroundColor\": \"rgb(27 27 27 / var(--tw-bg-opacity, 1))\"\n                                            }\n                                        },\n                                         false ? 0 : \";label:ScoreOddsChangesTable;\",\n                                         false ? 0 : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"\n                                    ],\n                                    \"data-tw\": \"bg-light-match dark:bg-dark-match\",\n                                    children: [\n                                        (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(TwCellSc, {\n                                            className: \"w-[8%]\",\n                                            rowSpan: 3,\n                                            children: \"Live\"\n                                        }),\n                                        (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(TwCellSc, {\n                                            className: \"w-[10%] text-logo-blue\",\n                                            children: \"Home\"\n                                        }),\n                                        change.close ? (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.Fragment, {\n                                            children: (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(TwCellSc, {\n                                                className: \"w-[7%] text-dark-loss\",\n                                                colSpan: 10,\n                                                children: \"Đ\\xf3ng\"\n                                            })\n                                        }) : (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsxs)(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.Fragment, {\n                                            children: [\n                                                (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(TwOddsCellSc, {\n                                                    className: \"w-[7%]\",\n                                                    children: (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(OddsCellSc, {\n                                                        score: \"1:0\",\n                                                        odds: odds.h1,\n                                                        prevOdds: prev.h1,\n                                                        side: 1\n                                                    })\n                                                }),\n                                                (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(TwOddsCellSc, {\n                                                    className: \"w-[7%]\",\n                                                    children: (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(OddsCellSc, {\n                                                        score: \"2:0\",\n                                                        odds: odds.h2,\n                                                        side: 1,\n                                                        prevOdds: prev.h2\n                                                    })\n                                                }),\n                                                (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(TwOddsCellSc, {\n                                                    className: \"w-[7%]\",\n                                                    children: (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(OddsCellSc, {\n                                                        score: \"2:1\",\n                                                        odds: odds.h3,\n                                                        side: 1,\n                                                        prevOdds: prev.h3\n                                                    })\n                                                }),\n                                                (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(TwOddsCellSc, {\n                                                    className: \"w-[7%]\",\n                                                    children: (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(OddsCellSc, {\n                                                        score: \"3:0\",\n                                                        odds: odds.h4,\n                                                        side: 1,\n                                                        prevOdds: prev.h4\n                                                    })\n                                                }),\n                                                (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(TwOddsCellSc, {\n                                                    className: \"w-[7%]\",\n                                                    children: (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(OddsCellSc, {\n                                                        score: \"3:1\",\n                                                        odds: odds.h5,\n                                                        side: 1,\n                                                        prevOdds: prev.h5\n                                                    })\n                                                }),\n                                                (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(TwOddsCellSc, {\n                                                    className: \"w-[7%]\",\n                                                    children: (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(OddsCellSc, {\n                                                        score: \"3:2\",\n                                                        odds: odds.h6,\n                                                        side: 1,\n                                                        prevOdds: prev.h6\n                                                    })\n                                                }),\n                                                (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(TwOddsCellSc, {\n                                                    className: \"w-[7%]\",\n                                                    children: (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(OddsCellSc, {\n                                                        score: \"4:0\",\n                                                        odds: odds.h7,\n                                                        side: 1,\n                                                        prevOdds: prev.h7\n                                                    })\n                                                }),\n                                                (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(TwOddsCellSc, {\n                                                    className: \"w-[7%]\",\n                                                    children: (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(OddsCellSc, {\n                                                        score: \"4:1\",\n                                                        odds: odds.h8,\n                                                        side: 1,\n                                                        prevOdds: prev.h8\n                                                    })\n                                                }),\n                                                (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(TwOddsCellSc, {\n                                                    className: \"w-[7%]\",\n                                                    children: (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(OddsCellSc, {\n                                                        score: \"4:2\",\n                                                        odds: odds.h9,\n                                                        side: 1,\n                                                        prevOdds: prev.h9\n                                                    })\n                                                }),\n                                                (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(TwOddsCellSc, {\n                                                    className: \"w-[7%]\",\n                                                    children: (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(OddsCellSc, {\n                                                        score: \"4:3\",\n                                                        odds: odds.h10,\n                                                        side: 1,\n                                                        prevOdds: prev.h10\n                                                    })\n                                                })\n                                            ]\n                                        }),\n                                        (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(TwCellSc, {\n                                            className: \"w-1/4\",\n                                            rowSpan: 3,\n                                            children: (0,_barrel_optimize_names_format_date_fns__WEBPACK_IMPORTED_MODULE_12__.format)(new Date(change.ct * 1000), \"dd/MM HH:mm\")\n                                        })\n                                    ]\n                                }, `${idx}-a`),\n                                (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsxs)(TwRowSc, {\n                                    className: \"divide-list-x h-10 w-full\",\n                                    css: [\n                                        idx % 2 === 1 && {\n                                            \"--tw-bg-opacity\": \"1\",\n                                            \"backgroundColor\": \"rgb(242 246 249 / var(--tw-bg-opacity, 1))\",\n                                            \":is(.dark *)\": {\n                                                \"--tw-bg-opacity\": \"1\",\n                                                \"backgroundColor\": \"rgb(27 27 27 / var(--tw-bg-opacity, 1))\"\n                                            }\n                                        },\n                                         false ? 0 : \";label:ScoreOddsChangesTable;\",\n                                         false ? 0 : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9ub2xhbi9Eb2N1bWVudHMvd3d3L2JsdWUtcGFwZXItYjk2OS9zcmMvY29tcG9uZW50cy9tb2R1bGVzL2Zvb3RiYWxsL29kZHMvT2Rkc0NoYW5nZU1vZGFsLnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUE0cEJvQiIsImZpbGUiOiIvVXNlcnMvbm9sYW4vRG9jdW1lbnRzL3d3dy9ibHVlLXBhcGVyLWI5Njkvc3JjL2NvbXBvbmVudHMvbW9kdWxlcy9mb290YmFsbC9vZGRzL09kZHNDaGFuZ2VNb2RhbC50c3giLCJzb3VyY2VzQ29udGVudCI6WyIvKiBlc2xpbnQtZGlzYWJsZSBAbmV4dC9uZXh0L25vLWltZy1lbGVtZW50ICovXG5pbXBvcnQgeyBEaWFsb2csIFRyYW5zaXRpb24gfSBmcm9tICdAaGVhZGxlc3N1aS9yZWFjdCc7XG5pbXBvcnQgeyBmb3JtYXQgfSBmcm9tICdkYXRlLWZucyc7XG5pbXBvcnQgUmVhY3QsIHsgRnJhZ21lbnQsIHVzZVJlZiwgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgdHcgZnJvbSAndHdpbi5tYWNybyc7XG5cbmltcG9ydCB7IHVzZU1hdGNoT2Rkc0NoYW5nZURhdGEgfSBmcm9tICdAL2hvb2tzL3VzZUZvb3RiYWxsL3VzZU9kZHNEYXRhJztcblxuaW1wb3J0IHsgUGVyaW9kU3dpdGNoZXIgfSBmcm9tICdAL2NvbXBvbmVudHMvbW9kdWxlcy9mb290YmFsbC9vZGRzL1BlcmlvZFN3aXRjaGVyJztcbmltcG9ydCB7XG4gIFR3Q2VsbCxcbiAgVHdIZWFkZXJSb3csXG59IGZyb20gJ0AvY29tcG9uZW50cy9tb2R1bGVzL2Zvb3RiYWxsL29kZHMvc2hhcmVkLWNvbXBvbmVudHMnO1xuaW1wb3J0IHsgVHdGaWx0ZXJCdG4gfSBmcm9tICdAL2NvbXBvbmVudHMvbW9kdWxlcy9mb290YmFsbC90dy1jb21wb25lbnRzJztcblxuaW1wb3J0IHsgdXNlT2Rkc0RldGFpbHNTdG9yZSwgdXNlT2Rkc1N0b3JlIH0gZnJvbSAnQC9zdG9yZXMnO1xuXG5pbXBvcnQgeyBjb252ZXJ0T2RkcywgaXNWYWxFbXB0eSwgcm91bmROdW0gfSBmcm9tICdAL3V0aWxzJztcblxuaW1wb3J0IE9kZERvd25TVkcgZnJvbSAnL3B1YmxpYy9zdmcvb2RkLWRvd24uc3ZnJztcbmltcG9ydCBPZGRVcFNWRyBmcm9tICcvcHVibGljL3N2Zy9vZGQtdXAuc3ZnJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gT2Rkc0NoYW5nZXNNb2RhbCh7XG4gIG9wZW4sXG4gIHNldE9wZW4sXG4gIGJvb2tNYWtlcixcbiAgbWF0Y2hJZCxcbiAgaGFsZiA9IDAsXG59OiB7XG4gIG9wZW46IGJvb2xlYW47XG4gIHNldE9wZW46ICh4OiBib29sZWFuKSA9PiB2b2lkO1xuICBib29rTWFrZXI/OiBhbnk7XG4gIG1hdGNoSWQ6IHN0cmluZztcbiAgaGFsZj86IG51bWJlcjtcbn0pIHtcbiAgY29uc3QgY2FuY2VsQnV0dG9uUmVmID0gdXNlUmVmKG51bGwpO1xuXG4gIHJldHVybiAoXG4gICAgPFRyYW5zaXRpb24uUm9vdCBzaG93PXtvcGVufSBhcz17RnJhZ21lbnR9PlxuICAgICAgPERpYWxvZ1xuICAgICAgICBhcz0nZGl2J1xuICAgICAgICBjbGFzc05hbWU9J3JlbGF0aXZlIHotMTAnXG4gICAgICAgIGluaXRpYWxGb2N1cz17Y2FuY2VsQnV0dG9uUmVmfVxuICAgICAgICBvbkNsb3NlPXtzZXRPcGVufVxuICAgICAgPlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT0nZml4ZWQgaW5zZXQtMCB6LTEwIG92ZXJmbG93LXktYXV0byBzY3JvbGxiYXInPlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPSdmbGV4IG1pbi1oLWZ1bGwgaXRlbXMtY2VudGVyIGp1c3RpZnktY2VudGVyIHAtNCB0ZXh0LWNlbnRlciBzbTpwLTAgJz5cbiAgICAgICAgICAgIDxUcmFuc2l0aW9uLkNoaWxkXG4gICAgICAgICAgICAgIGFzPXtGcmFnbWVudH1cbiAgICAgICAgICAgICAgZW50ZXI9J2Vhc2Utb3V0IGR1cmF0aW9uLTMwMCdcbiAgICAgICAgICAgICAgZW50ZXJGcm9tPSdvcGFjaXR5LTAgdHJhbnNsYXRlLXktNCBzbTp0cmFuc2xhdGUteS0wIHNtOnNjYWxlLTk1J1xuICAgICAgICAgICAgICBlbnRlclRvPSdvcGFjaXR5LTEwMCB0cmFuc2xhdGUteS0wIHNtOnNjYWxlLTEwMCdcbiAgICAgICAgICAgICAgbGVhdmU9J2Vhc2UtaW4gZHVyYXRpb24tMjAwJ1xuICAgICAgICAgICAgICBsZWF2ZUZyb209J29wYWNpdHktMTAwIHRyYW5zbGF0ZS15LTAgc206c2NhbGUtMTAwJ1xuICAgICAgICAgICAgICBsZWF2ZVRvPSdvcGFjaXR5LTAgdHJhbnNsYXRlLXktNCBzbTp0cmFuc2xhdGUteS0wIHNtOnNjYWxlLTk1J1xuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICA8RGlhbG9nLlBhbmVsIGNsYXNzTmFtZT0ncmVsYXRpdmUgdy0xMS8xMiB0cmFuc2Zvcm0gb3ZlcmZsb3ctaGlkZGVuIHJvdW5kZWQtbGcgYmctd2hpdGUgIHRleHQtbGlnaHQtYmxhY2sgc2hhZG93LXhsIHRyYW5zaXRpb24tYWxsIGRhcms6YmctbW9kYWwgZGFyazp0ZXh0LWRhcmstdGV4dCAgc206bXktOCBsZzp3LVs1MHZ3XSc+XG4gICAgICAgICAgICAgICAgPE9kZHNDaGFuZ2VzQ29tcG9uZW50VGFibGVcbiAgICAgICAgICAgICAgICAgIHNldE9wZW49e3NldE9wZW59XG4gICAgICAgICAgICAgICAgICBib29rTWFrZXI9e2Jvb2tNYWtlcn1cbiAgICAgICAgICAgICAgICAgIG1hdGNoSWQ9e21hdGNoSWR9XG4gICAgICAgICAgICAgICAgICBwZXJpb2Q9e2hhbGZ9XG4gICAgICAgICAgICAgICAgPjwvT2Rkc0NoYW5nZXNDb21wb25lbnRUYWJsZT5cbiAgICAgICAgICAgICAgPC9EaWFsb2cuUGFuZWw+XG4gICAgICAgICAgICA8L1RyYW5zaXRpb24uQ2hpbGQ+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9EaWFsb2c+XG4gICAgPC9UcmFuc2l0aW9uLlJvb3Q+XG4gICk7XG59XG5cbmV4cG9ydCBjb25zdCBPZGRzQ2hhbmdlc0NvbXBvbmVudFRhYmxlID0gKHtcbiAgc2V0T3BlbixcbiAgYm9va01ha2VyLFxuICBtYXRjaElkLFxuICBwZXJpb2QgPSAwLFxufToge1xuICBzZXRPcGVuOiAob3BlbjogYW55KSA9PiB2b2lkO1xuICBib29rTWFrZXI6IGFueTtcbiAgbWF0Y2hJZDogc3RyaW5nO1xuICBwZXJpb2Q/OiBudW1iZXI7XG59KSA9PiB7XG4gIGNvbnN0IHsgY29tcGFyZVR5cGUgfSA9IHVzZU9kZHNEZXRhaWxzU3RvcmUoKTtcbiAgY29uc3QgW21hcmtldCwgc2V0TWFya2V0XSA9IHVzZVN0YXRlPHN0cmluZz4oKCkgPT4ge1xuICAgIC8vIFRPRE8gYWRkIG1vcmUgbWFya2V0c1xuICAgIGlmIChcbiAgICAgICFbJ2hkcCcsICdzdGQxeDInLCAndHgnLCAnc2NvcmUnLCAnY29ybmVyVHgnLCAnZXUxeDInXS5pbmNsdWRlcyhcbiAgICAgICAgY29tcGFyZVR5cGVcbiAgICAgIClcbiAgICApIHtcbiAgICAgIHJldHVybiAnaGRwJztcbiAgICB9XG4gICAgcmV0dXJuIGNvbXBhcmVUeXBlO1xuICB9KTtcbiAgY29uc3QgW2hhbGYsIHNldEhhbGZdID0gdXNlU3RhdGU8bnVtYmVyPihwZXJpb2QpO1xuXG4gIHJldHVybiAoXG4gICAgPGRpdiBjbGFzc05hbWU9JyBkaXZpZGUtbGlzdCAnPlxuICAgICAgPGRpdiBjbGFzc05hbWU9JyBmbGV4IHBsYWNlLWNvbnRlbnQtY2VudGVyIGl0ZW1zLWNlbnRlciByb3VuZGVkLXQtbGcgcHktMyBmb250LWV4dHJhYm9sZCB0ZXh0LWJsYWNrIGRhcms6dGV4dC13aGl0ZSc+XG4gICAgICAgIHtib29rTWFrZXIubmFtZX06IE9kZHMgY2hhbmdlc1xuICAgICAgPC9kaXY+XG5cbiAgICAgIHsvKiBPZGRzIGNoYW5nZXMgbWVudSAqL31cbiAgICAgIDxkaXYgY2xhc3NOYW1lPSdmbGV4IGl0ZW1zLWNlbnRlciBqdXN0aWZ5LWJldHdlZW4gcC0yLjUnPlxuICAgICAgICB7bWFya2V0ICE9PSAnZXUxeDInICYmIChcbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0nZmxleCBnYXAtMyc+XG4gICAgICAgICAgICA8VHdGaWx0ZXJCdG5cbiAgICAgICAgICAgICAgb25DbGljaz17KCkgPT4gc2V0TWFya2V0KCdoZHAnKX1cbiAgICAgICAgICAgICAgaXNBY3RpdmU9e21hcmtldCA9PT0gJ2hkcCd9XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIFThu7cgbOG7hyBjaMOidSDDgVxuICAgICAgICAgICAgPC9Ud0ZpbHRlckJ0bj5cbiAgICAgICAgICAgIDxUd0ZpbHRlckJ0blxuICAgICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiBzZXRNYXJrZXQoJ3R4Jyl9XG4gICAgICAgICAgICAgIGlzQWN0aXZlPXttYXJrZXQgPT09ICd0eCd9XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIFThu7cgbOG7hyB0w6BpIHjhu4l1XG4gICAgICAgICAgICA8L1R3RmlsdGVyQnRuPlxuICAgICAgICAgICAgPFR3RmlsdGVyQnRuXG4gICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHNldE1hcmtldCgnc3RkMXgyJyl9XG4gICAgICAgICAgICAgIGlzQWN0aXZlPXttYXJrZXQgPT09ICdzdGQxeDInfVxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAxeDJcbiAgICAgICAgICAgIDwvVHdGaWx0ZXJCdG4+XG5cbiAgICAgICAgICAgIHsvKiA8VHdGaWx0ZXJCdG5cbiAgICAgICAgICAgICAgb25DbGljaz17KCkgPT4gc2V0TWFya2V0KCdjb3JuZXJUeCcpfVxuICAgICAgICAgICAgICBpc0FjdGl2ZT17bWFya2V0ID09PSAnY29ybmVyVHgnfVxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICBQaOG6oXQgZ8OzYyBUL1hcbiAgICAgICAgICAgIDwvVHdGaWx0ZXJCdG4+XG5cbiAgICAgICAgICAgIDxUd0ZpbHRlckJ0blxuICAgICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiBzZXRNYXJrZXQoJ3Njb3JlJyl9XG4gICAgICAgICAgICAgIGlzQWN0aXZlPXttYXJrZXQgPT09ICdzY29yZSd9XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIFThu7cgc+G7kVxuICAgICAgICAgICAgPC9Ud0ZpbHRlckJ0bj4gKi99XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICl9XG5cbiAgICAgICAge21hcmtldCA9PT0gJ2V1MXgyJyAmJiAoXG4gICAgICAgICAgPFR3RmlsdGVyQnRuXG4gICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiBzZXRNYXJrZXQoJ2V1MXgyJyl9XG4gICAgICAgICAgICBpc0FjdGl2ZT17bWFya2V0ID09PSAnZXUxeDInfVxuICAgICAgICAgID5cbiAgICAgICAgICAgIEVVIDF4MlxuICAgICAgICAgIDwvVHdGaWx0ZXJCdG4+XG4gICAgICAgICl9XG5cbiAgICAgICAgeyFbJ2V1MXgyJywgJ2Nvcm5lclR4J10uaW5jbHVkZXMobWFya2V0KSAmJiAoXG4gICAgICAgICAgPFBlcmlvZFN3aXRjaGVyXG4gICAgICAgICAgICBvcHRpb25zPXtbXG4gICAgICAgICAgICAgIHsgbmFtZTogJ0ZUJywgdmFsdWU6IDAgfSxcbiAgICAgICAgICAgICAgeyBuYW1lOiAnSFQnLCB2YWx1ZTogMSB9LFxuICAgICAgICAgICAgXX1cbiAgICAgICAgICAgIHZhbEdldHRlcj17c2V0SGFsZn1cbiAgICAgICAgICAgIGhhbGY9e2hhbGZ9XG4gICAgICAgICAgPjwvUGVyaW9kU3dpdGNoZXI+XG4gICAgICAgICl9XG4gICAgICA8L2Rpdj5cblxuICAgICAgey8qIE9kZHMgY2hhbmdlcyBoZWFkZXIgc2VjdGlvbiAqL31cbiAgICAgIDxIZWFkZXJTZWN0aW9uIG1hcmtldD17bWFya2V0fT48L0hlYWRlclNlY3Rpb24+XG5cbiAgICAgIHsvKiBPZGRzIGNoYW5nZXMgZGF0YSBzZWN0aW9uICovfVxuICAgICAge1snM2luMScsICdoZHAnLCAndHgnLCAnc3RkMXgyJ10uaW5jbHVkZXMobWFya2V0KSAmJiAoXG4gICAgICAgIDxPZGRzM2luMUNoYW5nZXNUYWJsZVxuICAgICAgICAgIGJvb2tNYWtlcj17Ym9va01ha2VyfVxuICAgICAgICAgIG1hcmtldD17bWFya2V0fVxuICAgICAgICAgIG1hdGNoSWQ9e21hdGNoSWR9XG4gICAgICAgICAgaGFsZj17aGFsZn1cbiAgICAgICAgPjwvT2RkczNpbjFDaGFuZ2VzVGFibGU+XG4gICAgICApfVxuICAgICAge21hcmtldCA9PT0gJ3Njb3JlJyAmJiAoXG4gICAgICAgIDxTY29yZU9kZHNDaGFuZ2VzVGFibGVcbiAgICAgICAgICBib29rTWFrZXI9e2Jvb2tNYWtlcn1cbiAgICAgICAgICBtYXJrZXQ9e21hcmtldH1cbiAgICAgICAgICBtYXRjaElkPXttYXRjaElkfVxuICAgICAgICAgIGhhbGY9e2hhbGZ9XG4gICAgICAgID48L1Njb3JlT2Rkc0NoYW5nZXNUYWJsZT5cbiAgICAgICl9XG4gICAgICB7bWFya2V0ID09PSAnY29ybmVyVHgnICYmIChcbiAgICAgICAgPENvcm5lclR4T2Rkc0NoYW5nZXNUYWJsZVxuICAgICAgICAgIGJvb2tNYWtlcj17Ym9va01ha2VyfVxuICAgICAgICAgIG1hcmtldD17bWFya2V0fVxuICAgICAgICAgIG1hdGNoSWQ9e21hdGNoSWR9XG4gICAgICAgICAgaGFsZj17aGFsZn1cbiAgICAgICAgPjwvQ29ybmVyVHhPZGRzQ2hhbmdlc1RhYmxlPlxuICAgICAgKX1cblxuICAgICAge21hcmtldCA9PT0gJ2V1MXgyJyAmJiAoXG4gICAgICAgIDxFdTF4Mk9kZHNDaGFuZ2VzVGFibGVcbiAgICAgICAgICBib29rTWFrZXI9e2Jvb2tNYWtlcn1cbiAgICAgICAgICBtYXJrZXQ9e21hcmtldH1cbiAgICAgICAgICBtYXRjaElkPXttYXRjaElkfVxuICAgICAgICAgIC8vIGhhbGY9e2hhbGZ9XG4gICAgICAgID48L0V1MXgyT2Rkc0NoYW5nZXNUYWJsZT5cbiAgICAgICl9XG5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPSdmbGV4IGp1c3RpZnktZW5kIHAtMic+XG4gICAgICAgIDxUd0ZpbHRlckJ0blxuICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHtcbiAgICAgICAgICAgIHNldE9wZW4oZmFsc2UpO1xuICAgICAgICAgIH19XG4gICAgICAgID5cbiAgICAgICAgICBDbG9zZVxuICAgICAgICA8L1R3RmlsdGVyQnRuPlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gICk7XG59O1xuXG5jb25zdCBIZWFkZXJTZWN0aW9uID0gKHsgbWFya2V0IH06IHsgbWFya2V0OiBhbnkgfSkgPT4ge1xuICByZXR1cm4gKFxuICAgIDx0YWJsZSBjbGFzc05hbWU9J3ctZnVsbCB0ZXh0LWNlbnRlciB0ZXh0LXNtJz5cbiAgICAgIDx0aGVhZCBjbGFzc05hbWU9J2JvcmRlciBib3JkZXItZGFyay10ZXh0LzIwIGJnLWxpZ2h0LW1hdGNoIGRhcms6YmctZGFyay1tYXRjaCc+XG4gICAgICAgIHtbJzNpbjEnLCAnaGRwJywgJ3R4JywgJ3N0ZDF4MiddLmluY2x1ZGVzKG1hcmtldCkgJiYgKFxuICAgICAgICAgIDx0ciBjbGFzc05hbWU9J2RpdmlkZS1saXN0LXggaC0xMCB3LWZ1bGwnPlxuICAgICAgICAgICAgPHRoIGNsYXNzTmFtZT0ndy1bMTUlXSc+VGltZTwvdGg+XG4gICAgICAgICAgICA8dGggY2xhc3NOYW1lPSd3LVsxNSVdJz5U4bu3IHPhu5E8L3RoPlxuICAgICAgICAgICAgPHRoIGNsYXNzTmFtZT0ndy1bMTUlXSc+e21hcmtldCA9PT0gJ3R4JyA/ICdUw6BpJyA6ICdDaOG7pyd9PC90aD5cbiAgICAgICAgICAgIDx0aCBjbGFzc05hbWU9J3ctWzE1JV0nPnttYXJrZXQgPT09ICd0eCcgPyAnS8OobycgOiAnSMOyYSd9PC90aD5cbiAgICAgICAgICAgIDx0aCBjbGFzc05hbWU9J3ctWzE1JV0nPnttYXJrZXQgPT09ICd0eCcgPyAnWOG7iXUnIDogJ0tow6FjaCd9PC90aD5cbiAgICAgICAgICAgIDx0aCBjbGFzc05hbWU9J3ctMS80Jz5D4bqtcCBuaOG6rXQ8L3RoPlxuICAgICAgICAgIDwvdHI+XG4gICAgICAgICl9XG4gICAgICAgIHttYXJrZXQgPT09ICdzY29yZScgJiYgKFxuICAgICAgICAgIDx0ciBjbGFzc05hbWU9J2RpdmlkZS1saXN0LXggaC0xMCB3LWZ1bGwnPlxuICAgICAgICAgICAgPHRoIGNsYXNzTmFtZT0ndy1bOCVdJz5UaW1lPC90aD5cbiAgICAgICAgICAgIDx0aCBjbGFzc05hbWU9J3ctWzEwJV0nPlRpbWU8L3RoPlxuICAgICAgICAgICAgPHRoIGNsYXNzTmFtZT0ndy1bNzAlXSc+T2RkczwvdGg+XG4gICAgICAgICAgICA8dGggY2xhc3NOYW1lPScnPkPhuq1wIG5o4bqtdDwvdGg+XG4gICAgICAgICAgPC90cj5cbiAgICAgICAgKX1cbiAgICAgICAge21hcmtldCA9PT0gJ2Nvcm5lclR4JyAmJiAoXG4gICAgICAgICAgPHRyIGNsYXNzTmFtZT0nZGl2aWRlLWxpc3QteCBoLTEwIHctZnVsbCc+XG4gICAgICAgICAgICA8dGggY2xhc3NOYW1lPSd3LVsxMCVdJz5UaW1lPC90aD5cbiAgICAgICAgICAgIHsvKiA8dGggY2xhc3NOYW1lPSd3LVsxMCVdJz5Db3JuZXI8L3RoPiAqL31cbiAgICAgICAgICAgIDx0aCBjbGFzc05hbWU9J3ctWzEwJV0nPk92ZXI8L3RoPlxuICAgICAgICAgICAgPHRoIGNsYXNzTmFtZT0ndy1bMTAlXSc+Q29ybmVyczwvdGg+XG4gICAgICAgICAgICA8dGggY2xhc3NOYW1lPSd3LVsxMCVdJz5VbmRlcjwvdGg+XG4gICAgICAgICAgICA8dGggY2xhc3NOYW1lPSd3LVsyMCVdJz5VcGRhdGU8L3RoPlxuICAgICAgICAgIDwvdHI+XG4gICAgICAgICl9XG4gICAgICA8L3RoZWFkPlxuICAgIDwvdGFibGU+XG4gICk7XG59O1xuXG5jb25zdCBPZGRzM2luMUNoYW5nZXNUYWJsZSA9ICh7XG4gIGJvb2tNYWtlcixcbiAgbWFya2V0LFxuICBtYXRjaElkLFxuICBoYWxmLFxufToge1xuICBib29rTWFrZXI6IGFueTtcbiAgbWFya2V0OiBzdHJpbmc7XG4gIG1hdGNoSWQ6IHN0cmluZztcbiAgaGFsZjogbnVtYmVyO1xufSkgPT4ge1xuICBjb25zdCB7IG9kZHNUeXBlIH0gPSB1c2VPZGRzU3RvcmUoKTtcbiAgY29uc3QgeyBkYXRhLCBpc0xvYWRpbmcgfSA9IHVzZU1hdGNoT2Rkc0NoYW5nZURhdGEoXG4gICAgbWF0Y2hJZCxcbiAgICBib29rTWFrZXI/LmlkLFxuICAgIG1hcmtldCxcbiAgICBoYWxmXG4gICk7XG5cbiAgaWYgKGlzTG9hZGluZykge1xuICAgIHJldHVybiA8ZGl2IGNsYXNzTmFtZT0naC1bNTh2aF0nPkxvYWRpbmcuLi48L2Rpdj47XG4gIH1cblxuICBjb25zdCBvZGRzTGlzdCA9IChkYXRhPy5vZGRzTGlzdCB8fCBbXSkuc29ydCgoYTogYW55LCBiOiBhbnkpID0+IGEuY3QgLSBiLmN0KTtcblxuICByZXR1cm4gKFxuICAgIDxkaXYgY2xhc3NOYW1lPScnPlxuICAgICAgPGRpdiBjbGFzc05hbWU9J2gtWzU1dmhdIG92ZXJmbG93LXktYXV0byB0ZXh0LXNtIHNjcm9sbGJhcic+XG4gICAgICAgIDx0YWJsZSBjbGFzc05hbWU9J21pbi13LWZ1bGwgIGJvcmRlci1jb2xsYXBzZSB0ZXh0LWNlbnRlcic+XG4gICAgICAgICAgPHRib2R5IGNsYXNzTmFtZT0nZGl2aWRlLWxpc3QgbWF4LWgtWzQ1dmhdIHctZnVsbCc+XG4gICAgICAgICAgICB7b2Rkc0xpc3QubWFwKChjaGFuZ2U6IGFueSwgaW5kZXg6IG51bWJlcikgPT4ge1xuICAgICAgICAgICAgICBsZXQgbWF0Y2hUaW1lID0gJyc7XG4gICAgICAgICAgICAgIGlmIChgJHtjaGFuZ2UudHlwZX1gID09PSAnMicpIHtcbiAgICAgICAgICAgICAgICBtYXRjaFRpbWUgPSAnTGl2ZSc7XG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAoY2hhbmdlLnR5cGUgPT09IDEpIHtcbiAgICAgICAgICAgICAgICBtYXRjaFRpbWUgPSAnSW5pdGlhbCc7XG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAoY2hhbmdlLm10KSB7XG4gICAgICAgICAgICAgICAgbWF0Y2hUaW1lID0gYCR7Y2hhbmdlLm10fSdgO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgY29uc3Qgc2NvcmVUZXh0ID0gIWlzVmFsRW1wdHkoY2hhbmdlLmhzKVxuICAgICAgICAgICAgICAgID8gYCR7Y2hhbmdlLmhzfSAtICR7Y2hhbmdlLmFzfWBcbiAgICAgICAgICAgICAgICA6ICcnO1xuXG4gICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgPHRyXG4gICAgICAgICAgICAgICAgICBrZXk9e2luZGV4fVxuICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPSdkaXZpZGUtbGlzdC14IGgtOCB3LWZ1bGwnXG4gICAgICAgICAgICAgICAgICBjc3M9e1tcbiAgICAgICAgICAgICAgICAgICAgaW5kZXggJSAyID09PSAxICYmIHR3YGJnLWxpZ2h0LW1hdGNoIGRhcms6YmctZGFyay1tYXRjaGAsXG4gICAgICAgICAgICAgICAgICBdfVxuICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9J3ctWzE1JV0nPnttYXRjaFRpbWV9PC90ZD5cbiAgICAgICAgICAgICAgICAgIDx0ZFxuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9J3ctWzE1JV0nXG4gICAgICAgICAgICAgICAgICAgIGNzcz17W2NoYW5nZS5zYyAmJiB0d2BiZy1sb2dvLWJsdWUvMzBgXX1cbiAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAge3Njb3JlVGV4dH1cbiAgICAgICAgICAgICAgICAgIDwvdGQ+XG4gICAgICAgICAgICAgICAgICB7Y2hhbmdlLmNsb3NlID8gKFxuICAgICAgICAgICAgICAgICAgICA8dGQgY29sU3Bhbj17M30gY2xhc3NOYW1lPSd0ZXh0LWRhcmstbG9zcyc+XG4gICAgICAgICAgICAgICAgICAgICAgxJDDs25nXG4gICAgICAgICAgICAgICAgICAgIDwvdGQ+XG4gICAgICAgICAgICAgICAgICApIDogKFxuICAgICAgICAgICAgICAgICAgICA8PlxuICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9J3ctWzE1JV0nPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdlxuICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9J214LWF1dG8gZmxleCB3LTI0IHBsYWNlLWNvbnRlbnQtY2VudGVyIGl0ZW1zLWNlbnRlciAganVzdGlmeS1jZW50ZXIgZ2FwLTEnXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGNzcz17W1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoYW5nZS5mdCA9PT0gMSAmJiB0d2B0ZXh0LWRhcmstd2luYCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGFuZ2UuZnQgPT09IC0xICYmIHR3YHRleHQtZGFyay1sb3NzYCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgXX1cbiAgICAgICAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge2NvbnZlcnRPZGRzKGNoYW5nZS5vZGRzPy5mLCBtYXJrZXQsIG9kZHNUeXBlLCAxKX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9J3RleHQteHhzJz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7Y2hhbmdlLmZ0ID09PSAtMSAmJiA8T2RkRG93blNWRz48L09kZERvd25TVkc+fVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtjaGFuZ2UuZnQgPT09IDEgJiYgPE9kZFVwU1ZHPjwvT2RkVXBTVkc+fVxuICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxuICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9J3ctWzE1JV0nPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdlxuICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9J214LWF1dG8gZmxleCB3LTI0IGl0ZW1zLWNlbnRlciBqdXN0aWZ5LWNlbnRlciBnYXAtMSdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgY3NzPXtbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hhbmdlLnN0ID09PSAxICYmIHR3YHRleHQtZGFyay13aW5gLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoYW5nZS5zdCA9PT0gLTEgJiYgdHdgdGV4dC1kYXJrLWxvc3NgLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBdfVxuICAgICAgICAgICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7Y29udmVydE9kZHMoY2hhbmdlLm9kZHM/LnMsIG1hcmtldCwgb2Rkc1R5cGUsIDIpfVxuICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT0ndGV4dC14eHMnPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtjaGFuZ2Uuc3QgPT09IC0xICYmIDxPZGREb3duU1ZHPjwvT2RkRG93blNWRz59XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge2NoYW5nZS5zdCA9PT0gMSAmJiA8T2RkVXBTVkc+PC9PZGRVcFNWRz59XG4gICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XG4gICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT0ndy1bMTUlXSc+XG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT0nbXgtYXV0byBmbGV4IHctMjQgaXRlbXMtY2VudGVyIGp1c3RpZnktY2VudGVyIGdhcC0xJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICBjc3M9e1tcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGFuZ2UudHQgPT09IDEgJiYgdHdgdGV4dC1kYXJrLXdpbmAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hhbmdlLnR0ID09PSAtMSAmJiB0d2B0ZXh0LWRhcmstbG9zc2AsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIF19XG4gICAgICAgICAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtjb252ZXJ0T2RkcyhjaGFuZ2Uub2Rkcz8udCwgbWFya2V0LCBvZGRzVHlwZSwgMyl9XG4gICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPSd0ZXh0LXh4cyc+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge2NoYW5nZS50dCA9PT0gLTEgJiYgPE9kZERvd25TVkc+PC9PZGREb3duU1ZHPn1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7Y2hhbmdlLnR0ID09PSAxICYmIDxPZGRVcFNWRz48L09kZFVwU1ZHPn1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgPC90ZD5cbiAgICAgICAgICAgICAgICAgICAgPC8+XG4gICAgICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT0ndy0xLzQnPlxuICAgICAgICAgICAgICAgICAgICB7Zm9ybWF0KG5ldyBEYXRlKGNoYW5nZS5jdCAqIDEwMDApLCAnZGQvTU0gSEg6bW0nKX1cbiAgICAgICAgICAgICAgICAgIDwvdGQ+XG4gICAgICAgICAgICAgICAgPC90cj5cbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH0pfVxuICAgICAgICAgIDwvdGJvZHk+XG4gICAgICAgIDwvdGFibGU+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgKTtcbn07XG5cbmV4cG9ydCBjb25zdCBFdTF4Mk9kZHNDaGFuZ2VzVGFibGUgPSAoe1xuICBib29rTWFrZXIsXG4gIG1hcmtldCxcbiAgbWF0Y2hJZCxcbn06IC8vIGhhbGYsXG57XG4gIGJvb2tNYWtlcjogYW55O1xuICBtYXJrZXQ6IHN0cmluZztcbiAgbWF0Y2hJZDogc3RyaW5nO1xuICAvLyBoYWxmOiBudW1iZXI7XG59KSA9PiB7XG4gIGNvbnN0IHsgb2Rkc1R5cGUgfSA9IHVzZU9kZHNTdG9yZSgpO1xuICBjb25zdCB7IG9kZHNFdTF4MkNoYW5nZURhdGFLZWxseSB9ID0gdXNlT2Rkc0RldGFpbHNTdG9yZSgpO1xuXG4gIGNvbnN0IG9kZHNDaGFuZ2VzID0gb2Rkc0V1MXgyQ2hhbmdlRGF0YUtlbGx5W2Jvb2tNYWtlcj8uaWRdIHx8IFtdO1xuXG4gIHJldHVybiAoXG4gICAgPD5cbiAgICAgIDx0YWJsZSBjbGFzc05hbWU9J3ctZnVsbCB0ZXh0LWNlbnRlciB0ZXh0LXNtJz5cbiAgICAgICAgPE9kZHNFdTF4MkNoYW5nZUhlYWRlcj48L09kZHNFdTF4MkNoYW5nZUhlYWRlcj5cbiAgICAgICAgPHRib2R5IGNsYXNzTmFtZT0nJz5cbiAgICAgICAgICB7KG9kZHNDaGFuZ2VzIHx8IFtdKS5tYXAoKGNoYW5nZTogYW55LCBpZHg6IG51bWJlcikgPT4ge1xuICAgICAgICAgICAgY29uc3QgbmV4dCA9IG9kZHNDaGFuZ2VzW2lkeCArIDFdIHx8IHt9O1xuXG4gICAgICAgICAgICBjb25zdCBoVXAgPSAhaXNWYWxFbXB0eShuZXh0KSAmJiBjaGFuZ2UuaCA+IG5leHQuaDtcbiAgICAgICAgICAgIGNvbnN0IGhEb3duID0gIWlzVmFsRW1wdHkobmV4dCkgJiYgY2hhbmdlLmggPCBuZXh0Lmg7XG4gICAgICAgICAgICBjb25zdCBkVXAgPSAhaXNWYWxFbXB0eShuZXh0KSAmJiBjaGFuZ2UuZCA+IG5leHQuZDtcbiAgICAgICAgICAgIGNvbnN0IGREb3duID0gIWlzVmFsRW1wdHkobmV4dCkgJiYgY2hhbmdlLmQgPCBuZXh0LmQ7XG4gICAgICAgICAgICBjb25zdCBhVXAgPSAhaXNWYWxFbXB0eShuZXh0KSAmJiBjaGFuZ2UuYSA+IG5leHQuYTtcbiAgICAgICAgICAgIGNvbnN0IGFEb3duID0gIWlzVmFsRW1wdHkobmV4dCkgJiYgY2hhbmdlLmEgPCBuZXh0LmE7XG5cbiAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgIDx0clxuICAgICAgICAgICAgICAgIGtleT17aWR4fVxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZT0naC04IGZvbnQtbGlnaHQnXG4gICAgICAgICAgICAgICAgY3NzPXtbaWR4ICUgMiA9PT0gMSAmJiB0d2BiZy1saWdodC1tYXRjaCBkYXJrOmJnLWRhcmstbWF0Y2hgXX1cbiAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIHsvKiA8VHdDZWxsIGNsYXNzTmFtZT0ndy1bNiVdIGJvcmRlcic+e2lofTwvVHdDZWxsPiAqL31cbiAgICAgICAgICAgICAgICA8VHdDZWxsXG4gICAgICAgICAgICAgICAgICBjbGFzc05hbWU9J3ctWzYlXSBib3JkZXInXG4gICAgICAgICAgICAgICAgICBjc3M9e1toVXAgJiYgdHdgdGV4dC1kYXJrLXdpbmAsIGhEb3duICYmIHR3YHRleHQtZGFyay1sb3NzYF19XG4gICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAge2NvbnZlcnRPZGRzKGNoYW5nZS5oLCAnZXUxeDInLCBvZGRzVHlwZSwgMSl9XG4gICAgICAgICAgICAgICAgPC9Ud0NlbGw+XG4gICAgICAgICAgICAgICAgPFR3Q2VsbFxuICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPSd3LVs2JV0gJ1xuICAgICAgICAgICAgICAgICAgY3NzPXtbZFVwICYmIHR3YHRleHQtZGFyay13aW5gLCBkRG93biAmJiB0d2B0ZXh0LWRhcmstbG9zc2BdfVxuICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgIHtjb252ZXJ0T2RkcyhjaGFuZ2UuZCwgJ2V1MXgyJywgb2Rkc1R5cGUsIDIpfVxuICAgICAgICAgICAgICAgIDwvVHdDZWxsPlxuICAgICAgICAgICAgICAgIDxUd0NlbGxcbiAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT0ndy1bNiVdIGJvcmRlcidcbiAgICAgICAgICAgICAgICAgIGNzcz17W2FVcCAmJiB0d2B0ZXh0LWRhcmstd2luYCwgYURvd24gJiYgdHdgdGV4dC1kYXJrLWxvc3NgXX1cbiAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICB7Y29udmVydE9kZHMoY2hhbmdlLmEsICdldTF4MicsIG9kZHNUeXBlLCAzKX1cbiAgICAgICAgICAgICAgICA8L1R3Q2VsbD5cbiAgICAgICAgICAgICAgICA8VHdDZWxsIGNsYXNzTmFtZT0ndy1bNiVdIGJvcmRlcic+XG4gICAgICAgICAgICAgICAgICB7cm91bmROdW0oY2hhbmdlLmhXcmF0ZSl9XG4gICAgICAgICAgICAgICAgPC9Ud0NlbGw+XG4gICAgICAgICAgICAgICAgPFR3Q2VsbCBjbGFzc05hbWU9J3ctWzYlXSBib3JkZXInPlxuICAgICAgICAgICAgICAgICAge3JvdW5kTnVtKGNoYW5nZS5kV3JhdGUpfVxuICAgICAgICAgICAgICAgIDwvVHdDZWxsPlxuICAgICAgICAgICAgICAgIDxUd0NlbGwgY2xhc3NOYW1lPSd3LVs2JV0gYm9yZGVyJz5cbiAgICAgICAgICAgICAgICAgIHtyb3VuZE51bShjaGFuZ2UuYVdyYXRlKX1cbiAgICAgICAgICAgICAgICA8L1R3Q2VsbD5cbiAgICAgICAgICAgICAgICA8VHdDZWxsIGNsYXNzTmFtZT0ndy1bOCVdIGJvcmRlcic+XG4gICAgICAgICAgICAgICAgICB7cm91bmROdW0oY2hhbmdlLmhSZXR1cm5SYXRlKX1cbiAgICAgICAgICAgICAgICA8L1R3Q2VsbD5cbiAgICAgICAgICAgICAgICA8VHdDZWxsXG4gICAgICAgICAgICAgICAgICBjbGFzc05hbWU9J3ctWzYlXSBib3JkZXInXG4gICAgICAgICAgICAgICAgICBjc3M9e1tjaGFuZ2VbJ2hLZWxseSddID49IDEgJiYgdHdgdGV4dC1kYXJrLWxvc3NgXX1cbiAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICB7Y2hhbmdlWydoS2VsbHknXX1cbiAgICAgICAgICAgICAgICA8L1R3Q2VsbD5cbiAgICAgICAgICAgICAgICA8VHdDZWxsXG4gICAgICAgICAgICAgICAgICBjbGFzc05hbWU9J3ctWzYlXSBib3JkZXInXG4gICAgICAgICAgICAgICAgICBjc3M9e1tjaGFuZ2VbJ2RLZWxseSddID49IDEgJiYgdHdgdGV4dC1kYXJrLWxvc3NgXX1cbiAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICB7Y2hhbmdlWydkS2VsbHknXX1cbiAgICAgICAgICAgICAgICA8L1R3Q2VsbD5cbiAgICAgICAgICAgICAgICA8VHdDZWxsXG4gICAgICAgICAgICAgICAgICBjbGFzc05hbWU9J3ctWzYlXSBib3JkZXInXG4gICAgICAgICAgICAgICAgICBjc3M9e1tjaGFuZ2VbJ2FLZWxseSddID49IDEgJiYgdHdgdGV4dC1kYXJrLWxvc3NgXX1cbiAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICB7Y2hhbmdlWydhS2VsbHknXX1cbiAgICAgICAgICAgICAgICA8L1R3Q2VsbD5cbiAgICAgICAgICAgICAgICA8VHdDZWxsIGNsYXNzTmFtZT0ndy1bMTAlXSBib3JkZXInPlxuICAgICAgICAgICAgICAgICAge2Zvcm1hdChuZXcgRGF0ZShjaGFuZ2UuY2hhbmdlVGltZSAqIDEwMDApLCAnZGQvTU0gSEg6bW0nKX1cbiAgICAgICAgICAgICAgICA8L1R3Q2VsbD5cbiAgICAgICAgICAgICAgPC90cj5cbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfSl9XG4gICAgICAgIDwvdGJvZHk+XG4gICAgICA8L3RhYmxlPlxuICAgIDwvPlxuICApO1xufTtcblxuY29uc3QgT2Rkc0V1MXgyQ2hhbmdlSGVhZGVyID0gKCkgPT4ge1xuICByZXR1cm4gKFxuICAgIDx0aGVhZD5cbiAgICAgIDxUd0hlYWRlclJvdyBjbGFzc05hbWU9J2gtMTAgYm9yZGVyIGJnLWxpZ2h0LW1hdGNoIGRhcms6YmctZGFyay1tYXRjaCc+XG4gICAgICAgIDxUd0NlbGwgY2xhc3NOYW1lPSd3LVs2JV0gYm9yZGVyJz5DaOG7pzwvVHdDZWxsPlxuICAgICAgICA8VHdDZWxsIGNsYXNzTmFtZT0ndy1bNiVdICc+SG/DoDwvVHdDZWxsPlxuICAgICAgICA8VHdDZWxsIGNsYXNzTmFtZT0ndy1bNiVdIGJvcmRlcic+S2jDoWNoPC9Ud0NlbGw+XG4gICAgICAgIDxUd0NlbGwgY2xhc3NOYW1lPSd3LVs2JV0gYm9yZGVyJz5DaOG7pyAlPC9Ud0NlbGw+XG4gICAgICAgIDxUd0NlbGwgY2xhc3NOYW1lPSd3LVs2JV0gYm9yZGVyJz5Ib8OgICU8L1R3Q2VsbD5cbiAgICAgICAgPFR3Q2VsbCBjbGFzc05hbWU9J3ctWzYlXSBib3JkZXInPktow6FjaCAlPC9Ud0NlbGw+XG4gICAgICAgIDxUd0NlbGwgY2xhc3NOYW1lPSd3LVs4JV0gYm9yZGVyJz5Ib8OgbiB24buRbiAlPC9Ud0NlbGw+XG4gICAgICAgIDxUd0NlbGwgY2xhc3NOYW1lPSd3LVsxOCVdIGJvcmRlcicgY29sU3Bhbj17M30+XG4gICAgICAgICAgVGnDqnUgY2h14bqpbiBLZWxseVxuICAgICAgICA8L1R3Q2VsbD5cbiAgICAgICAgPFR3Q2VsbCBjbGFzc05hbWU9J3ctWzEwJV0gYm9yZGVyJz5D4bqtcCBuaOG6rXQ8L1R3Q2VsbD5cbiAgICAgIDwvVHdIZWFkZXJSb3c+XG4gICAgPC90aGVhZD5cbiAgKTtcbn07XG5cbmNvbnN0IFNjb3JlT2Rkc0NoYW5nZXNUYWJsZSA9ICh7XG4gIGJvb2tNYWtlcixcbiAgbWFya2V0LFxuICBtYXRjaElkLFxuICBoYWxmLFxufToge1xuICBib29rTWFrZXI6IGFueTtcbiAgbWFya2V0OiBzdHJpbmc7XG4gIG1hdGNoSWQ6IHN0cmluZztcbiAgaGFsZjogbnVtYmVyO1xufSkgPT4ge1xuICAvLyBjb25zdCB7IG9kZHNUeXBlIH0gPSB1c2VPZGRzU3RvcmUoKTtcbiAgY29uc3QgeyBkYXRhLCBpc0ZldGNoaW5nIH0gPSB1c2VNYXRjaE9kZHNDaGFuZ2VEYXRhKFxuICAgIG1hdGNoSWQsXG4gICAgYm9va01ha2VyPy5pZCxcbiAgICBtYXJrZXQsXG4gICAgaGFsZlxuICApO1xuXG4gIGlmIChpc0ZldGNoaW5nKSB7XG4gICAgcmV0dXJuIDxkaXYgY2xhc3NOYW1lPSdoLVs1OXZoXSc+TG9hZGluZy4uLjwvZGl2PjtcbiAgfVxuXG4gIGNvbnN0IG9kZHNMaXN0ID0gZGF0YT8ub2Rkc0xpc3QgfHwgW107XG4gIGNvbnN0IHNob3duTGlzdCA9IG9kZHNMaXN0XG4gICAgLm1hcCgoY2hhbmdlOiBhbnksIGlkeDogbnVtYmVyKSA9PiB7XG4gICAgICBjb25zdCBwcmV2Q2hhbmdlID0gb2Rkc0xpc3RbaWR4IC0gMV0gfHwge307XG4gICAgICBjb25zdCBwcmV2ID0gcHJldkNoYW5nZT8ub2RkcyB8fCB7fTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIC4uLmNoYW5nZSxcbiAgICAgICAgcHJldjogcHJldixcbiAgICAgIH07XG4gICAgfSlcbiAgICAucmV2ZXJzZSgpO1xuXG4gIHJldHVybiAoXG4gICAgPGRpdiBjbGFzc05hbWU9Jyc+XG4gICAgICB7LyogPHRhYmxlIGNsYXNzTmFtZT0ndy1mdWxsIHRleHQtY2VudGVyIHRleHQtc20nPlxuICAgICAgICA8dGhlYWQgY2xhc3NOYW1lPSdib3JkZXIgYm9yZGVyLWRhcmstdGV4dC8yMCBiZy1saWdodC1tYXRjaCBkYXJrOmJnLWRhcmstbWF0Y2gnPlxuICAgICAgICAgIDx0ciBjbGFzc05hbWU9J2RpdmlkZS1saXN0LXggaC0xMCB3LWZ1bGwnPlxuICAgICAgICAgICAgPHRoIGNsYXNzTmFtZT0ndy1bMTUlXSc+VGltZTwvdGg+XG4gICAgICAgICAgICA8dGggY2xhc3NOYW1lPSd3LVs3MCVdJz48L3RoPlxuICAgICAgICAgICAgPHRoIGNsYXNzTmFtZT0ndy1bMTUlXSc+Q+G6rXAgbmjhuq10PC90aD5cbiAgICAgICAgICA8L3RyPlxuICAgICAgICA8L3RoZWFkPlxuICAgICAgPC90YWJsZT4gKi99XG4gICAgICA8ZGl2IGNsYXNzTmFtZT0nbWF4LWgtWzU1dmhdIG92ZXJmbG93LXktYXV0byB0ZXh0LXNtIHNjcm9sbGJhcic+XG4gICAgICAgIDx0YWJsZSBjbGFzc05hbWU9J21pbi13LWZ1bGwgIGJvcmRlci1jb2xsYXBzZSB0ZXh0LWNlbnRlcic+XG4gICAgICAgICAgPHRib2R5IGNsYXNzTmFtZT0nZGl2aWRlLWxpc3QgbWF4LWgtWzQ1dmhdIHctZnVsbCc+XG4gICAgICAgICAgICB7c2hvd25MaXN0Lm1hcCgoY2hhbmdlOiBhbnksIGlkeDogbnVtYmVyKSA9PiB7XG4gICAgICAgICAgICAgIGNvbnN0IG9kZHMgPSBjaGFuZ2Uub2RkcyB8fCB7fTtcbiAgICAgICAgICAgICAgY29uc3QgcHJldiA9IGNoYW5nZS5wcmV2IHx8IHt9O1xuXG4gICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgPD5cbiAgICAgICAgICAgICAgICAgIDxUd1Jvd1NjXG4gICAgICAgICAgICAgICAgICAgIGtleT17YCR7aWR4fS1hYH1cbiAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPSdkaXZpZGUtbGlzdC14IGgtMTEgdy1mdWxsJ1xuICAgICAgICAgICAgICAgICAgICBjc3M9e1tcbiAgICAgICAgICAgICAgICAgICAgICBpZHggJSAyID09PSAxICYmIHR3YGJnLWxpZ2h0LW1hdGNoIGRhcms6YmctZGFyay1tYXRjaGAsXG4gICAgICAgICAgICAgICAgICAgIF19XG4gICAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgIDxUd0NlbGxTYyBjbGFzc05hbWU9J3ctWzglXScgcm93U3Bhbj17M30+XG4gICAgICAgICAgICAgICAgICAgICAgTGl2ZVxuICAgICAgICAgICAgICAgICAgICA8L1R3Q2VsbFNjPlxuICAgICAgICAgICAgICAgICAgICA8VHdDZWxsU2MgY2xhc3NOYW1lPSd3LVsxMCVdIHRleHQtbG9nby1ibHVlJz5Ib21lPC9Ud0NlbGxTYz5cblxuICAgICAgICAgICAgICAgICAgICB7Y2hhbmdlLmNsb3NlID8gKFxuICAgICAgICAgICAgICAgICAgICAgIDw+XG4gICAgICAgICAgICAgICAgICAgICAgICA8VHdDZWxsU2NcbiAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPSd3LVs3JV0gdGV4dC1kYXJrLWxvc3MnXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGNvbFNwYW49ezEwfVxuICAgICAgICAgICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICAgICAgICDEkMOzbmdcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvVHdDZWxsU2M+XG4gICAgICAgICAgICAgICAgICAgICAgPC8+XG4gICAgICAgICAgICAgICAgICAgICkgOiAoXG4gICAgICAgICAgICAgICAgICAgICAgPD5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxUd09kZHNDZWxsU2MgY2xhc3NOYW1lPSd3LVs3JV0nPlxuICAgICAgICAgICAgICAgICAgICAgICAgICA8T2Rkc0NlbGxTY1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjb3JlPScxOjAnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb2Rkcz17b2Rkcy5oMX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmV2T2Rkcz17cHJldi5oMX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaWRlPXsxfVxuICAgICAgICAgICAgICAgICAgICAgICAgICA+PC9PZGRzQ2VsbFNjPlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9Ud09kZHNDZWxsU2M+XG4gICAgICAgICAgICAgICAgICAgICAgICA8VHdPZGRzQ2VsbFNjIGNsYXNzTmFtZT0ndy1bNyVdJz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgPE9kZHNDZWxsU2NcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY29yZT0nMjowJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9kZHM9e29kZHMuaDJ9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2lkZT17MX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmV2T2Rkcz17cHJldi5oMn1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgPjwvT2Rkc0NlbGxTYz5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvVHdPZGRzQ2VsbFNjPlxuICAgICAgICAgICAgICAgICAgICAgICAgPFR3T2Rkc0NlbGxTYyBjbGFzc05hbWU9J3ctWzclXSc+XG4gICAgICAgICAgICAgICAgICAgICAgICAgIDxPZGRzQ2VsbFNjXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2NvcmU9JzI6MSdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvZGRzPXtvZGRzLmgzfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNpZGU9ezF9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJldk9kZHM9e3ByZXYuaDN9XG4gICAgICAgICAgICAgICAgICAgICAgICAgID48L09kZHNDZWxsU2M+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L1R3T2Rkc0NlbGxTYz5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxUd09kZHNDZWxsU2MgY2xhc3NOYW1lPSd3LVs3JV0nPlxuICAgICAgICAgICAgICAgICAgICAgICAgICA8T2Rkc0NlbGxTY1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjb3JlPSczOjAnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb2Rkcz17b2Rkcy5oNH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaWRlPXsxfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByZXZPZGRzPXtwcmV2Lmg0fVxuICAgICAgICAgICAgICAgICAgICAgICAgICA+PC9PZGRzQ2VsbFNjPlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9Ud09kZHNDZWxsU2M+XG4gICAgICAgICAgICAgICAgICAgICAgICA8VHdPZGRzQ2VsbFNjIGNsYXNzTmFtZT0ndy1bNyVdJz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgPE9kZHNDZWxsU2NcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY29yZT0nMzoxJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9kZHM9e29kZHMuaDV9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2lkZT17MX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmV2T2Rkcz17cHJldi5oNX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgPjwvT2Rkc0NlbGxTYz5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvVHdPZGRzQ2VsbFNjPlxuICAgICAgICAgICAgICAgICAgICAgICAgPFR3T2Rkc0NlbGxTYyBjbGFzc05hbWU9J3ctWzclXSc+XG4gICAgICAgICAgICAgICAgICAgICAgICAgIDxPZGRzQ2VsbFNjXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2NvcmU9JzM6MidcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvZGRzPXtvZGRzLmg2fVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNpZGU9ezF9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJldk9kZHM9e3ByZXYuaDZ9XG4gICAgICAgICAgICAgICAgICAgICAgICAgID48L09kZHNDZWxsU2M+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L1R3T2Rkc0NlbGxTYz5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxUd09kZHNDZWxsU2MgY2xhc3NOYW1lPSd3LVs3JV0nPlxuICAgICAgICAgICAgICAgICAgICAgICAgICA8T2Rkc0NlbGxTY1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjb3JlPSc0OjAnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb2Rkcz17b2Rkcy5oN31cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaWRlPXsxfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByZXZPZGRzPXtwcmV2Lmg3fVxuICAgICAgICAgICAgICAgICAgICAgICAgICA+PC9PZGRzQ2VsbFNjPlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9Ud09kZHNDZWxsU2M+XG4gICAgICAgICAgICAgICAgICAgICAgICA8VHdPZGRzQ2VsbFNjIGNsYXNzTmFtZT0ndy1bNyVdJz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgPE9kZHNDZWxsU2NcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY29yZT0nNDoxJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9kZHM9e29kZHMuaDh9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2lkZT17MX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmV2T2Rkcz17cHJldi5oOH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgPjwvT2Rkc0NlbGxTYz5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvVHdPZGRzQ2VsbFNjPlxuICAgICAgICAgICAgICAgICAgICAgICAgPFR3T2Rkc0NlbGxTYyBjbGFzc05hbWU9J3ctWzclXSc+XG4gICAgICAgICAgICAgICAgICAgICAgICAgIDxPZGRzQ2VsbFNjXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2NvcmU9JzQ6MidcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvZGRzPXtvZGRzLmg5fVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNpZGU9ezF9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJldk9kZHM9e3ByZXYuaDl9XG4gICAgICAgICAgICAgICAgICAgICAgICAgID48L09kZHNDZWxsU2M+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L1R3T2Rkc0NlbGxTYz5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxUd09kZHNDZWxsU2MgY2xhc3NOYW1lPSd3LVs3JV0nPlxuICAgICAgICAgICAgICAgICAgICAgICAgICA8T2Rkc0NlbGxTY1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjb3JlPSc0OjMnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb2Rkcz17b2Rkcy5oMTB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2lkZT17MX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmV2T2Rkcz17cHJldi5oMTB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgID48L09kZHNDZWxsU2M+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L1R3T2Rkc0NlbGxTYz5cbiAgICAgICAgICAgICAgICAgICAgICA8Lz5cbiAgICAgICAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgICAgICAgICAgPFR3Q2VsbFNjIGNsYXNzTmFtZT0ndy0xLzQnIHJvd1NwYW49ezN9PlxuICAgICAgICAgICAgICAgICAgICAgIHtmb3JtYXQobmV3IERhdGUoY2hhbmdlLmN0ICogMTAwMCksICdkZC9NTSBISDptbScpfVxuICAgICAgICAgICAgICAgICAgICA8L1R3Q2VsbFNjPlxuICAgICAgICAgICAgICAgICAgPC9Ud1Jvd1NjPlxuXG4gICAgICAgICAgICAgICAgICA8VHdSb3dTY1xuICAgICAgICAgICAgICAgICAgICBrZXk9e2Ake2lkeH0tYmB9XG4gICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT0nZGl2aWRlLWxpc3QteCBoLTEwIHctZnVsbCdcbiAgICAgICAgICAgICAgICAgICAgY3NzPXtbXG4gICAgICAgICAgICAgICAgICAgICAgaWR4ICUgMiA9PT0gMSAmJiB0d2BiZy1saWdodC1tYXRjaCBkYXJrOmJnLWRhcmstbWF0Y2hgLFxuICAgICAgICAgICAgICAgICAgICBdfVxuICAgICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICB7LyogPHRkIGNsYXNzTmFtZT0ndy1bNSVdJz5MaXZlPC90ZD4gKi99XG4gICAgICAgICAgICAgICAgICAgIDxUd0NlbGxTYyBjbGFzc05hbWU9J3ctWzEwJV0gdGV4dC1kYXJrLXRleHQnPkRyYXc8L1R3Q2VsbFNjPlxuICAgICAgICAgICAgICAgICAgICB7Y2hhbmdlLmNsb3NlID8gKFxuICAgICAgICAgICAgICAgICAgICAgIDxUd0NlbGxTYyBjbGFzc05hbWU9J3ctWzc1JV0gdGV4dC1kYXJrLWxvc3MnPlxuICAgICAgICAgICAgICAgICAgICAgICAgxJDDs25nXG4gICAgICAgICAgICAgICAgICAgICAgPC9Ud0NlbGxTYz5cbiAgICAgICAgICAgICAgICAgICAgKSA6IChcbiAgICAgICAgICAgICAgICAgICAgICA8PlxuICAgICAgICAgICAgICAgICAgICAgICAgPFR3T2Rkc0NlbGxTYyBjbGFzc05hbWU9J3ctWzclXSc+XG4gICAgICAgICAgICAgICAgICAgICAgICAgIDxPZGRzQ2VsbFNjXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2NvcmU9JzA6MCdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvZGRzPXtvZGRzLmQxfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByZXZPZGRzPXtwcmV2LmQxfVxuICAgICAgICAgICAgICAgICAgICAgICAgICA+PC9PZGRzQ2VsbFNjPlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9Ud09kZHNDZWxsU2M+XG4gICAgICAgICAgICAgICAgICAgICAgICA8VHdPZGRzQ2VsbFNjIGNsYXNzTmFtZT0ndy1bNyVdJz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgPE9kZHNDZWxsU2NcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY29yZT0nMToxJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9kZHM9e29kZHMuZDJ9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJldk9kZHM9e3ByZXYuZDJ9XG4gICAgICAgICAgICAgICAgICAgICAgICAgID48L09kZHNDZWxsU2M+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L1R3T2Rkc0NlbGxTYz5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxUd09kZHNDZWxsU2MgY2xhc3NOYW1lPSd3LVs3JV0nPlxuICAgICAgICAgICAgICAgICAgICAgICAgICA8T2Rkc0NlbGxTY1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjb3JlPScyOjInXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb2Rkcz17b2Rkcy5kM31cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmV2T2Rkcz17cHJldi5kM31cbiAgICAgICAgICAgICAgICAgICAgICAgICAgPjwvT2Rkc0NlbGxTYz5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvVHdPZGRzQ2VsbFNjPlxuICAgICAgICAgICAgICAgICAgICAgICAgPFR3T2Rkc0NlbGxTYyBjbGFzc05hbWU9J3ctWzclXSc+XG4gICAgICAgICAgICAgICAgICAgICAgICAgIDxPZGRzQ2VsbFNjXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2NvcmU9JzM6MydcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvZGRzPXtvZGRzLmQ0fVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByZXZPZGRzPXtwcmV2LmQ0fVxuICAgICAgICAgICAgICAgICAgICAgICAgICA+PC9PZGRzQ2VsbFNjPlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9Ud09kZHNDZWxsU2M+XG4gICAgICAgICAgICAgICAgICAgICAgICA8VHdPZGRzQ2VsbFNjIGNsYXNzTmFtZT0ndy1bNyVdJz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgPE9kZHNDZWxsU2NcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY29yZT0nNDo0J1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9kZHM9e29kZHMuZDV9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJldk9kZHM9e3ByZXYuZDV9XG4gICAgICAgICAgICAgICAgICAgICAgICAgID48L09kZHNDZWxsU2M+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L1R3T2Rkc0NlbGxTYz5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxUd09kZHNDZWxsU2MgY2xhc3NOYW1lPSd3LVs3JV0nPlxuICAgICAgICAgICAgICAgICAgICAgICAgICA8T2Rkc0NlbGxTY1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjb3JlPSdPdGhlcidcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvZGRzPXtvZGRzLm99XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJldk9kZHM9e3ByZXYub31cbiAgICAgICAgICAgICAgICAgICAgICAgICAgPjwvT2Rkc0NlbGxTYz5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvVHdPZGRzQ2VsbFNjPlxuICAgICAgICAgICAgICAgICAgICAgICAgPFR3T2Rkc0NlbGxTYyBjbGFzc05hbWU9J3ctWzclXSc+PC9Ud09kZHNDZWxsU2M+XG4gICAgICAgICAgICAgICAgICAgICAgICA8VHdPZGRzQ2VsbFNjIGNsYXNzTmFtZT0ndy1bNyVdJz48L1R3T2Rkc0NlbGxTYz5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxUd09kZHNDZWxsU2MgY2xhc3NOYW1lPSd3LVs3JV0nPjwvVHdPZGRzQ2VsbFNjPlxuICAgICAgICAgICAgICAgICAgICAgICAgPFR3T2Rkc0NlbGxTYyBjbGFzc05hbWU9J3ctWzclXSc+PC9Ud09kZHNDZWxsU2M+XG4gICAgICAgICAgICAgICAgICAgICAgPC8+XG4gICAgICAgICAgICAgICAgICAgICl9XG4gICAgICAgICAgICAgICAgICA8L1R3Um93U2M+XG5cbiAgICAgICAgICAgICAgICAgIDxUd1Jvd1NjXG4gICAgICAgICAgICAgICAgICAgIGtleT17YCR7aWR4fS1jYH1cbiAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPSdkaXZpZGUtbGlzdC14IGgtMTAgdy1mdWxsJ1xuICAgICAgICAgICAgICAgICAgICBjc3M9e1tcbiAgICAgICAgICAgICAgICAgICAgICBpZHggJSAyID09PSAxICYmIHR3YGJnLWxpZ2h0LW1hdGNoIGRhcms6YmctZGFyay1tYXRjaGAsXG4gICAgICAgICAgICAgICAgICAgIF19XG4gICAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgIHsvKiA8dGQgY2xhc3NOYW1lPSd3LVs1JV0nPkxpdmU8L3RkPiAqL31cbiAgICAgICAgICAgICAgICAgICAgPFR3Q2VsbFNjIGNsYXNzTmFtZT0ndy1bMTAlXSB0ZXh0LWxvZ28teWVsbG93Jz5cbiAgICAgICAgICAgICAgICAgICAgICBBd2F5XG4gICAgICAgICAgICAgICAgICAgIDwvVHdDZWxsU2M+XG4gICAgICAgICAgICAgICAgICAgIHtjaGFuZ2UuY2xvc2UgPyAoXG4gICAgICAgICAgICAgICAgICAgICAgPFR3Q2VsbFNjIGNsYXNzTmFtZT0ndy1bNzUlXSB0ZXh0LWRhcmstbG9zcyc+XG4gICAgICAgICAgICAgICAgICAgICAgICDEkMOzbmdcbiAgICAgICAgICAgICAgICAgICAgICA8L1R3Q2VsbFNjPlxuICAgICAgICAgICAgICAgICAgICApIDogKFxuICAgICAgICAgICAgICAgICAgICAgIDw+XG4gICAgICAgICAgICAgICAgICAgICAgICA8VHdPZGRzQ2VsbFNjIGNsYXNzTmFtZT0ndy1bNyVdJz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgPE9kZHNDZWxsU2NcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY29yZT0nMDoxJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9kZHM9e29kZHMuYTF9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2lkZT17Mn1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmV2T2Rkcz17cHJldi5hMX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgPjwvT2Rkc0NlbGxTYz5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvVHdPZGRzQ2VsbFNjPlxuICAgICAgICAgICAgICAgICAgICAgICAgPFR3T2Rkc0NlbGxTYyBjbGFzc05hbWU9J3ctWzclXSc+XG4gICAgICAgICAgICAgICAgICAgICAgICAgIDxPZGRzQ2VsbFNjXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2NvcmU9JzA6MidcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvZGRzPXtvZGRzLmEyfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNpZGU9ezJ9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJldk9kZHM9e3ByZXYuYTJ9XG4gICAgICAgICAgICAgICAgICAgICAgICAgID48L09kZHNDZWxsU2M+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L1R3T2Rkc0NlbGxTYz5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxUd09kZHNDZWxsU2MgY2xhc3NOYW1lPSd3LVs3JV0nPlxuICAgICAgICAgICAgICAgICAgICAgICAgICA8T2Rkc0NlbGxTY1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjb3JlPScxOjInXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb2Rkcz17b2Rkcy5hM31cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaWRlPXsyfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByZXZPZGRzPXtwcmV2LmEzfVxuICAgICAgICAgICAgICAgICAgICAgICAgICA+PC9PZGRzQ2VsbFNjPlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9Ud09kZHNDZWxsU2M+XG4gICAgICAgICAgICAgICAgICAgICAgICA8VHdPZGRzQ2VsbFNjIGNsYXNzTmFtZT0ndy1bNyVdJz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgPE9kZHNDZWxsU2NcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY29yZT0nMDozJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9kZHM9e29kZHMuYTR9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2lkZT17Mn1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmV2T2Rkcz17cHJldi5hNH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgPjwvT2Rkc0NlbGxTYz5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvVHdPZGRzQ2VsbFNjPlxuICAgICAgICAgICAgICAgICAgICAgICAgPFR3T2Rkc0NlbGxTYyBjbGFzc05hbWU9J3ctWzclXSc+XG4gICAgICAgICAgICAgICAgICAgICAgICAgIDxPZGRzQ2VsbFNjXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2NvcmU9JzE6MydcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvZGRzPXtvZGRzLmE1fVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNpZGU9ezJ9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJldk9kZHM9e3ByZXYuYTV9XG4gICAgICAgICAgICAgICAgICAgICAgICAgID48L09kZHNDZWxsU2M+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L1R3T2Rkc0NlbGxTYz5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxUd09kZHNDZWxsU2MgY2xhc3NOYW1lPSd3LVs3JV0nPlxuICAgICAgICAgICAgICAgICAgICAgICAgICA8T2Rkc0NlbGxTY1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjb3JlPScyOjMnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb2Rkcz17b2Rkcy5hNn1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaWRlPXsyfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByZXZPZGRzPXtwcmV2LmE2fVxuICAgICAgICAgICAgICAgICAgICAgICAgICA+PC9PZGRzQ2VsbFNjPlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9Ud09kZHNDZWxsU2M+XG4gICAgICAgICAgICAgICAgICAgICAgICA8VHdPZGRzQ2VsbFNjIGNsYXNzTmFtZT0ndy1bNyVdJz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgPE9kZHNDZWxsU2NcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY29yZT0nMDo0J1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9kZHM9e29kZHMuYTd9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2lkZT17Mn1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmV2T2Rkcz17cHJldi5hN31cbiAgICAgICAgICAgICAgICAgICAgICAgICAgPjwvT2Rkc0NlbGxTYz5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvVHdPZGRzQ2VsbFNjPlxuICAgICAgICAgICAgICAgICAgICAgICAgPFR3T2Rkc0NlbGxTYyBjbGFzc05hbWU9J3ctWzclXSc+XG4gICAgICAgICAgICAgICAgICAgICAgICAgIDxPZGRzQ2VsbFNjXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2NvcmU9JzE6NCdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvZGRzPXtvZGRzLmE4fVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNpZGU9ezJ9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJldk9kZHM9e3ByZXYuYTh9XG4gICAgICAgICAgICAgICAgICAgICAgICAgID48L09kZHNDZWxsU2M+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L1R3T2Rkc0NlbGxTYz5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxUd09kZHNDZWxsU2MgY2xhc3NOYW1lPSd3LVs3JV0nPlxuICAgICAgICAgICAgICAgICAgICAgICAgICA8T2Rkc0NlbGxTY1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjb3JlPScyOjQnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb2Rkcz17b2Rkcy5hOX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaWRlPXsyfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByZXZPZGRzPXtwcmV2LmE5fVxuICAgICAgICAgICAgICAgICAgICAgICAgICA+PC9PZGRzQ2VsbFNjPlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9Ud09kZHNDZWxsU2M+XG4gICAgICAgICAgICAgICAgICAgICAgICA8VHdPZGRzQ2VsbFNjIGNsYXNzTmFtZT0ndy1bNyVdJz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgPE9kZHNDZWxsU2NcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY29yZT0nMzo0J1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9kZHM9e29kZHMuYTEwfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNpZGU9ezJ9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJldk9kZHM9e3ByZXYuYTEwfVxuICAgICAgICAgICAgICAgICAgICAgICAgICA+PC9PZGRzQ2VsbFNjPlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9Ud09kZHNDZWxsU2M+XG4gICAgICAgICAgICAgICAgICAgICAgPC8+XG4gICAgICAgICAgICAgICAgICAgICl9XG4gICAgICAgICAgICAgICAgICA8L1R3Um93U2M+XG4gICAgICAgICAgICAgICAgPC8+XG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9KX1cbiAgICAgICAgICA8L3Rib2R5PlxuICAgICAgICA8L3RhYmxlPlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gICk7XG59O1xuXG5leHBvcnQgY29uc3QgQ29ybmVyVHhPZGRzQ2hhbmdlc1RhYmxlID0gKHtcbiAgYm9va01ha2VyLFxuICBtYXJrZXQsXG4gIG1hdGNoSWQsXG4gIGhhbGYsXG59OiB7XG4gIGJvb2tNYWtlcjogYW55O1xuICBtYXJrZXQ6IHN0cmluZztcbiAgbWF0Y2hJZDogc3RyaW5nO1xuICBoYWxmOiBudW1iZXI7XG59KSA9PiB7XG4gIGNvbnN0IHsgb2Rkc1R5cGUgfSA9IHVzZU9kZHNTdG9yZSgpO1xuICBjb25zdCB7IGRhdGEsIGlzRmV0Y2hpbmcgfSA9IHVzZU1hdGNoT2Rkc0NoYW5nZURhdGEoXG4gICAgbWF0Y2hJZCxcbiAgICBib29rTWFrZXI/LmlkLFxuICAgIG1hcmtldCxcbiAgICBoYWxmXG4gICk7XG5cbiAgaWYgKGlzRmV0Y2hpbmcpIHtcbiAgICByZXR1cm4gPGRpdiBjbGFzc05hbWU9J2gtWzU1dmhdJz48L2Rpdj47IC8vIFRPRE8gc2tlbGV0b25zXG4gIH1cbiAgY29uc3Qgb2Rkc0xpc3QgPSBkYXRhPy5vZGRzTGlzdCB8fCBbXTtcblxuICByZXR1cm4gKFxuICAgIDxkaXYgY2xhc3NOYW1lPScnPlxuICAgICAgPGRpdiBjbGFzc05hbWU9J21heC1oLVs1NXZoXSBvdmVyZmxvdy15LWF1dG8gdGV4dC1zbSBzY3JvbGxiYXInPlxuICAgICAgICA8dGFibGUgY2xhc3NOYW1lPSdtaW4tdy1mdWxsICBib3JkZXItY29sbGFwc2UgdGV4dC1jZW50ZXInPlxuICAgICAgICAgIDx0Ym9keSBjbGFzc05hbWU9J2RpdmlkZS1saXN0IG1heC1oLVs0NXZoXSB3LWZ1bGwnPlxuICAgICAgICAgICAge2hhbGYgIT09IDAgJiYgKFxuICAgICAgICAgICAgICA8dHI+XG4gICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT0ndy0xMDAlJz5cbiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPSdweS0xIHRleHQtY3NtJz5IaeG7h24gY2jGsGEgY8OzIGThu68gbGnhu4d1PC9kaXY+XG4gICAgICAgICAgICAgICAgPC90ZD5cbiAgICAgICAgICAgICAgPC90cj5cbiAgICAgICAgICAgICl9XG4gICAgICAgICAgICB7aGFsZiA9PT0gMCAmJlxuICAgICAgICAgICAgICBvZGRzTGlzdFxuICAgICAgICAgICAgICAgIC5zbGljZSgpXG4gICAgICAgICAgICAgICAgLnJldmVyc2UoKVxuICAgICAgICAgICAgICAgIC5tYXAoKGNoYW5nZTogYW55LCBpZHg6IG51bWJlcikgPT4ge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAgICAgPENvcm5lclR4Um93XG4gICAgICAgICAgICAgICAgICAgICAga2V5PXtpZHh9XG4gICAgICAgICAgICAgICAgICAgICAgY2hhbmdlPXtjaGFuZ2V9XG4gICAgICAgICAgICAgICAgICAgICAgb2Rkc1R5cGU9e29kZHNUeXBlfVxuICAgICAgICAgICAgICAgICAgICAgIG1hcmtldD17bWFya2V0fVxuICAgICAgICAgICAgICAgICAgICAgIGlkeD17aWR4fVxuICAgICAgICAgICAgICAgICAgICA+PC9Db3JuZXJUeFJvdz5cbiAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgfSl9XG4gICAgICAgICAgPC90Ym9keT5cbiAgICAgICAgPC90YWJsZT5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICApO1xufTtcblxuY29uc3QgVHdDZWxsU2MgPSB0dy50ZGBgO1xuY29uc3QgVHdPZGRzQ2VsbFNjID0gdHcudGRgdGV4dC1zbWA7XG5jb25zdCBUd1Jvd1NjID0gdHcudHJgYDtcblxuY29uc3QgT2Rkc0NlbGxTYyA9ICh7XG4gIHNjb3JlLFxuICBvZGRzLFxuICBzaWRlLFxuICBwcmV2T2Rkcyxcbn06IHtcbiAgc2NvcmU6IHN0cmluZztcbiAgb2RkczogbnVtYmVyO1xuICBzaWRlPzogbnVtYmVyO1xuICBwcmV2T2RkczogbnVtYmVyO1xufSkgPT4ge1xuICByZXR1cm4gKFxuICAgIDxkaXYgY2xhc3NOYW1lPSdoLWZ1bGwgcHktMC41Jz5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPSd0ZXh0LXhzIGZvbnQtZXh0cmFsaWdodCB0ZXh0LWRhcmstdGV4dCc+e3Njb3JlfTwvZGl2PlxuICAgICAgPGRpdiBjbGFzc05hbWU9J2Rhcms6dGV4dC1kYXJrLWRlZmF1bHQnPlxuICAgICAgICA8c3BhblxuICAgICAgICAgIGNzcz17W1xuICAgICAgICAgICAgcHJldk9kZHMgJiYgcHJldk9kZHMgPiBvZGRzICYmIHR3YHRleHQtcmVkLTYwMGAsXG4gICAgICAgICAgICBwcmV2T2RkcyAmJiBwcmV2T2RkcyA8IG9kZHMgJiYgdHdgdGV4dC1kYXJrLXdpbmAsXG4gICAgICAgICAgXX1cbiAgICAgICAgPlxuICAgICAgICAgIHtvZGRzfVxuICAgICAgICA8L3NwYW4+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgKTtcbn07XG5cbmNvbnN0IENvcm5lclR4Um93ID0gKHtcbiAgY2hhbmdlLFxuICBvZGRzVHlwZSxcbiAgbWFya2V0LFxuICBpZHgsXG59OiB7XG4gIGNoYW5nZTogYW55O1xuICBvZGRzVHlwZTogc3RyaW5nO1xuICBtYXJrZXQ6IHN0cmluZztcbiAgaWR4OiBudW1iZXI7XG59KSA9PiB7XG4gIGNvbnN0IHsgY2xvc2UsIGN0LCBvZGRzLCB0eXBlIH0gPSBjaGFuZ2UgfHwge307XG4gIGNvbnN0IHsgZiwgcywgdCB9ID0gb2RkcyB8fCB7fTtcblxuICByZXR1cm4gKFxuICAgIDx0clxuICAgICAgY2xhc3NOYW1lPSdkaXZpZGUtbGlzdC14IGgtOSB3LWZ1bGwnXG4gICAgICBjc3M9e1tpZHggJSAyID09PSAxICYmIHR3YGJnLWxpZ2h0LW1hdGNoIGRhcms6YmctZGFyay1tYXRjaGBdfVxuICAgID5cbiAgICAgIHsvKiA8dGQgY2xhc3NOYW1lPSd3LVsxMCVdJz5MaXZlIC0ge3R5cGV9PC90ZD4gKi99XG4gICAgICA8dGQgY2xhc3NOYW1lPSd3LVsxMCVdJz4tPC90ZD5cbiAgICAgIHtjbG9zZSAmJiAoXG4gICAgICAgIDw+XG4gICAgICAgICAgPHRkIGNsYXNzTmFtZT0ndy1bMzAlXSB0ZXh0LWNlbnRlciB0ZXh0LWNzbScgY29sU3Bhbj17M30+XG4gICAgICAgICAgICBDbG9zZWRcbiAgICAgICAgICA8L3RkPlxuICAgICAgICA8Lz5cbiAgICAgICl9XG4gICAgICB7IWNsb3NlICYmIChcbiAgICAgICAgPD5cbiAgICAgICAgICA8dGQgY2xhc3NOYW1lPSd3LVsxMCVdJz57Y29udmVydE9kZHMoZiwgbWFya2V0LCBvZGRzVHlwZSwgMSl9PC90ZD5cbiAgICAgICAgICA8dGQgY2xhc3NOYW1lPSd3LVsxMCVdJz57c308L3RkPlxuICAgICAgICAgIDx0ZCBjbGFzc05hbWU9J3ctWzEwJV0nPntjb252ZXJ0T2Rkcyh0LCBtYXJrZXQsIG9kZHNUeXBlLCAzKX08L3RkPlxuICAgICAgICA8Lz5cbiAgICAgICl9XG4gICAgICA8dGQgY2xhc3NOYW1lPSd3LVsyMCVdJz5cbiAgICAgICAge2Zvcm1hdChuZXcgRGF0ZShjdCAqIDEwMDApLCAneXl5eS9NTS9kZCBISDptbScpfVxuICAgICAgPC90ZD5cbiAgICA8L3RyPlxuICApO1xufTtcbiJdfQ== */\"\n                                    ],\n                                    \"data-tw\": \"bg-light-match dark:bg-dark-match\",\n                                    children: [\n                                        (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(TwCellSc, {\n                                            className: \"w-[10%] text-dark-text\",\n                                            children: \"Draw\"\n                                        }),\n                                        change.close ? (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(TwCellSc, {\n                                            className: \"w-[75%] text-dark-loss\",\n                                            children: \"Đ\\xf3ng\"\n                                        }) : (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsxs)(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.Fragment, {\n                                            children: [\n                                                (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(TwOddsCellSc, {\n                                                    className: \"w-[7%]\",\n                                                    children: (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(OddsCellSc, {\n                                                        score: \"0:0\",\n                                                        odds: odds.d1,\n                                                        prevOdds: prev.d1\n                                                    })\n                                                }),\n                                                (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(TwOddsCellSc, {\n                                                    className: \"w-[7%]\",\n                                                    children: (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(OddsCellSc, {\n                                                        score: \"1:1\",\n                                                        odds: odds.d2,\n                                                        prevOdds: prev.d2\n                                                    })\n                                                }),\n                                                (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(TwOddsCellSc, {\n                                                    className: \"w-[7%]\",\n                                                    children: (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(OddsCellSc, {\n                                                        score: \"2:2\",\n                                                        odds: odds.d3,\n                                                        prevOdds: prev.d3\n                                                    })\n                                                }),\n                                                (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(TwOddsCellSc, {\n                                                    className: \"w-[7%]\",\n                                                    children: (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(OddsCellSc, {\n                                                        score: \"3:3\",\n                                                        odds: odds.d4,\n                                                        prevOdds: prev.d4\n                                                    })\n                                                }),\n                                                (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(TwOddsCellSc, {\n                                                    className: \"w-[7%]\",\n                                                    children: (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(OddsCellSc, {\n                                                        score: \"4:4\",\n                                                        odds: odds.d5,\n                                                        prevOdds: prev.d5\n                                                    })\n                                                }),\n                                                (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(TwOddsCellSc, {\n                                                    className: \"w-[7%]\",\n                                                    children: (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(OddsCellSc, {\n                                                        score: \"Other\",\n                                                        odds: odds.o,\n                                                        prevOdds: prev.o\n                                                    })\n                                                }),\n                                                (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(TwOddsCellSc, {\n                                                    className: \"w-[7%]\"\n                                                }),\n                                                (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(TwOddsCellSc, {\n                                                    className: \"w-[7%]\"\n                                                }),\n                                                (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(TwOddsCellSc, {\n                                                    className: \"w-[7%]\"\n                                                }),\n                                                (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(TwOddsCellSc, {\n                                                    className: \"w-[7%]\"\n                                                })\n                                            ]\n                                        })\n                                    ]\n                                }, `${idx}-b`),\n                                (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsxs)(TwRowSc, {\n                                    className: \"divide-list-x h-10 w-full\",\n                                    css: [\n                                        idx % 2 === 1 && {\n                                            \"--tw-bg-opacity\": \"1\",\n                                            \"backgroundColor\": \"rgb(242 246 249 / var(--tw-bg-opacity, 1))\",\n                                            \":is(.dark *)\": {\n                                                \"--tw-bg-opacity\": \"1\",\n                                                \"backgroundColor\": \"rgb(27 27 27 / var(--tw-bg-opacity, 1))\"\n                                            }\n                                        },\n                                         false ? 0 : \";label:ScoreOddsChangesTable;\",\n                                         false ? 0 : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"\n                                    ],\n                                    \"data-tw\": \"bg-light-match dark:bg-dark-match\",\n                                    children: [\n                                        (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(TwCellSc, {\n                                            className: \"w-[10%] text-logo-yellow\",\n                                            children: \"Away\"\n                                        }),\n                                        change.close ? (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(TwCellSc, {\n                                            className: \"w-[75%] text-dark-loss\",\n                                            children: \"Đ\\xf3ng\"\n                                        }) : (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsxs)(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.Fragment, {\n                                            children: [\n                                                (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(TwOddsCellSc, {\n                                                    className: \"w-[7%]\",\n                                                    children: (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(OddsCellSc, {\n                                                        score: \"0:1\",\n                                                        odds: odds.a1,\n                                                        side: 2,\n                                                        prevOdds: prev.a1\n                                                    })\n                                                }),\n                                                (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(TwOddsCellSc, {\n                                                    className: \"w-[7%]\",\n                                                    children: (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(OddsCellSc, {\n                                                        score: \"0:2\",\n                                                        odds: odds.a2,\n                                                        side: 2,\n                                                        prevOdds: prev.a2\n                                                    })\n                                                }),\n                                                (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(TwOddsCellSc, {\n                                                    className: \"w-[7%]\",\n                                                    children: (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(OddsCellSc, {\n                                                        score: \"1:2\",\n                                                        odds: odds.a3,\n                                                        side: 2,\n                                                        prevOdds: prev.a3\n                                                    })\n                                                }),\n                                                (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(TwOddsCellSc, {\n                                                    className: \"w-[7%]\",\n                                                    children: (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(OddsCellSc, {\n                                                        score: \"0:3\",\n                                                        odds: odds.a4,\n                                                        side: 2,\n                                                        prevOdds: prev.a4\n                                                    })\n                                                }),\n                                                (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(TwOddsCellSc, {\n                                                    className: \"w-[7%]\",\n                                                    children: (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(OddsCellSc, {\n                                                        score: \"1:3\",\n                                                        odds: odds.a5,\n                                                        side: 2,\n                                                        prevOdds: prev.a5\n                                                    })\n                                                }),\n                                                (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(TwOddsCellSc, {\n                                                    className: \"w-[7%]\",\n                                                    children: (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(OddsCellSc, {\n                                                        score: \"2:3\",\n                                                        odds: odds.a6,\n                                                        side: 2,\n                                                        prevOdds: prev.a6\n                                                    })\n                                                }),\n                                                (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(TwOddsCellSc, {\n                                                    className: \"w-[7%]\",\n                                                    children: (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(OddsCellSc, {\n                                                        score: \"0:4\",\n                                                        odds: odds.a7,\n                                                        side: 2,\n                                                        prevOdds: prev.a7\n                                                    })\n                                                }),\n                                                (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(TwOddsCellSc, {\n                                                    className: \"w-[7%]\",\n                                                    children: (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(OddsCellSc, {\n                                                        score: \"1:4\",\n                                                        odds: odds.a8,\n                                                        side: 2,\n                                                        prevOdds: prev.a8\n                                                    })\n                                                }),\n                                                (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(TwOddsCellSc, {\n                                                    className: \"w-[7%]\",\n                                                    children: (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(OddsCellSc, {\n                                                        score: \"2:4\",\n                                                        odds: odds.a9,\n                                                        side: 2,\n                                                        prevOdds: prev.a9\n                                                    })\n                                                }),\n                                                (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(TwOddsCellSc, {\n                                                    className: \"w-[7%]\",\n                                                    children: (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(OddsCellSc, {\n                                                        score: \"3:4\",\n                                                        odds: odds.a10,\n                                                        side: 2,\n                                                        prevOdds: prev.a10\n                                                    })\n                                                })\n                                            ]\n                                        })\n                                    ]\n                                }, `${idx}-c`)\n                            ]\n                        });\n                    })\n                })\n            })\n        })\n    });\n};\nconst CornerTxOddsChangesTable = ({ bookMaker, market, matchId, half })=>{\n    const { oddsType } = (0,_stores__WEBPACK_IMPORTED_MODULE_6__.useOddsStore)();\n    const { data, isFetching } = (0,_hooks_useFootball_useOddsData__WEBPACK_IMPORTED_MODULE_2__.useMatchOddsChangeData)(matchId, bookMaker?.id, market, half);\n    if (isFetching) {\n        return (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(\"div\", {\n            className: \"h-[55vh]\"\n        }); // TODO skeletons\n    }\n    const oddsList = data?.oddsList || [];\n    return (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(\"div\", {\n        className: \"\",\n        children: (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(\"div\", {\n            className: \"max-h-[55vh] overflow-y-auto text-sm scrollbar\",\n            children: (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(\"table\", {\n                className: \"min-w-full  border-collapse text-center\",\n                children: (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsxs)(\"tbody\", {\n                    className: \"divide-list max-h-[45vh] w-full\",\n                    children: [\n                        half !== 0 && (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(\"tr\", {\n                            children: (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(\"td\", {\n                                className: \"w-100%\",\n                                children: (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(\"div\", {\n                                    className: \"py-1 text-csm\",\n                                    children: \"Hiện chưa c\\xf3 dữ liệu\"\n                                })\n                            })\n                        }),\n                        half === 0 && oddsList.slice().reverse().map((change, idx)=>{\n                            return (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(CornerTxRow, {\n                                change: change,\n                                oddsType: oddsType,\n                                market: market,\n                                idx: idx\n                            }, idx);\n                        })\n                    ]\n                })\n            })\n        })\n    });\n};\nconst TwCellSc = /*#__PURE__*/ (0,_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"td\",  false ? 0 : {\n    target: \"e1y6e3kr2\",\n    label: \"TwCellSc\"\n})( false ? 0 : {\n    name: \"0\",\n    styles: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n    toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n});\nconst TwOddsCellSc = /*#__PURE__*/ (0,_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"td\",  false ? 0 : {\n    target: \"e1y6e3kr1\",\n    label: \"TwOddsCellSc\"\n})( false ? 0 : {\n    name: \"1504nod\",\n    styles: \"font-size:0.875rem;line-height:1.25rem/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n    toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n});\nconst TwRowSc = /*#__PURE__*/ (0,_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"tr\",  false ? 0 : {\n    target: \"e1y6e3kr0\",\n    label: \"TwRowSc\"\n})( false ? 0 : {\n    name: \"0\",\n    styles: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n    toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n});\nconst OddsCellSc = ({ score, odds, side, prevOdds })=>{\n    return (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsxs)(\"div\", {\n        className: \"h-full py-0.5\",\n        children: [\n            (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(\"div\", {\n                className: \"text-xs font-extralight text-dark-text\",\n                children: score\n            }),\n            (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(\"div\", {\n                className: \"dark:text-dark-default\",\n                children: (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(\"span\", {\n                    css: [\n                        prevOdds && prevOdds > odds && {\n                            \"--tw-text-opacity\": \"1\",\n                            \"color\": \"rgb(224 36 36 / var(--tw-text-opacity, 1))\"\n                        },\n                        prevOdds && prevOdds < odds && {\n                            \"--tw-text-opacity\": \"1\",\n                            \"color\": \"rgb(46 167 111 / var(--tw-text-opacity, 1))\"\n                        },\n                         false ? 0 : \";label:OddsCellSc;\",\n                         false ? 0 : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"\n                    ],\n                    \"data-tw\": \"text-red-600 | text-dark-win\",\n                    children: odds\n                })\n            })\n        ]\n    });\n};\nconst CornerTxRow = ({ change, oddsType, market, idx })=>{\n    const { close, ct, odds, type } = change || {};\n    const { f, s, t } = odds || {};\n    return (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsxs)(\"tr\", {\n        className: \"divide-list-x h-9 w-full\",\n        css: [\n            idx % 2 === 1 && {\n                \"--tw-bg-opacity\": \"1\",\n                \"backgroundColor\": \"rgb(242 246 249 / var(--tw-bg-opacity, 1))\",\n                \":is(.dark *)\": {\n                    \"--tw-bg-opacity\": \"1\",\n                    \"backgroundColor\": \"rgb(27 27 27 / var(--tw-bg-opacity, 1))\"\n                }\n            },\n             false ? 0 : \";label:CornerTxRow;\",\n             false ? 0 : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"\n        ],\n        \"data-tw\": \"bg-light-match dark:bg-dark-match\",\n        children: [\n            (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(\"td\", {\n                className: \"w-[10%]\",\n                children: \"-\"\n            }),\n            close && (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.Fragment, {\n                children: (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(\"td\", {\n                    className: \"w-[30%] text-center text-csm\",\n                    colSpan: 3,\n                    children: \"Closed\"\n                })\n            }),\n            !close && (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsxs)(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.Fragment, {\n                children: [\n                    (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(\"td\", {\n                        className: \"w-[10%]\",\n                        children: (0,_utils__WEBPACK_IMPORTED_MODULE_7__.convertOdds)(f, market, oddsType, 1)\n                    }),\n                    (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(\"td\", {\n                        className: \"w-[10%]\",\n                        children: s\n                    }),\n                    (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(\"td\", {\n                        className: \"w-[10%]\",\n                        children: (0,_utils__WEBPACK_IMPORTED_MODULE_7__.convertOdds)(t, market, oddsType, 3)\n                    })\n                ]\n            }),\n            (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(\"td\", {\n                className: \"w-[20%]\",\n                children: (0,_barrel_optimize_names_format_date_fns__WEBPACK_IMPORTED_MODULE_12__.format)(new Date(ct * 1000), \"yyyy/MM/dd HH:mm\")\n            })\n        ]\n    });\n};\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/components/modules/football/odds/OddsChangeModal.tsx\n");

/***/ }),

/***/ "./src/components/modules/football/odds/OddsChangeModalQV.tsx":
/*!********************************************************************!*\
  !*** ./src/components/modules/football/odds/OddsChangeModalQV.tsx ***!
  \********************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ OddsChangesModalQV)\n/* harmony export */ });\n/* harmony import */ var _emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @emotion/styled/base */ \"@emotion/styled/base\");\n/* harmony import */ var _barrel_optimize_names_Dialog_Transition_headlessui_react__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! __barrel_optimize__?names=Dialog,Transition!=!@headlessui/react */ \"__barrel_optimize__?names=Dialog,Transition!=!./node_modules/@headlessui/react/dist/headlessui.esm.js\");\n/* harmony import */ var _barrel_optimize_names_format_date_fns__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! __barrel_optimize__?names=format!=!date-fns */ \"__barrel_optimize__?names=format!=!./node_modules/date-fns/esm/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"react\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _hooks_useFootball_useOddsData__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/hooks/useFootball/useOddsData */ \"./src/hooks/useFootball/useOddsData.ts\");\n/* harmony import */ var _components_modules_football_odds_OddsChangeModal__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @/components/modules/football/odds/OddsChangeModal */ \"./src/components/modules/football/odds/OddsChangeModal.tsx\");\n/* harmony import */ var _components_modules_football_odds_PeriodSwitcher__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @/components/modules/football/odds/PeriodSwitcher */ \"./src/components/modules/football/odds/PeriodSwitcher.tsx\");\n/* harmony import */ var _components_modules_football_tw_components__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @/components/modules/football/tw-components */ \"./src/components/modules/football/tw-components/index.ts\");\n/* harmony import */ var _stores__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @/stores */ \"./src/stores/index.ts\");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @/utils */ \"./src/utils/index.ts\");\n/* harmony import */ var _public_svg_odd_down_svg__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../../../public/svg/odd-down.svg */ \"./public/svg/odd-down.svg\");\n/* harmony import */ var _public_svg_odd_up_svg__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../../../../public/svg/odd-up.svg */ \"./public/svg/odd-up.svg\");\n/* harmony import */ var _emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @emotion/react/jsx-runtime */ \"@emotion/react/jsx-runtime\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__, _hooks_useFootball_useOddsData__WEBPACK_IMPORTED_MODULE_2__, _components_modules_football_odds_OddsChangeModal__WEBPACK_IMPORTED_MODULE_3__, _components_modules_football_odds_PeriodSwitcher__WEBPACK_IMPORTED_MODULE_4__, _components_modules_football_tw_components__WEBPACK_IMPORTED_MODULE_5__, _stores__WEBPACK_IMPORTED_MODULE_6__, _emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__]);\n([_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__, _hooks_useFootball_useOddsData__WEBPACK_IMPORTED_MODULE_2__, _components_modules_football_odds_OddsChangeModal__WEBPACK_IMPORTED_MODULE_3__, _components_modules_football_odds_PeriodSwitcher__WEBPACK_IMPORTED_MODULE_4__, _components_modules_football_tw_components__WEBPACK_IMPORTED_MODULE_5__, _stores__WEBPACK_IMPORTED_MODULE_6__, _emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n\nfunction _EMOTION_STRINGIFIED_CSS_ERROR__() {\n    return \"You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).\";\n}\n/* eslint-disable @next/next/no-img-element */ \n\n\n\n\n\n\n\n\n\n\n\nfunction OddsChangesModalQV({ open, setOpen, bookMaker, matchId, half = 0 }) {\n    const cancelButtonRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    return (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(_barrel_optimize_names_Dialog_Transition_headlessui_react__WEBPACK_IMPORTED_MODULE_11__.Transition.Root, {\n        show: open,\n        as: react__WEBPACK_IMPORTED_MODULE_1__.Fragment,\n        children: (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(_barrel_optimize_names_Dialog_Transition_headlessui_react__WEBPACK_IMPORTED_MODULE_11__.Dialog, {\n            as: \"div\",\n            className: \"relative z-50 lg:z-10\",\n            initialFocus: cancelButtonRef,\n            onClose: setOpen,\n            children: (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(\"div\", {\n                className: \"fixed inset-0 z-50 overflow-y-auto scrollbar lg:z-10\",\n                children: (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(\"div\", {\n                    className: \"flex min-h-full items-end justify-end bg-slate-100 bg-opacity-40 text-center lg:items-center lg:justify-center\",\n                    children: (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(_barrel_optimize_names_Dialog_Transition_headlessui_react__WEBPACK_IMPORTED_MODULE_11__.Transition.Child, {\n                        as: react__WEBPACK_IMPORTED_MODULE_1__.Fragment,\n                        enter: \"ease-out duration-300\",\n                        enterFrom: \"opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95\",\n                        enterTo: \"opacity-100 translate-y-0 sm:scale-100\",\n                        leave: \"ease-in duration-200\",\n                        leaveFrom: \"opacity-100 translate-y-0 sm:scale-100\",\n                        leaveTo: \"opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95\",\n                        children: (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(_barrel_optimize_names_Dialog_Transition_headlessui_react__WEBPACK_IMPORTED_MODULE_11__.Dialog.Panel, {\n                            className: \"relative w-full transform overflow-hidden rounded-lg bg-white text-light-black  shadow-xl transition-all dark:bg-modal dark:text-dark-text sm:my-8 lg:w-[50vw]\",\n                            children: (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(OddsChangesComponentTable, {\n                                setOpen: setOpen,\n                                bookMaker: bookMaker,\n                                matchId: matchId,\n                                period: half\n                            })\n                        })\n                    })\n                })\n            })\n        })\n    });\n}\nconst OddsChangesComponentTable = ({ setOpen, bookMaker, matchId, period = 0 })=>{\n    const { market, showDetailModalCornerOU, showDetailModalScore } = (0,_stores__WEBPACK_IMPORTED_MODULE_6__.useOddsQvStore)();\n    let shownMarket = market;\n    if (showDetailModalCornerOU) {\n        shownMarket = \"cornerTx\";\n    } else if (showDetailModalScore) {\n        shownMarket = \"score\";\n    }\n    // const [market, setMarket] = useState<string>(() => {\n    //   // TODO add more markets\n    //   if (!['hdp', 'std1x2', 'tx', 'score', 'cornerTx'].includes(compareType)) {\n    //     return 'hdp';\n    //   }\n    //   return compareType;\n    // });\n    const [half, setHalf] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(period);\n    return (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsxs)(\"div\", {\n        className: \" divide-list \",\n        children: [\n            (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsxs)(\"div\", {\n                className: \" flex place-content-center items-center rounded-t-lg py-3 font-extrabold text-black dark:text-white\",\n                children: [\n                    bookMaker.name,\n                    \": Odds changes\"\n                ]\n            }),\n            (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(\"div\", {\n                className: \"flex items-center justify-end p-2.5\",\n                children: (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(_components_modules_football_odds_PeriodSwitcher__WEBPACK_IMPORTED_MODULE_4__.PeriodSwitcher, {\n                    options: [\n                        {\n                            name: \"FT\",\n                            value: 0\n                        },\n                        {\n                            name: \"HT\",\n                            value: 1\n                        }\n                    ],\n                    valGetter: setHalf,\n                    half: half\n                })\n            }),\n            (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(HeaderSection, {\n                market: shownMarket\n            }),\n            [\n                \"3in1\",\n                \"hdp\",\n                \"tx\",\n                \"std1x2\"\n            ].includes(shownMarket) && (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(Odds3in1ChangesTable, {\n                bookMaker: bookMaker,\n                market: shownMarket,\n                matchId: matchId,\n                half: half\n            }),\n            shownMarket === \"score\" && (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(ScoreOddsChangesTable, {\n                bookMaker: bookMaker,\n                market: shownMarket,\n                matchId: matchId,\n                half: half\n            }),\n            shownMarket === \"cornerTx\" && (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(_components_modules_football_odds_OddsChangeModal__WEBPACK_IMPORTED_MODULE_3__.CornerTxOddsChangesTable, {\n                bookMaker: bookMaker,\n                market: shownMarket,\n                matchId: matchId,\n                half: half\n            }),\n            (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(\"div\", {\n                className: \"flex justify-end p-2\",\n                children: (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(_components_modules_football_tw_components__WEBPACK_IMPORTED_MODULE_5__.TwFilterBtn, {\n                    onClick: ()=>{\n                        setOpen(false);\n                    },\n                    children: \"Close\"\n                })\n            })\n        ]\n    });\n};\nconst HeaderSection = ({ market })=>{\n    return (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(\"table\", {\n        className: \"w-full text-center text-sm\",\n        children: (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsxs)(\"thead\", {\n            className: \"border border-dark-text/20 bg-light-match dark:bg-dark-match\",\n            children: [\n                [\n                    \"3in1\",\n                    \"hdp\",\n                    \"tx\",\n                    \"std1x2\"\n                ].includes(market) && (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsxs)(\"tr\", {\n                    className: \"divide-list-x h-10 w-full\",\n                    children: [\n                        (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(\"th\", {\n                            className: \"w-[15%]\",\n                            children: \"Time\"\n                        }),\n                        (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(\"th\", {\n                            className: \"w-[15%]\",\n                            children: \"Tỷ số\"\n                        }),\n                        (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(\"th\", {\n                            className: \"w-[15%]\",\n                            children: market === \"tx\" ? \"T\\xe0i\" : \"Chủ\"\n                        }),\n                        (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(\"th\", {\n                            className: \"w-[15%]\",\n                            children: market === \"tx\" ? \"K\\xe8o\" : \"H\\xf2a\"\n                        }),\n                        (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(\"th\", {\n                            className: \"w-[15%]\",\n                            children: market === \"tx\" ? \"Xỉu\" : \"Kh\\xe1ch\"\n                        }),\n                        (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(\"th\", {\n                            className: \"w-1/4\",\n                            children: \"Cập nhật\"\n                        })\n                    ]\n                }),\n                market === \"score\" && (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsxs)(\"tr\", {\n                    className: \"divide-list-x h-10 w-full\",\n                    children: [\n                        (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(\"th\", {\n                            className: \"w-[8%]\",\n                            children: \"Time\"\n                        }),\n                        (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(\"th\", {\n                            className: \"w-[10%]\",\n                            children: \"Time\"\n                        }),\n                        (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(\"th\", {\n                            className: \"w-[70%]\",\n                            children: \"Odds\"\n                        }),\n                        (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(\"th\", {\n                            className: \"\",\n                            children: \"Cập nhật\"\n                        })\n                    ]\n                }),\n                market === \"cornerTx\" && (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsxs)(\"tr\", {\n                    className: \"divide-list-x h-10 w-full\",\n                    children: [\n                        (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(\"th\", {\n                            className: \"w-[20%]\",\n                            children: \"Time\"\n                        }),\n                        (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(\"th\", {\n                            className: \"w-[15%]\",\n                            children: \"Corner\"\n                        }),\n                        (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(\"th\", {\n                            className: \"w-[15%]\",\n                            children: \"Over\"\n                        }),\n                        (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(\"th\", {\n                            className: \"w-[15%]\",\n                            children: \"Goals\"\n                        }),\n                        (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(\"th\", {\n                            className: \"w-[20%]\",\n                            children: \"Under\"\n                        }),\n                        (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(\"th\", {\n                            className: \"w-[20%]\",\n                            children: \"Update\"\n                        })\n                    ]\n                })\n            ]\n        })\n    });\n};\nconst Odds3in1ChangesTable = ({ bookMaker, market, matchId, half })=>{\n    const { oddsType } = (0,_stores__WEBPACK_IMPORTED_MODULE_6__.useOddsStore)();\n    const { data, isFetching } = (0,_hooks_useFootball_useOddsData__WEBPACK_IMPORTED_MODULE_2__.useMatchOddsChangeData)(matchId, bookMaker?.id, market, half);\n    if (isFetching) {\n        return (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(\"div\", {\n            className: \"h-[59vh]\",\n            children: \"Loading...\"\n        });\n    }\n    const oddsList = data?.oddsList || [];\n    return (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(\"div\", {\n        className: \"\",\n        children: (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(\"div\", {\n            className: \"h-[55vh] overflow-y-auto text-sm scrollbar\",\n            children: (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(\"table\", {\n                className: \"min-w-full  border-collapse text-center\",\n                children: (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(\"tbody\", {\n                    className: \"divide-list max-h-[45vh] w-full\",\n                    children: oddsList.map((change, index)=>{\n                        let matchTime = \"\";\n                        if (`${change.type}` === \"2\") {\n                            matchTime = \"Live\";\n                        } else if (`${change.type}` === \"HT\") {\n                            matchTime = \"HT\";\n                        } else if (change.mt) {\n                            matchTime = `${change.mt}'`;\n                        }\n                        const scoreText = !(0,_utils__WEBPACK_IMPORTED_MODULE_7__.isValEmpty)(change.hs) ? `${change.hs} - ${change.as}` : \"\";\n                        // const isSkipped =\n                        //   (`${change.type}` === '3' && !change.mt) ||\n                        //   (`${change.type}` === '2' && change.close);\n                        // if (isSkipped) {\n                        //   return (\n                        //     // <tr key={index} className='h-8 w-full'>\n                        //     //   <td className='w-[15%]'></td>\n                        //     //   <td className='w-[15%]'></td>\n                        //     //   <td className='w-[15%]'></td>\n                        //     //   <td className='w-[15%]'></td>\n                        //     //   <td className='w-[15%]'></td>\n                        //     //   <td className='w-1/4'></td>\n                        //     // </tr>\n                        //     <></>\n                        //   );\n                        // }\n                        return (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsxs)(\"tr\", {\n                            className: \"divide-list-x h-8 w-full\",\n                            css: [\n                                index % 2 === 1 && {\n                                    \"--tw-bg-opacity\": \"1\",\n                                    \"backgroundColor\": \"rgb(242 246 249 / var(--tw-bg-opacity, 1))\",\n                                    \":is(.dark *)\": {\n                                        \"--tw-bg-opacity\": \"1\",\n                                        \"backgroundColor\": \"rgb(27 27 27 / var(--tw-bg-opacity, 1))\"\n                                    }\n                                },\n                                 false ? 0 : \";label:Odds3in1ChangesTable;\",\n                                 false ? 0 : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"\n                            ],\n                            \"data-tw\": \"bg-light-match dark:bg-dark-match\",\n                            children: [\n                                (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(\"td\", {\n                                    className: \"w-[15%]\",\n                                    children: matchTime\n                                }),\n                                (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(\"td\", {\n                                    className: \"w-[15%]\",\n                                    css: [\n                                        change.sc && {\n                                            \"backgroundColor\": \"rgb(33 135 229 / 0.3)\"\n                                        },\n                                         false ? 0 : \";label:Odds3in1ChangesTable;\",\n                                         false ? 0 : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"\n                                    ],\n                                    \"data-tw\": \"bg-logo-blue/30\",\n                                    children: scoreText\n                                }),\n                                change.close ? (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(\"td\", {\n                                    colSpan: 3,\n                                    className: \"text-dark-loss\",\n                                    children: \"Đ\\xf3ng\"\n                                }) : (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsxs)(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.Fragment, {\n                                    children: [\n                                        (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(\"td\", {\n                                            className: \"w-[15%]\",\n                                            children: (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsxs)(\"div\", {\n                                                className: \"mx-auto flex w-24 place-content-center items-center  justify-center gap-1\",\n                                                css: [\n                                                    change.ft === 1 && {\n                                                        \"--tw-text-opacity\": \"1\",\n                                                        \"color\": \"rgb(46 167 111 / var(--tw-text-opacity, 1))\"\n                                                    },\n                                                    change.ft === -1 && {\n                                                        \"--tw-text-opacity\": \"1\",\n                                                        \"color\": \"rgb(202 33 0 / var(--tw-text-opacity, 1))\"\n                                                    },\n                                                     false ? 0 : \";label:Odds3in1ChangesTable;\",\n                                                     false ? 0 : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"\n                                                ],\n                                                \"data-tw\": \"text-dark-win | text-dark-loss\",\n                                                children: [\n                                                    (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(\"span\", {\n                                                        children: (0,_utils__WEBPACK_IMPORTED_MODULE_7__.convertOdds)(change.odds?.f, market, oddsType, 1)\n                                                    }),\n                                                    (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsxs)(\"span\", {\n                                                        className: \"text-xxs\",\n                                                        children: [\n                                                            change.ft === -1 && (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(_public_svg_odd_down_svg__WEBPACK_IMPORTED_MODULE_8__[\"default\"], {}),\n                                                            change.ft === 1 && (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(_public_svg_odd_up_svg__WEBPACK_IMPORTED_MODULE_9__[\"default\"], {})\n                                                        ]\n                                                    })\n                                                ]\n                                            })\n                                        }),\n                                        (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(\"td\", {\n                                            className: \"w-[15%]\",\n                                            children: (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsxs)(\"div\", {\n                                                className: \"mx-auto flex w-24 items-center justify-center gap-1\",\n                                                css: [\n                                                    change.st === 1 && {\n                                                        \"--tw-text-opacity\": \"1\",\n                                                        \"color\": \"rgb(46 167 111 / var(--tw-text-opacity, 1))\"\n                                                    },\n                                                    change.st === -1 && {\n                                                        \"--tw-text-opacity\": \"1\",\n                                                        \"color\": \"rgb(202 33 0 / var(--tw-text-opacity, 1))\"\n                                                    },\n                                                     false ? 0 : \";label:Odds3in1ChangesTable;\",\n                                                     false ? 0 : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9ub2xhbi9Eb2N1bWVudHMvd3d3L2JsdWUtcGFwZXItYjk2OS9zcmMvY29tcG9uZW50cy9tb2R1bGVzL2Zvb3RiYWxsL29kZHMvT2Rkc0NoYW5nZU1vZGFsUVYudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQXFXMEIiLCJmaWxlIjoiL1VzZXJzL25vbGFuL0RvY3VtZW50cy93d3cvYmx1ZS1wYXBlci1iOTY5L3NyYy9jb21wb25lbnRzL21vZHVsZXMvZm9vdGJhbGwvb2Rkcy9PZGRzQ2hhbmdlTW9kYWxRVi50c3giLCJzb3VyY2VzQ29udGVudCI6WyIvKiBlc2xpbnQtZGlzYWJsZSBAbmV4dC9uZXh0L25vLWltZy1lbGVtZW50ICovXG5pbXBvcnQgeyBEaWFsb2csIFRyYW5zaXRpb24gfSBmcm9tICdAaGVhZGxlc3N1aS9yZWFjdCc7XG5pbXBvcnQgeyBmb3JtYXQgfSBmcm9tICdkYXRlLWZucyc7XG5pbXBvcnQgUmVhY3QsIHsgRnJhZ21lbnQsIHVzZVJlZiwgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgdHcgZnJvbSAndHdpbi5tYWNybyc7XG5cbmltcG9ydCB7IHVzZU1hdGNoT2Rkc0NoYW5nZURhdGEgfSBmcm9tICdAL2hvb2tzL3VzZUZvb3RiYWxsL3VzZU9kZHNEYXRhJztcblxuaW1wb3J0IHsgQ29ybmVyVHhPZGRzQ2hhbmdlc1RhYmxlIH0gZnJvbSAnQC9jb21wb25lbnRzL21vZHVsZXMvZm9vdGJhbGwvb2Rkcy9PZGRzQ2hhbmdlTW9kYWwnO1xuaW1wb3J0IHsgUGVyaW9kU3dpdGNoZXIgfSBmcm9tICdAL2NvbXBvbmVudHMvbW9kdWxlcy9mb290YmFsbC9vZGRzL1BlcmlvZFN3aXRjaGVyJztcbmltcG9ydCB7IFR3RmlsdGVyQnRuIH0gZnJvbSAnQC9jb21wb25lbnRzL21vZHVsZXMvZm9vdGJhbGwvdHctY29tcG9uZW50cyc7XG5cbmltcG9ydCB7IHVzZU9kZHNRdlN0b3JlLCB1c2VPZGRzU3RvcmUgfSBmcm9tICdAL3N0b3Jlcyc7XG5cbmltcG9ydCB7IGNvbnZlcnRPZGRzLCBpc1ZhbEVtcHR5IH0gZnJvbSAnQC91dGlscyc7XG5cbmltcG9ydCBPZGREb3duU1ZHIGZyb20gJy9wdWJsaWMvc3ZnL29kZC1kb3duLnN2Zyc7XG5pbXBvcnQgT2RkVXBTVkcgZnJvbSAnL3B1YmxpYy9zdmcvb2RkLXVwLnN2Zyc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIE9kZHNDaGFuZ2VzTW9kYWxRVih7XG4gIG9wZW4sXG4gIHNldE9wZW4sXG4gIGJvb2tNYWtlcixcbiAgbWF0Y2hJZCxcbiAgaGFsZiA9IDAsXG59OiB7XG4gIG9wZW46IGJvb2xlYW47XG4gIHNldE9wZW46ICh4OiBib29sZWFuKSA9PiB2b2lkO1xuICBib29rTWFrZXI/OiBhbnk7XG4gIG1hdGNoSWQ6IHN0cmluZztcbiAgaGFsZj86IG51bWJlcjtcbn0pIHtcbiAgY29uc3QgY2FuY2VsQnV0dG9uUmVmID0gdXNlUmVmKG51bGwpO1xuXG4gIHJldHVybiAoXG4gICAgPFRyYW5zaXRpb24uUm9vdCBzaG93PXtvcGVufSBhcz17RnJhZ21lbnR9PlxuICAgICAgPERpYWxvZ1xuICAgICAgICBhcz0nZGl2J1xuICAgICAgICBjbGFzc05hbWU9J3JlbGF0aXZlIHotNTAgbGc6ei0xMCdcbiAgICAgICAgaW5pdGlhbEZvY3VzPXtjYW5jZWxCdXR0b25SZWZ9XG4gICAgICAgIG9uQ2xvc2U9e3NldE9wZW59XG4gICAgICA+XG4gICAgICAgIHsvKiA8VHJhbnNpdGlvbi5DaGlsZFxuICAgICAgICAgIGFzPXtGcmFnbWVudH1cbiAgICAgICAgICBlbnRlcj0nZWFzZS1vdXQgZHVyYXRpb24tMzAwJ1xuICAgICAgICAgIGVudGVyRnJvbT0nb3BhY2l0eS0wJ1xuICAgICAgICAgIGVudGVyVG89J29wYWNpdHktMTAwJ1xuICAgICAgICAgIGxlYXZlPSdlYXNlLWluIGR1cmF0aW9uLTIwMCdcbiAgICAgICAgICBsZWF2ZUZyb209J29wYWNpdHktMTAwJ1xuICAgICAgICAgIGxlYXZlVG89J29wYWNpdHktMCdcbiAgICAgICAgPlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPSdmaXhlZCBpbnNldC0wIHRyYW5zaXRpb24tb3BhY2l0eScgLz5cbiAgICAgICAgPC9UcmFuc2l0aW9uLkNoaWxkPiAqL31cblxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT0nZml4ZWQgaW5zZXQtMCB6LTUwIG92ZXJmbG93LXktYXV0byBzY3JvbGxiYXIgbGc6ei0xMCc+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9J2ZsZXggbWluLWgtZnVsbCBpdGVtcy1lbmQganVzdGlmeS1lbmQgYmctc2xhdGUtMTAwIGJnLW9wYWNpdHktNDAgdGV4dC1jZW50ZXIgbGc6aXRlbXMtY2VudGVyIGxnOmp1c3RpZnktY2VudGVyJz5cbiAgICAgICAgICAgIDxUcmFuc2l0aW9uLkNoaWxkXG4gICAgICAgICAgICAgIGFzPXtGcmFnbWVudH1cbiAgICAgICAgICAgICAgZW50ZXI9J2Vhc2Utb3V0IGR1cmF0aW9uLTMwMCdcbiAgICAgICAgICAgICAgZW50ZXJGcm9tPSdvcGFjaXR5LTAgdHJhbnNsYXRlLXktNCBzbTp0cmFuc2xhdGUteS0wIHNtOnNjYWxlLTk1J1xuICAgICAgICAgICAgICBlbnRlclRvPSdvcGFjaXR5LTEwMCB0cmFuc2xhdGUteS0wIHNtOnNjYWxlLTEwMCdcbiAgICAgICAgICAgICAgbGVhdmU9J2Vhc2UtaW4gZHVyYXRpb24tMjAwJ1xuICAgICAgICAgICAgICBsZWF2ZUZyb209J29wYWNpdHktMTAwIHRyYW5zbGF0ZS15LTAgc206c2NhbGUtMTAwJ1xuICAgICAgICAgICAgICBsZWF2ZVRvPSdvcGFjaXR5LTAgdHJhbnNsYXRlLXktNCBzbTp0cmFuc2xhdGUteS0wIHNtOnNjYWxlLTk1J1xuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICA8RGlhbG9nLlBhbmVsIGNsYXNzTmFtZT0ncmVsYXRpdmUgdy1mdWxsIHRyYW5zZm9ybSBvdmVyZmxvdy1oaWRkZW4gcm91bmRlZC1sZyBiZy13aGl0ZSB0ZXh0LWxpZ2h0LWJsYWNrICBzaGFkb3cteGwgdHJhbnNpdGlvbi1hbGwgZGFyazpiZy1tb2RhbCBkYXJrOnRleHQtZGFyay10ZXh0IHNtOm15LTggbGc6dy1bNTB2d10nPlxuICAgICAgICAgICAgICAgIDxPZGRzQ2hhbmdlc0NvbXBvbmVudFRhYmxlXG4gICAgICAgICAgICAgICAgICBzZXRPcGVuPXtzZXRPcGVufVxuICAgICAgICAgICAgICAgICAgYm9va01ha2VyPXtib29rTWFrZXJ9XG4gICAgICAgICAgICAgICAgICBtYXRjaElkPXttYXRjaElkfVxuICAgICAgICAgICAgICAgICAgcGVyaW9kPXtoYWxmfVxuICAgICAgICAgICAgICAgID48L09kZHNDaGFuZ2VzQ29tcG9uZW50VGFibGU+XG4gICAgICAgICAgICAgIDwvRGlhbG9nLlBhbmVsPlxuICAgICAgICAgICAgPC9UcmFuc2l0aW9uLkNoaWxkPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvRGlhbG9nPlxuICAgIDwvVHJhbnNpdGlvbi5Sb290PlxuICApO1xufVxuXG5jb25zdCBPZGRzQ2hhbmdlc0NvbXBvbmVudFRhYmxlID0gKHtcbiAgc2V0T3BlbixcbiAgYm9va01ha2VyLFxuICBtYXRjaElkLFxuICBwZXJpb2QgPSAwLFxufToge1xuICBzZXRPcGVuOiAob3BlbjogYW55KSA9PiB2b2lkO1xuICBib29rTWFrZXI6IGFueTtcbiAgbWF0Y2hJZDogc3RyaW5nO1xuICBwZXJpb2Q/OiBudW1iZXI7XG59KSA9PiB7XG4gIGNvbnN0IHsgbWFya2V0LCBzaG93RGV0YWlsTW9kYWxDb3JuZXJPVSwgc2hvd0RldGFpbE1vZGFsU2NvcmUgfSA9XG4gICAgdXNlT2Rkc1F2U3RvcmUoKTtcbiAgbGV0IHNob3duTWFya2V0ID0gbWFya2V0O1xuICBpZiAoc2hvd0RldGFpbE1vZGFsQ29ybmVyT1UpIHtcbiAgICBzaG93bk1hcmtldCA9ICdjb3JuZXJUeCc7XG4gIH0gZWxzZSBpZiAoc2hvd0RldGFpbE1vZGFsU2NvcmUpIHtcbiAgICBzaG93bk1hcmtldCA9ICdzY29yZSc7XG4gIH1cblxuICAvLyBjb25zdCBbbWFya2V0LCBzZXRNYXJrZXRdID0gdXNlU3RhdGU8c3RyaW5nPigoKSA9PiB7XG4gIC8vICAgLy8gVE9ETyBhZGQgbW9yZSBtYXJrZXRzXG4gIC8vICAgaWYgKCFbJ2hkcCcsICdzdGQxeDInLCAndHgnLCAnc2NvcmUnLCAnY29ybmVyVHgnXS5pbmNsdWRlcyhjb21wYXJlVHlwZSkpIHtcbiAgLy8gICAgIHJldHVybiAnaGRwJztcbiAgLy8gICB9XG4gIC8vICAgcmV0dXJuIGNvbXBhcmVUeXBlO1xuICAvLyB9KTtcbiAgY29uc3QgW2hhbGYsIHNldEhhbGZdID0gdXNlU3RhdGU8bnVtYmVyPihwZXJpb2QpO1xuXG4gIHJldHVybiAoXG4gICAgPGRpdiBjbGFzc05hbWU9JyBkaXZpZGUtbGlzdCAnPlxuICAgICAgPGRpdiBjbGFzc05hbWU9JyBmbGV4IHBsYWNlLWNvbnRlbnQtY2VudGVyIGl0ZW1zLWNlbnRlciByb3VuZGVkLXQtbGcgcHktMyBmb250LWV4dHJhYm9sZCB0ZXh0LWJsYWNrIGRhcms6dGV4dC13aGl0ZSc+XG4gICAgICAgIHtib29rTWFrZXIubmFtZX06IE9kZHMgY2hhbmdlc1xuICAgICAgPC9kaXY+XG5cbiAgICAgIHsvKiBPZGRzIGNoYW5nZXMgbWVudSAqL31cbiAgICAgIDxkaXYgY2xhc3NOYW1lPSdmbGV4IGl0ZW1zLWNlbnRlciBqdXN0aWZ5LWVuZCBwLTIuNSc+XG4gICAgICAgIHsvKiA8ZGl2IGNsYXNzTmFtZT0nZmxleCBnYXAtMyc+XG4gICAgICAgICAgPFR3RmlsdGVyQnRuXG4gICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiBzZXRNYXJrZXQoJ2hkcCcpfVxuICAgICAgICAgICAgaXNBY3RpdmU9e21hcmtldCA9PT0gJ2hkcCd9XG4gICAgICAgICAgPlxuICAgICAgICAgICAgVOG7tyBs4buHIGNow6J1IMOBXG4gICAgICAgICAgPC9Ud0ZpbHRlckJ0bj5cbiAgICAgICAgICA8VHdGaWx0ZXJCdG5cbiAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHNldE1hcmtldCgndHgnKX1cbiAgICAgICAgICAgIGlzQWN0aXZlPXttYXJrZXQgPT09ICd0eCd9XG4gICAgICAgICAgPlxuICAgICAgICAgICAgVOG7tyBs4buHIHTDoGkgeOG7iXVcbiAgICAgICAgICA8L1R3RmlsdGVyQnRuPlxuICAgICAgICAgIDxUd0ZpbHRlckJ0blxuICAgICAgICAgICAgb25DbGljaz17KCkgPT4gc2V0TWFya2V0KCdzdGQxeDInKX1cbiAgICAgICAgICAgIGlzQWN0aXZlPXttYXJrZXQgPT09ICdzdGQxeDInfVxuICAgICAgICAgID5cbiAgICAgICAgICAgIDF4MlxuICAgICAgICAgIDwvVHdGaWx0ZXJCdG4+XG5cbiAgICAgICAgICA8VHdGaWx0ZXJCdG5cbiAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHNldE1hcmtldCgnY29ybmVyVHgnKX1cbiAgICAgICAgICAgIGlzQWN0aXZlPXttYXJrZXQgPT09ICdjb3JuZXJUeCd9XG4gICAgICAgICAgPlxuICAgICAgICAgICAgUGjhuqF0IGfDs2MgVC9YXG4gICAgICAgICAgPC9Ud0ZpbHRlckJ0bj5cblxuICAgICAgICAgIDxUd0ZpbHRlckJ0blxuICAgICAgICAgICAgb25DbGljaz17KCkgPT4gc2V0TWFya2V0KCdzY29yZScpfVxuICAgICAgICAgICAgaXNBY3RpdmU9e21hcmtldCA9PT0gJ3Njb3JlJ31cbiAgICAgICAgICA+XG4gICAgICAgICAgICBU4bu3IHPhu5FcbiAgICAgICAgICA8L1R3RmlsdGVyQnRuPlxuICAgICAgICA8L2Rpdj4gKi99XG5cbiAgICAgICAgPFBlcmlvZFN3aXRjaGVyXG4gICAgICAgICAgb3B0aW9ucz17W1xuICAgICAgICAgICAgeyBuYW1lOiAnRlQnLCB2YWx1ZTogMCB9LFxuICAgICAgICAgICAgeyBuYW1lOiAnSFQnLCB2YWx1ZTogMSB9LFxuICAgICAgICAgIF19XG4gICAgICAgICAgdmFsR2V0dGVyPXtzZXRIYWxmfVxuICAgICAgICAgIGhhbGY9e2hhbGZ9XG4gICAgICAgID48L1BlcmlvZFN3aXRjaGVyPlxuICAgICAgPC9kaXY+XG5cbiAgICAgIHsvKiBPZGRzIGNoYW5nZXMgaGVhZGVyIHNlY3Rpb24gKi99XG4gICAgICA8SGVhZGVyU2VjdGlvbiBtYXJrZXQ9e3Nob3duTWFya2V0fT48L0hlYWRlclNlY3Rpb24+XG5cbiAgICAgIHsvKiBPZGRzIGNoYW5nZXMgZGF0YSBzZWN0aW9uICovfVxuICAgICAge1snM2luMScsICdoZHAnLCAndHgnLCAnc3RkMXgyJ10uaW5jbHVkZXMoc2hvd25NYXJrZXQpICYmIChcbiAgICAgICAgPE9kZHMzaW4xQ2hhbmdlc1RhYmxlXG4gICAgICAgICAgYm9va01ha2VyPXtib29rTWFrZXJ9XG4gICAgICAgICAgbWFya2V0PXtzaG93bk1hcmtldH1cbiAgICAgICAgICBtYXRjaElkPXttYXRjaElkfVxuICAgICAgICAgIGhhbGY9e2hhbGZ9XG4gICAgICAgID48L09kZHMzaW4xQ2hhbmdlc1RhYmxlPlxuICAgICAgKX1cbiAgICAgIHtzaG93bk1hcmtldCA9PT0gJ3Njb3JlJyAmJiAoXG4gICAgICAgIDxTY29yZU9kZHNDaGFuZ2VzVGFibGVcbiAgICAgICAgICBib29rTWFrZXI9e2Jvb2tNYWtlcn1cbiAgICAgICAgICBtYXJrZXQ9e3Nob3duTWFya2V0fVxuICAgICAgICAgIG1hdGNoSWQ9e21hdGNoSWR9XG4gICAgICAgICAgaGFsZj17aGFsZn1cbiAgICAgICAgPjwvU2NvcmVPZGRzQ2hhbmdlc1RhYmxlPlxuICAgICAgKX1cbiAgICAgIHtzaG93bk1hcmtldCA9PT0gJ2Nvcm5lclR4JyAmJiAoXG4gICAgICAgIDxDb3JuZXJUeE9kZHNDaGFuZ2VzVGFibGVcbiAgICAgICAgICBib29rTWFrZXI9e2Jvb2tNYWtlcn1cbiAgICAgICAgICBtYXJrZXQ9e3Nob3duTWFya2V0fVxuICAgICAgICAgIG1hdGNoSWQ9e21hdGNoSWR9XG4gICAgICAgICAgaGFsZj17aGFsZn1cbiAgICAgICAgPjwvQ29ybmVyVHhPZGRzQ2hhbmdlc1RhYmxlPlxuICAgICAgKX1cblxuICAgICAgPGRpdiBjbGFzc05hbWU9J2ZsZXgganVzdGlmeS1lbmQgcC0yJz5cbiAgICAgICAgPFR3RmlsdGVyQnRuXG4gICAgICAgICAgb25DbGljaz17KCkgPT4ge1xuICAgICAgICAgICAgc2V0T3BlbihmYWxzZSk7XG4gICAgICAgICAgfX1cbiAgICAgICAgPlxuICAgICAgICAgIENsb3NlXG4gICAgICAgIDwvVHdGaWx0ZXJCdG4+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgKTtcbn07XG5cbmNvbnN0IEhlYWRlclNlY3Rpb24gPSAoeyBtYXJrZXQgfTogeyBtYXJrZXQ6IGFueSB9KSA9PiB7XG4gIHJldHVybiAoXG4gICAgPHRhYmxlIGNsYXNzTmFtZT0ndy1mdWxsIHRleHQtY2VudGVyIHRleHQtc20nPlxuICAgICAgPHRoZWFkIGNsYXNzTmFtZT0nYm9yZGVyIGJvcmRlci1kYXJrLXRleHQvMjAgYmctbGlnaHQtbWF0Y2ggZGFyazpiZy1kYXJrLW1hdGNoJz5cbiAgICAgICAge1snM2luMScsICdoZHAnLCAndHgnLCAnc3RkMXgyJ10uaW5jbHVkZXMobWFya2V0KSAmJiAoXG4gICAgICAgICAgPHRyIGNsYXNzTmFtZT0nZGl2aWRlLWxpc3QteCBoLTEwIHctZnVsbCc+XG4gICAgICAgICAgICA8dGggY2xhc3NOYW1lPSd3LVsxNSVdJz5UaW1lPC90aD5cbiAgICAgICAgICAgIDx0aCBjbGFzc05hbWU9J3ctWzE1JV0nPlThu7cgc+G7kTwvdGg+XG4gICAgICAgICAgICA8dGggY2xhc3NOYW1lPSd3LVsxNSVdJz57bWFya2V0ID09PSAndHgnID8gJ1TDoGknIDogJ0No4bunJ308L3RoPlxuICAgICAgICAgICAgPHRoIGNsYXNzTmFtZT0ndy1bMTUlXSc+e21hcmtldCA9PT0gJ3R4JyA/ICdLw6hvJyA6ICdIw7JhJ308L3RoPlxuICAgICAgICAgICAgPHRoIGNsYXNzTmFtZT0ndy1bMTUlXSc+e21hcmtldCA9PT0gJ3R4JyA/ICdY4buJdScgOiAnS2jDoWNoJ308L3RoPlxuICAgICAgICAgICAgPHRoIGNsYXNzTmFtZT0ndy0xLzQnPkPhuq1wIG5o4bqtdDwvdGg+XG4gICAgICAgICAgPC90cj5cbiAgICAgICAgKX1cbiAgICAgICAge21hcmtldCA9PT0gJ3Njb3JlJyAmJiAoXG4gICAgICAgICAgPHRyIGNsYXNzTmFtZT0nZGl2aWRlLWxpc3QteCBoLTEwIHctZnVsbCc+XG4gICAgICAgICAgICA8dGggY2xhc3NOYW1lPSd3LVs4JV0nPlRpbWU8L3RoPlxuICAgICAgICAgICAgPHRoIGNsYXNzTmFtZT0ndy1bMTAlXSc+VGltZTwvdGg+XG4gICAgICAgICAgICA8dGggY2xhc3NOYW1lPSd3LVs3MCVdJz5PZGRzPC90aD5cbiAgICAgICAgICAgIDx0aCBjbGFzc05hbWU9Jyc+Q+G6rXAgbmjhuq10PC90aD5cbiAgICAgICAgICA8L3RyPlxuICAgICAgICApfVxuICAgICAgICB7bWFya2V0ID09PSAnY29ybmVyVHgnICYmIChcbiAgICAgICAgICA8dHIgY2xhc3NOYW1lPSdkaXZpZGUtbGlzdC14IGgtMTAgdy1mdWxsJz5cbiAgICAgICAgICAgIDx0aCBjbGFzc05hbWU9J3ctWzIwJV0nPlRpbWU8L3RoPlxuICAgICAgICAgICAgPHRoIGNsYXNzTmFtZT0ndy1bMTUlXSc+Q29ybmVyPC90aD5cbiAgICAgICAgICAgIDx0aCBjbGFzc05hbWU9J3ctWzE1JV0nPk92ZXI8L3RoPlxuICAgICAgICAgICAgPHRoIGNsYXNzTmFtZT0ndy1bMTUlXSc+R29hbHM8L3RoPlxuICAgICAgICAgICAgPHRoIGNsYXNzTmFtZT0ndy1bMjAlXSc+VW5kZXI8L3RoPlxuICAgICAgICAgICAgPHRoIGNsYXNzTmFtZT0ndy1bMjAlXSc+VXBkYXRlPC90aD5cbiAgICAgICAgICA8L3RyPlxuICAgICAgICApfVxuICAgICAgPC90aGVhZD5cbiAgICA8L3RhYmxlPlxuICApO1xufTtcblxuY29uc3QgT2RkczNpbjFDaGFuZ2VzVGFibGUgPSAoe1xuICBib29rTWFrZXIsXG4gIG1hcmtldCxcbiAgbWF0Y2hJZCxcbiAgaGFsZixcbn06IHtcbiAgYm9va01ha2VyOiBhbnk7XG4gIG1hcmtldDogc3RyaW5nO1xuICBtYXRjaElkOiBzdHJpbmc7XG4gIGhhbGY6IG51bWJlcjtcbn0pID0+IHtcbiAgY29uc3QgeyBvZGRzVHlwZSB9ID0gdXNlT2Rkc1N0b3JlKCk7XG4gIGNvbnN0IHsgZGF0YSwgaXNGZXRjaGluZyB9ID0gdXNlTWF0Y2hPZGRzQ2hhbmdlRGF0YShcbiAgICBtYXRjaElkLFxuICAgIGJvb2tNYWtlcj8uaWQsXG4gICAgbWFya2V0LFxuICAgIGhhbGZcbiAgKTtcblxuICBpZiAoaXNGZXRjaGluZykge1xuICAgIHJldHVybiA8ZGl2IGNsYXNzTmFtZT0naC1bNTl2aF0nPkxvYWRpbmcuLi48L2Rpdj47XG4gIH1cblxuICBjb25zdCBvZGRzTGlzdCA9IGRhdGE/Lm9kZHNMaXN0IHx8IFtdO1xuXG4gIHJldHVybiAoXG4gICAgPGRpdiBjbGFzc05hbWU9Jyc+XG4gICAgICB7LyogPHRhYmxlIGNsYXNzTmFtZT0ndy1mdWxsIHRleHQtY2VudGVyIHRleHQtc20nPlxuICAgICAgICA8dGhlYWQgY2xhc3NOYW1lPSdib3JkZXIgYm9yZGVyLWRhcmstdGV4dC8yMCBiZy1saWdodC1tYXRjaCBkYXJrOmJnLWRhcmstbWF0Y2gnPlxuICAgICAgICAgIDx0ciBjbGFzc05hbWU9J2RpdmlkZS1saXN0LXggaC0xMCB3LWZ1bGwnPlxuICAgICAgICAgICAgPHRoIGNsYXNzTmFtZT0ndy1bMTUlXSc+VGltZTwvdGg+XG4gICAgICAgICAgICA8dGggY2xhc3NOYW1lPSd3LVsxNSVdJz5U4bu3IHPhu5E8L3RoPlxuICAgICAgICAgICAgPHRoIGNsYXNzTmFtZT0ndy1bMTUlXSc+e21hcmtldCA9PT0gJ3R4JyA/ICdUw6BpJyA6ICdDaOG7pyd9PC90aD5cbiAgICAgICAgICAgIDx0aCBjbGFzc05hbWU9J3ctWzE1JV0nPnttYXJrZXQgPT09ICd0eCcgPyAnS8OobycgOiAnSMOyYSd9PC90aD5cbiAgICAgICAgICAgIDx0aCBjbGFzc05hbWU9J3ctWzE1JV0nPnttYXJrZXQgPT09ICd0eCcgPyAnWOG7iXUnIDogJ0tow6FjaCd9PC90aD5cbiAgICAgICAgICAgIDx0aCBjbGFzc05hbWU9J3ctMS80Jz5D4bqtcCBuaOG6rXQ8L3RoPlxuICAgICAgICAgIDwvdHI+XG4gICAgICAgIDwvdGhlYWQ+XG4gICAgICA8L3RhYmxlPiAqL31cbiAgICAgIDxkaXYgY2xhc3NOYW1lPSdoLVs1NXZoXSBvdmVyZmxvdy15LWF1dG8gdGV4dC1zbSBzY3JvbGxiYXInPlxuICAgICAgICA8dGFibGUgY2xhc3NOYW1lPSdtaW4tdy1mdWxsICBib3JkZXItY29sbGFwc2UgdGV4dC1jZW50ZXInPlxuICAgICAgICAgIDx0Ym9keSBjbGFzc05hbWU9J2RpdmlkZS1saXN0IG1heC1oLVs0NXZoXSB3LWZ1bGwnPlxuICAgICAgICAgICAge29kZHNMaXN0Lm1hcCgoY2hhbmdlOiBhbnksIGluZGV4OiBudW1iZXIpID0+IHtcbiAgICAgICAgICAgICAgbGV0IG1hdGNoVGltZSA9ICcnO1xuICAgICAgICAgICAgICBpZiAoYCR7Y2hhbmdlLnR5cGV9YCA9PT0gJzInKSB7XG4gICAgICAgICAgICAgICAgbWF0Y2hUaW1lID0gJ0xpdmUnO1xuICAgICAgICAgICAgICB9IGVsc2UgaWYgKGAke2NoYW5nZS50eXBlfWAgPT09ICdIVCcpIHtcbiAgICAgICAgICAgICAgICBtYXRjaFRpbWUgPSAnSFQnO1xuICAgICAgICAgICAgICB9IGVsc2UgaWYgKGNoYW5nZS5tdCkge1xuICAgICAgICAgICAgICAgIG1hdGNoVGltZSA9IGAke2NoYW5nZS5tdH0nYDtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGNvbnN0IHNjb3JlVGV4dCA9ICFpc1ZhbEVtcHR5KGNoYW5nZS5ocylcbiAgICAgICAgICAgICAgICA/IGAke2NoYW5nZS5oc30gLSAke2NoYW5nZS5hc31gXG4gICAgICAgICAgICAgICAgOiAnJztcblxuICAgICAgICAgICAgICAvLyBjb25zdCBpc1NraXBwZWQgPVxuICAgICAgICAgICAgICAvLyAgIChgJHtjaGFuZ2UudHlwZX1gID09PSAnMycgJiYgIWNoYW5nZS5tdCkgfHxcbiAgICAgICAgICAgICAgLy8gICAoYCR7Y2hhbmdlLnR5cGV9YCA9PT0gJzInICYmIGNoYW5nZS5jbG9zZSk7XG5cbiAgICAgICAgICAgICAgLy8gaWYgKGlzU2tpcHBlZCkge1xuICAgICAgICAgICAgICAvLyAgIHJldHVybiAoXG4gICAgICAgICAgICAgIC8vICAgICAvLyA8dHIga2V5PXtpbmRleH0gY2xhc3NOYW1lPSdoLTggdy1mdWxsJz5cbiAgICAgICAgICAgICAgLy8gICAgIC8vICAgPHRkIGNsYXNzTmFtZT0ndy1bMTUlXSc+PC90ZD5cbiAgICAgICAgICAgICAgLy8gICAgIC8vICAgPHRkIGNsYXNzTmFtZT0ndy1bMTUlXSc+PC90ZD5cbiAgICAgICAgICAgICAgLy8gICAgIC8vICAgPHRkIGNsYXNzTmFtZT0ndy1bMTUlXSc+PC90ZD5cbiAgICAgICAgICAgICAgLy8gICAgIC8vICAgPHRkIGNsYXNzTmFtZT0ndy1bMTUlXSc+PC90ZD5cbiAgICAgICAgICAgICAgLy8gICAgIC8vICAgPHRkIGNsYXNzTmFtZT0ndy1bMTUlXSc+PC90ZD5cbiAgICAgICAgICAgICAgLy8gICAgIC8vICAgPHRkIGNsYXNzTmFtZT0ndy0xLzQnPjwvdGQ+XG4gICAgICAgICAgICAgIC8vICAgICAvLyA8L3RyPlxuICAgICAgICAgICAgICAvLyAgICAgPD48Lz5cbiAgICAgICAgICAgICAgLy8gICApO1xuICAgICAgICAgICAgICAvLyB9XG5cbiAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICA8dHJcbiAgICAgICAgICAgICAgICAgIGtleT17aW5kZXh9XG4gICAgICAgICAgICAgICAgICBjbGFzc05hbWU9J2RpdmlkZS1saXN0LXggaC04IHctZnVsbCdcbiAgICAgICAgICAgICAgICAgIGNzcz17W1xuICAgICAgICAgICAgICAgICAgICBpbmRleCAlIDIgPT09IDEgJiYgdHdgYmctbGlnaHQtbWF0Y2ggZGFyazpiZy1kYXJrLW1hdGNoYCxcbiAgICAgICAgICAgICAgICAgIF19XG4gICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT0ndy1bMTUlXSc+e21hdGNoVGltZX08L3RkPlxuICAgICAgICAgICAgICAgICAgPHRkXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT0ndy1bMTUlXSdcbiAgICAgICAgICAgICAgICAgICAgY3NzPXtbY2hhbmdlLnNjICYmIHR3YGJnLWxvZ28tYmx1ZS8zMGBdfVxuICAgICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICB7c2NvcmVUZXh0fVxuICAgICAgICAgICAgICAgICAgPC90ZD5cbiAgICAgICAgICAgICAgICAgIHtjaGFuZ2UuY2xvc2UgPyAoXG4gICAgICAgICAgICAgICAgICAgIDx0ZCBjb2xTcGFuPXszfSBjbGFzc05hbWU9J3RleHQtZGFyay1sb3NzJz5cbiAgICAgICAgICAgICAgICAgICAgICDEkMOzbmdcbiAgICAgICAgICAgICAgICAgICAgPC90ZD5cbiAgICAgICAgICAgICAgICAgICkgOiAoXG4gICAgICAgICAgICAgICAgICAgIDw+XG4gICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT0ndy1bMTUlXSc+XG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT0nbXgtYXV0byBmbGV4IHctMjQgcGxhY2UtY29udGVudC1jZW50ZXIgaXRlbXMtY2VudGVyICBqdXN0aWZ5LWNlbnRlciBnYXAtMSdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgY3NzPXtbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hhbmdlLmZ0ID09PSAxICYmIHR3YHRleHQtZGFyay13aW5gLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoYW5nZS5mdCA9PT0gLTEgJiYgdHdgdGV4dC1kYXJrLWxvc3NgLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBdfVxuICAgICAgICAgICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7Y29udmVydE9kZHMoY2hhbmdlLm9kZHM/LmYsIG1hcmtldCwgb2Rkc1R5cGUsIDEpfVxuICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT0ndGV4dC14eHMnPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtjaGFuZ2UuZnQgPT09IC0xICYmIDxPZGREb3duU1ZHPjwvT2RkRG93blNWRz59XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge2NoYW5nZS5mdCA9PT0gMSAmJiA8T2RkVXBTVkc+PC9PZGRVcFNWRz59XG4gICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XG4gICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT0ndy1bMTUlXSc+XG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT0nbXgtYXV0byBmbGV4IHctMjQgaXRlbXMtY2VudGVyIGp1c3RpZnktY2VudGVyIGdhcC0xJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICBjc3M9e1tcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGFuZ2Uuc3QgPT09IDEgJiYgdHdgdGV4dC1kYXJrLXdpbmAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hhbmdlLnN0ID09PSAtMSAmJiB0d2B0ZXh0LWRhcmstbG9zc2AsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIF19XG4gICAgICAgICAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtjb252ZXJ0T2RkcyhjaGFuZ2Uub2Rkcz8ucywgbWFya2V0LCBvZGRzVHlwZSwgMil9XG4gICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPSd0ZXh0LXh4cyc+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge2NoYW5nZS5zdCA9PT0gLTEgJiYgPE9kZERvd25TVkc+PC9PZGREb3duU1ZHPn1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7Y2hhbmdlLnN0ID09PSAxICYmIDxPZGRVcFNWRz48L09kZFVwU1ZHPn1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgPC90ZD5cbiAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPSd3LVsxNSVdJz5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPSdteC1hdXRvIGZsZXggdy0yNCBpdGVtcy1jZW50ZXIganVzdGlmeS1jZW50ZXIgZ2FwLTEnXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGNzcz17W1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoYW5nZS50dCA9PT0gMSAmJiB0d2B0ZXh0LWRhcmstd2luYCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGFuZ2UudHQgPT09IC0xICYmIHR3YHRleHQtZGFyay1sb3NzYCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgXX1cbiAgICAgICAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge2NvbnZlcnRPZGRzKGNoYW5nZS5vZGRzPy50LCBtYXJrZXQsIG9kZHNUeXBlLCAzKX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9J3RleHQteHhzJz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7Y2hhbmdlLnR0ID09PSAtMSAmJiA8T2RkRG93blNWRz48L09kZERvd25TVkc+fVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtjaGFuZ2UudHQgPT09IDEgJiYgPE9kZFVwU1ZHPjwvT2RkVXBTVkc+fVxuICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxuICAgICAgICAgICAgICAgICAgICA8Lz5cbiAgICAgICAgICAgICAgICAgICl9XG4gICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPSd3LTEvNCc+XG4gICAgICAgICAgICAgICAgICAgIHtmb3JtYXQobmV3IERhdGUoY2hhbmdlLmN0ICogMTAwMCksICdkZC9NTSBISDptbScpfVxuICAgICAgICAgICAgICAgICAgPC90ZD5cbiAgICAgICAgICAgICAgICA8L3RyPlxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfSl9XG4gICAgICAgICAgPC90Ym9keT5cbiAgICAgICAgPC90YWJsZT5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICApO1xufTtcblxuY29uc3QgU2NvcmVPZGRzQ2hhbmdlc1RhYmxlID0gKHtcbiAgYm9va01ha2VyLFxuICBtYXJrZXQsXG4gIG1hdGNoSWQsXG4gIGhhbGYsXG59OiB7XG4gIGJvb2tNYWtlcjogYW55O1xuICBtYXJrZXQ6IHN0cmluZztcbiAgbWF0Y2hJZDogc3RyaW5nO1xuICBoYWxmOiBudW1iZXI7XG59KSA9PiB7XG4gIC8vIGNvbnN0IHsgb2Rkc1R5cGUgfSA9IHVzZU9kZHNTdG9yZSgpO1xuICBjb25zdCB7IGRhdGEsIGlzRmV0Y2hpbmcgfSA9IHVzZU1hdGNoT2Rkc0NoYW5nZURhdGEoXG4gICAgbWF0Y2hJZCxcbiAgICBib29rTWFrZXI/LmlkLFxuICAgIG1hcmtldCxcbiAgICBoYWxmXG4gICk7XG5cbiAgaWYgKGlzRmV0Y2hpbmcpIHtcbiAgICByZXR1cm4gPGRpdiBjbGFzc05hbWU9J2gtWzU5dmhdJz5Mb2FkaW5nLi4uPC9kaXY+O1xuICB9XG5cbiAgY29uc3Qgb2Rkc0xpc3QgPSBkYXRhPy5vZGRzTGlzdCB8fCBbXTtcbiAgY29uc3Qgc2hvd25MaXN0ID0gb2Rkc0xpc3RcbiAgICAubWFwKChjaGFuZ2U6IGFueSwgaWR4OiBudW1iZXIpID0+IHtcbiAgICAgIGNvbnN0IHByZXZDaGFuZ2UgPSBvZGRzTGlzdFtpZHggLSAxXSB8fCB7fTtcbiAgICAgIGNvbnN0IHByZXYgPSBwcmV2Q2hhbmdlPy5vZGRzIHx8IHt9O1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgLi4uY2hhbmdlLFxuICAgICAgICBwcmV2OiBwcmV2LFxuICAgICAgfTtcbiAgICB9KVxuICAgIC5yZXZlcnNlKCk7XG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2IGNsYXNzTmFtZT0nJz5cbiAgICAgIHsvKiA8dGFibGUgY2xhc3NOYW1lPSd3LWZ1bGwgdGV4dC1jZW50ZXIgdGV4dC1zbSc+XG4gICAgICAgIDx0aGVhZCBjbGFzc05hbWU9J2JvcmRlciBib3JkZXItZGFyay10ZXh0LzIwIGJnLWxpZ2h0LW1hdGNoIGRhcms6YmctZGFyay1tYXRjaCc+XG4gICAgICAgICAgPHRyIGNsYXNzTmFtZT0nZGl2aWRlLWxpc3QteCBoLTEwIHctZnVsbCc+XG4gICAgICAgICAgICA8dGggY2xhc3NOYW1lPSd3LVsxNSVdJz5UaW1lPC90aD5cbiAgICAgICAgICAgIDx0aCBjbGFzc05hbWU9J3ctWzcwJV0nPjwvdGg+XG4gICAgICAgICAgICA8dGggY2xhc3NOYW1lPSd3LVsxNSVdJz5D4bqtcCBuaOG6rXQ8L3RoPlxuICAgICAgICAgIDwvdHI+XG4gICAgICAgIDwvdGhlYWQ+XG4gICAgICA8L3RhYmxlPiAqL31cbiAgICAgIDxkaXYgY2xhc3NOYW1lPSdoLVs1NXZoXSBvdmVyZmxvdy15LWF1dG8gdGV4dC1zbSBzY3JvbGxiYXInPlxuICAgICAgICA8dGFibGUgY2xhc3NOYW1lPSdtaW4tdy1mdWxsICBib3JkZXItY29sbGFwc2UgdGV4dC1jZW50ZXInPlxuICAgICAgICAgIDx0Ym9keSBjbGFzc05hbWU9J2RpdmlkZS1saXN0IG1heC1oLVs0NXZoXSB3LWZ1bGwnPlxuICAgICAgICAgICAge3Nob3duTGlzdC5tYXAoKGNoYW5nZTogYW55LCBpZHg6IG51bWJlcikgPT4ge1xuICAgICAgICAgICAgICBjb25zdCBvZGRzID0gY2hhbmdlLm9kZHMgfHwge307XG4gICAgICAgICAgICAgIGNvbnN0IHByZXYgPSBjaGFuZ2UucHJldiB8fCB7fTtcblxuICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgIDw+XG4gICAgICAgICAgICAgICAgICA8VHdSb3dTY1xuICAgICAgICAgICAgICAgICAgICBrZXk9e2Ake2lkeH0tYWB9XG4gICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT0nZGl2aWRlLWxpc3QteCBoLTExIHctZnVsbCdcbiAgICAgICAgICAgICAgICAgICAgY3NzPXtbXG4gICAgICAgICAgICAgICAgICAgICAgaWR4ICUgMiA9PT0gMSAmJiB0d2BiZy1saWdodC1tYXRjaCBkYXJrOmJnLWRhcmstbWF0Y2hgLFxuICAgICAgICAgICAgICAgICAgICBdfVxuICAgICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICA8VHdDZWxsU2MgY2xhc3NOYW1lPSd3LVs4JV0nIHJvd1NwYW49ezN9PlxuICAgICAgICAgICAgICAgICAgICAgIExpdmVcbiAgICAgICAgICAgICAgICAgICAgPC9Ud0NlbGxTYz5cbiAgICAgICAgICAgICAgICAgICAgPFR3Q2VsbFNjIGNsYXNzTmFtZT0ndy1bMTAlXSB0ZXh0LWxvZ28tYmx1ZSc+SG9tZTwvVHdDZWxsU2M+XG5cbiAgICAgICAgICAgICAgICAgICAge2NoYW5nZS5jbG9zZSA/IChcbiAgICAgICAgICAgICAgICAgICAgICA8PlxuICAgICAgICAgICAgICAgICAgICAgICAgPFR3Q2VsbFNjXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT0ndy1bNyVdIHRleHQtZGFyay1sb3NzJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xTcGFuPXsxMH1cbiAgICAgICAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgxJDDs25nXG4gICAgICAgICAgICAgICAgICAgICAgICA8L1R3Q2VsbFNjPlxuICAgICAgICAgICAgICAgICAgICAgIDwvPlxuICAgICAgICAgICAgICAgICAgICApIDogKFxuICAgICAgICAgICAgICAgICAgICAgIDw+XG4gICAgICAgICAgICAgICAgICAgICAgICA8VHdPZGRzQ2VsbFNjIGNsYXNzTmFtZT0ndy1bNyVdJz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgPE9kZHNDZWxsU2NcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY29yZT0nMTowJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9kZHM9e29kZHMuaDF9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJldk9kZHM9e3ByZXYuaDF9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2lkZT17MX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgPjwvT2Rkc0NlbGxTYz5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvVHdPZGRzQ2VsbFNjPlxuICAgICAgICAgICAgICAgICAgICAgICAgPFR3T2Rkc0NlbGxTYyBjbGFzc05hbWU9J3ctWzclXSc+XG4gICAgICAgICAgICAgICAgICAgICAgICAgIDxPZGRzQ2VsbFNjXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2NvcmU9JzI6MCdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvZGRzPXtvZGRzLmgyfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNpZGU9ezF9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJldk9kZHM9e3ByZXYuaDJ9XG4gICAgICAgICAgICAgICAgICAgICAgICAgID48L09kZHNDZWxsU2M+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L1R3T2Rkc0NlbGxTYz5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxUd09kZHNDZWxsU2MgY2xhc3NOYW1lPSd3LVs3JV0nPlxuICAgICAgICAgICAgICAgICAgICAgICAgICA8T2Rkc0NlbGxTY1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjb3JlPScyOjEnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb2Rkcz17b2Rkcy5oM31cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaWRlPXsxfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByZXZPZGRzPXtwcmV2LmgzfVxuICAgICAgICAgICAgICAgICAgICAgICAgICA+PC9PZGRzQ2VsbFNjPlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9Ud09kZHNDZWxsU2M+XG4gICAgICAgICAgICAgICAgICAgICAgICA8VHdPZGRzQ2VsbFNjIGNsYXNzTmFtZT0ndy1bNyVdJz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgPE9kZHNDZWxsU2NcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY29yZT0nMzowJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9kZHM9e29kZHMuaDR9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2lkZT17MX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmV2T2Rkcz17cHJldi5oNH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgPjwvT2Rkc0NlbGxTYz5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvVHdPZGRzQ2VsbFNjPlxuICAgICAgICAgICAgICAgICAgICAgICAgPFR3T2Rkc0NlbGxTYyBjbGFzc05hbWU9J3ctWzclXSc+XG4gICAgICAgICAgICAgICAgICAgICAgICAgIDxPZGRzQ2VsbFNjXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2NvcmU9JzM6MSdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvZGRzPXtvZGRzLmg1fVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNpZGU9ezF9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJldk9kZHM9e3ByZXYuaDV9XG4gICAgICAgICAgICAgICAgICAgICAgICAgID48L09kZHNDZWxsU2M+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L1R3T2Rkc0NlbGxTYz5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxUd09kZHNDZWxsU2MgY2xhc3NOYW1lPSd3LVs3JV0nPlxuICAgICAgICAgICAgICAgICAgICAgICAgICA8T2Rkc0NlbGxTY1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjb3JlPSczOjInXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb2Rkcz17b2Rkcy5oNn1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaWRlPXsxfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByZXZPZGRzPXtwcmV2Lmg2fVxuICAgICAgICAgICAgICAgICAgICAgICAgICA+PC9PZGRzQ2VsbFNjPlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9Ud09kZHNDZWxsU2M+XG4gICAgICAgICAgICAgICAgICAgICAgICA8VHdPZGRzQ2VsbFNjIGNsYXNzTmFtZT0ndy1bNyVdJz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgPE9kZHNDZWxsU2NcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY29yZT0nNDowJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9kZHM9e29kZHMuaDd9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2lkZT17MX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmV2T2Rkcz17cHJldi5oN31cbiAgICAgICAgICAgICAgICAgICAgICAgICAgPjwvT2Rkc0NlbGxTYz5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvVHdPZGRzQ2VsbFNjPlxuICAgICAgICAgICAgICAgICAgICAgICAgPFR3T2Rkc0NlbGxTYyBjbGFzc05hbWU9J3ctWzclXSc+XG4gICAgICAgICAgICAgICAgICAgICAgICAgIDxPZGRzQ2VsbFNjXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2NvcmU9JzQ6MSdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvZGRzPXtvZGRzLmg4fVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNpZGU9ezF9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJldk9kZHM9e3ByZXYuaDh9XG4gICAgICAgICAgICAgICAgICAgICAgICAgID48L09kZHNDZWxsU2M+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L1R3T2Rkc0NlbGxTYz5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxUd09kZHNDZWxsU2MgY2xhc3NOYW1lPSd3LVs3JV0nPlxuICAgICAgICAgICAgICAgICAgICAgICAgICA8T2Rkc0NlbGxTY1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjb3JlPSc0OjInXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb2Rkcz17b2Rkcy5oOX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaWRlPXsxfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByZXZPZGRzPXtwcmV2Lmg5fVxuICAgICAgICAgICAgICAgICAgICAgICAgICA+PC9PZGRzQ2VsbFNjPlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9Ud09kZHNDZWxsU2M+XG4gICAgICAgICAgICAgICAgICAgICAgICA8VHdPZGRzQ2VsbFNjIGNsYXNzTmFtZT0ndy1bNyVdJz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgPE9kZHNDZWxsU2NcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY29yZT0nNDozJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9kZHM9e29kZHMuaDEwfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNpZGU9ezF9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJldk9kZHM9e3ByZXYuaDEwfVxuICAgICAgICAgICAgICAgICAgICAgICAgICA+PC9PZGRzQ2VsbFNjPlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9Ud09kZHNDZWxsU2M+XG4gICAgICAgICAgICAgICAgICAgICAgPC8+XG4gICAgICAgICAgICAgICAgICAgICl9XG4gICAgICAgICAgICAgICAgICAgIDxUd0NlbGxTYyBjbGFzc05hbWU9J3ctMS80JyByb3dTcGFuPXszfT5cbiAgICAgICAgICAgICAgICAgICAgICB7Zm9ybWF0KG5ldyBEYXRlKGNoYW5nZS5jdCAqIDEwMDApLCAnZGQvTU0gSEg6bW0nKX1cbiAgICAgICAgICAgICAgICAgICAgPC9Ud0NlbGxTYz5cbiAgICAgICAgICAgICAgICAgIDwvVHdSb3dTYz5cblxuICAgICAgICAgICAgICAgICAgPFR3Um93U2NcbiAgICAgICAgICAgICAgICAgICAga2V5PXtgJHtpZHh9LWJgfVxuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9J2RpdmlkZS1saXN0LXggaC0xMCB3LWZ1bGwnXG4gICAgICAgICAgICAgICAgICAgIGNzcz17W1xuICAgICAgICAgICAgICAgICAgICAgIGlkeCAlIDIgPT09IDEgJiYgdHdgYmctbGlnaHQtbWF0Y2ggZGFyazpiZy1kYXJrLW1hdGNoYCxcbiAgICAgICAgICAgICAgICAgICAgXX1cbiAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgey8qIDx0ZCBjbGFzc05hbWU9J3ctWzUlXSc+TGl2ZTwvdGQ+ICovfVxuICAgICAgICAgICAgICAgICAgICA8VHdDZWxsU2MgY2xhc3NOYW1lPSd3LVsxMCVdIHRleHQtZGFyay10ZXh0Jz5EcmF3PC9Ud0NlbGxTYz5cbiAgICAgICAgICAgICAgICAgICAge2NoYW5nZS5jbG9zZSA/IChcbiAgICAgICAgICAgICAgICAgICAgICA8VHdDZWxsU2MgY2xhc3NOYW1lPSd3LVs3NSVdIHRleHQtZGFyay1sb3NzJz5cbiAgICAgICAgICAgICAgICAgICAgICAgIMSQw7NuZ1xuICAgICAgICAgICAgICAgICAgICAgIDwvVHdDZWxsU2M+XG4gICAgICAgICAgICAgICAgICAgICkgOiAoXG4gICAgICAgICAgICAgICAgICAgICAgPD5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxUd09kZHNDZWxsU2MgY2xhc3NOYW1lPSd3LVs3JV0nPlxuICAgICAgICAgICAgICAgICAgICAgICAgICA8T2Rkc0NlbGxTY1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjb3JlPScwOjAnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb2Rkcz17b2Rkcy5kMX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmV2T2Rkcz17cHJldi5kMX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgPjwvT2Rkc0NlbGxTYz5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvVHdPZGRzQ2VsbFNjPlxuICAgICAgICAgICAgICAgICAgICAgICAgPFR3T2Rkc0NlbGxTYyBjbGFzc05hbWU9J3ctWzclXSc+XG4gICAgICAgICAgICAgICAgICAgICAgICAgIDxPZGRzQ2VsbFNjXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2NvcmU9JzE6MSdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvZGRzPXtvZGRzLmQyfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByZXZPZGRzPXtwcmV2LmQyfVxuICAgICAgICAgICAgICAgICAgICAgICAgICA+PC9PZGRzQ2VsbFNjPlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9Ud09kZHNDZWxsU2M+XG4gICAgICAgICAgICAgICAgICAgICAgICA8VHdPZGRzQ2VsbFNjIGNsYXNzTmFtZT0ndy1bNyVdJz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgPE9kZHNDZWxsU2NcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY29yZT0nMjoyJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9kZHM9e29kZHMuZDN9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJldk9kZHM9e3ByZXYuZDN9XG4gICAgICAgICAgICAgICAgICAgICAgICAgID48L09kZHNDZWxsU2M+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L1R3T2Rkc0NlbGxTYz5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxUd09kZHNDZWxsU2MgY2xhc3NOYW1lPSd3LVs3JV0nPlxuICAgICAgICAgICAgICAgICAgICAgICAgICA8T2Rkc0NlbGxTY1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjb3JlPSczOjMnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb2Rkcz17b2Rkcy5kNH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmV2T2Rkcz17cHJldi5kNH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgPjwvT2Rkc0NlbGxTYz5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvVHdPZGRzQ2VsbFNjPlxuICAgICAgICAgICAgICAgICAgICAgICAgPFR3T2Rkc0NlbGxTYyBjbGFzc05hbWU9J3ctWzclXSc+XG4gICAgICAgICAgICAgICAgICAgICAgICAgIDxPZGRzQ2VsbFNjXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2NvcmU9JzQ6NCdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvZGRzPXtvZGRzLmQ1fVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByZXZPZGRzPXtwcmV2LmQ1fVxuICAgICAgICAgICAgICAgICAgICAgICAgICA+PC9PZGRzQ2VsbFNjPlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9Ud09kZHNDZWxsU2M+XG4gICAgICAgICAgICAgICAgICAgICAgICA8VHdPZGRzQ2VsbFNjIGNsYXNzTmFtZT0ndy1bNyVdJz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgPE9kZHNDZWxsU2NcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY29yZT0nT3RoZXInXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb2Rkcz17b2Rkcy5vfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByZXZPZGRzPXtwcmV2Lm99XG4gICAgICAgICAgICAgICAgICAgICAgICAgID48L09kZHNDZWxsU2M+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L1R3T2Rkc0NlbGxTYz5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxUd09kZHNDZWxsU2MgY2xhc3NOYW1lPSd3LVs3JV0nPjwvVHdPZGRzQ2VsbFNjPlxuICAgICAgICAgICAgICAgICAgICAgICAgPFR3T2Rkc0NlbGxTYyBjbGFzc05hbWU9J3ctWzclXSc+PC9Ud09kZHNDZWxsU2M+XG4gICAgICAgICAgICAgICAgICAgICAgICA8VHdPZGRzQ2VsbFNjIGNsYXNzTmFtZT0ndy1bNyVdJz48L1R3T2Rkc0NlbGxTYz5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxUd09kZHNDZWxsU2MgY2xhc3NOYW1lPSd3LVs3JV0nPjwvVHdPZGRzQ2VsbFNjPlxuICAgICAgICAgICAgICAgICAgICAgIDwvPlxuICAgICAgICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgICAgICAgPC9Ud1Jvd1NjPlxuXG4gICAgICAgICAgICAgICAgICA8VHdSb3dTY1xuICAgICAgICAgICAgICAgICAgICBrZXk9e2Ake2lkeH0tY2B9XG4gICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT0nZGl2aWRlLWxpc3QteCBoLTEwIHctZnVsbCdcbiAgICAgICAgICAgICAgICAgICAgY3NzPXtbXG4gICAgICAgICAgICAgICAgICAgICAgaWR4ICUgMiA9PT0gMSAmJiB0d2BiZy1saWdodC1tYXRjaCBkYXJrOmJnLWRhcmstbWF0Y2hgLFxuICAgICAgICAgICAgICAgICAgICBdfVxuICAgICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICB7LyogPHRkIGNsYXNzTmFtZT0ndy1bNSVdJz5MaXZlPC90ZD4gKi99XG4gICAgICAgICAgICAgICAgICAgIDxUd0NlbGxTYyBjbGFzc05hbWU9J3ctWzEwJV0gdGV4dC1sb2dvLXllbGxvdyc+XG4gICAgICAgICAgICAgICAgICAgICAgQXdheVxuICAgICAgICAgICAgICAgICAgICA8L1R3Q2VsbFNjPlxuICAgICAgICAgICAgICAgICAgICB7Y2hhbmdlLmNsb3NlID8gKFxuICAgICAgICAgICAgICAgICAgICAgIDxUd0NlbGxTYyBjbGFzc05hbWU9J3ctWzc1JV0gdGV4dC1kYXJrLWxvc3MnPlxuICAgICAgICAgICAgICAgICAgICAgICAgxJDDs25nXG4gICAgICAgICAgICAgICAgICAgICAgPC9Ud0NlbGxTYz5cbiAgICAgICAgICAgICAgICAgICAgKSA6IChcbiAgICAgICAgICAgICAgICAgICAgICA8PlxuICAgICAgICAgICAgICAgICAgICAgICAgPFR3T2Rkc0NlbGxTYyBjbGFzc05hbWU9J3ctWzclXSc+XG4gICAgICAgICAgICAgICAgICAgICAgICAgIDxPZGRzQ2VsbFNjXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2NvcmU9JzA6MSdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvZGRzPXtvZGRzLmExfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNpZGU9ezJ9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJldk9kZHM9e3ByZXYuYTF9XG4gICAgICAgICAgICAgICAgICAgICAgICAgID48L09kZHNDZWxsU2M+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L1R3T2Rkc0NlbGxTYz5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxUd09kZHNDZWxsU2MgY2xhc3NOYW1lPSd3LVs3JV0nPlxuICAgICAgICAgICAgICAgICAgICAgICAgICA8T2Rkc0NlbGxTY1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjb3JlPScwOjInXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb2Rkcz17b2Rkcy5hMn1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaWRlPXsyfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByZXZPZGRzPXtwcmV2LmEyfVxuICAgICAgICAgICAgICAgICAgICAgICAgICA+PC9PZGRzQ2VsbFNjPlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9Ud09kZHNDZWxsU2M+XG4gICAgICAgICAgICAgICAgICAgICAgICA8VHdPZGRzQ2VsbFNjIGNsYXNzTmFtZT0ndy1bNyVdJz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgPE9kZHNDZWxsU2NcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY29yZT0nMToyJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9kZHM9e29kZHMuYTN9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2lkZT17Mn1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmV2T2Rkcz17cHJldi5hM31cbiAgICAgICAgICAgICAgICAgICAgICAgICAgPjwvT2Rkc0NlbGxTYz5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvVHdPZGRzQ2VsbFNjPlxuICAgICAgICAgICAgICAgICAgICAgICAgPFR3T2Rkc0NlbGxTYyBjbGFzc05hbWU9J3ctWzclXSc+XG4gICAgICAgICAgICAgICAgICAgICAgICAgIDxPZGRzQ2VsbFNjXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2NvcmU9JzA6MydcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvZGRzPXtvZGRzLmE0fVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNpZGU9ezJ9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJldk9kZHM9e3ByZXYuYTR9XG4gICAgICAgICAgICAgICAgICAgICAgICAgID48L09kZHNDZWxsU2M+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L1R3T2Rkc0NlbGxTYz5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxUd09kZHNDZWxsU2MgY2xhc3NOYW1lPSd3LVs3JV0nPlxuICAgICAgICAgICAgICAgICAgICAgICAgICA8T2Rkc0NlbGxTY1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjb3JlPScxOjMnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb2Rkcz17b2Rkcy5hNX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaWRlPXsyfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByZXZPZGRzPXtwcmV2LmE1fVxuICAgICAgICAgICAgICAgICAgICAgICAgICA+PC9PZGRzQ2VsbFNjPlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9Ud09kZHNDZWxsU2M+XG4gICAgICAgICAgICAgICAgICAgICAgICA8VHdPZGRzQ2VsbFNjIGNsYXNzTmFtZT0ndy1bNyVdJz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgPE9kZHNDZWxsU2NcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY29yZT0nMjozJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9kZHM9e29kZHMuYTZ9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2lkZT17Mn1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmV2T2Rkcz17cHJldi5hNn1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgPjwvT2Rkc0NlbGxTYz5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvVHdPZGRzQ2VsbFNjPlxuICAgICAgICAgICAgICAgICAgICAgICAgPFR3T2Rkc0NlbGxTYyBjbGFzc05hbWU9J3ctWzclXSc+XG4gICAgICAgICAgICAgICAgICAgICAgICAgIDxPZGRzQ2VsbFNjXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2NvcmU9JzA6NCdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvZGRzPXtvZGRzLmE3fVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNpZGU9ezJ9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJldk9kZHM9e3ByZXYuYTd9XG4gICAgICAgICAgICAgICAgICAgICAgICAgID48L09kZHNDZWxsU2M+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L1R3T2Rkc0NlbGxTYz5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxUd09kZHNDZWxsU2MgY2xhc3NOYW1lPSd3LVs3JV0nPlxuICAgICAgICAgICAgICAgICAgICAgICAgICA8T2Rkc0NlbGxTY1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjb3JlPScxOjQnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb2Rkcz17b2Rkcy5hOH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaWRlPXsyfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByZXZPZGRzPXtwcmV2LmE4fVxuICAgICAgICAgICAgICAgICAgICAgICAgICA+PC9PZGRzQ2VsbFNjPlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9Ud09kZHNDZWxsU2M+XG4gICAgICAgICAgICAgICAgICAgICAgICA8VHdPZGRzQ2VsbFNjIGNsYXNzTmFtZT0ndy1bNyVdJz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgPE9kZHNDZWxsU2NcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY29yZT0nMjo0J1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9kZHM9e29kZHMuYTl9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2lkZT17Mn1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmV2T2Rkcz17cHJldi5hOX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgPjwvT2Rkc0NlbGxTYz5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvVHdPZGRzQ2VsbFNjPlxuICAgICAgICAgICAgICAgICAgICAgICAgPFR3T2Rkc0NlbGxTYyBjbGFzc05hbWU9J3ctWzclXSc+XG4gICAgICAgICAgICAgICAgICAgICAgICAgIDxPZGRzQ2VsbFNjXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2NvcmU9JzM6NCdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvZGRzPXtvZGRzLmExMH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaWRlPXsyfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByZXZPZGRzPXtwcmV2LmExMH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgPjwvT2Rkc0NlbGxTYz5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvVHdPZGRzQ2VsbFNjPlxuICAgICAgICAgICAgICAgICAgICAgIDwvPlxuICAgICAgICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgICAgICAgPC9Ud1Jvd1NjPlxuICAgICAgICAgICAgICAgIDwvPlxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfSl9XG4gICAgICAgICAgPC90Ym9keT5cbiAgICAgICAgPC90YWJsZT5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICApO1xufTtcblxuY29uc3QgVHdDZWxsU2MgPSB0dy50ZGBgO1xuY29uc3QgVHdPZGRzQ2VsbFNjID0gdHcudGRgdGV4dC1zbWA7XG5jb25zdCBUd1Jvd1NjID0gdHcudHJgYDtcblxuY29uc3QgT2Rkc0NlbGxTYyA9ICh7XG4gIHNjb3JlLFxuICBvZGRzLFxuICBzaWRlLFxuICBwcmV2T2Rkcyxcbn06IHtcbiAgc2NvcmU6IHN0cmluZztcbiAgb2RkczogbnVtYmVyO1xuICBzaWRlPzogbnVtYmVyO1xuICBwcmV2T2RkczogbnVtYmVyO1xufSkgPT4ge1xuICByZXR1cm4gKFxuICAgIDxkaXYgY2xhc3NOYW1lPSdoLWZ1bGwgcHktMC41Jz5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPSd0ZXh0LWN4cyB0ZXh0LWRhcmstdGV4dCc+e3Njb3JlfTwvZGl2PlxuICAgICAgPGRpdiBjbGFzc05hbWU9J2Rhcms6dGV4dC1kYXJrLWRlZmF1bHQnPlxuICAgICAgICA8c3BhblxuICAgICAgICAgIGNzcz17W1xuICAgICAgICAgICAgcHJldk9kZHMgJiYgcHJldk9kZHMgPiBvZGRzICYmIHR3YHRleHQtcmVkLTYwMGAsXG4gICAgICAgICAgICBwcmV2T2RkcyAmJiBwcmV2T2RkcyA8IG9kZHMgJiYgdHdgdGV4dC1kYXJrLXdpbmAsXG4gICAgICAgICAgXX1cbiAgICAgICAgPlxuICAgICAgICAgIHtvZGRzfVxuICAgICAgICA8L3NwYW4+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgKTtcbn07XG5cbmNvbnN0IENvcm5lclR4Um93ID0gKCkgPT4ge1xuICByZXR1cm4gKFxuICAgIDx0ciBjbGFzc05hbWU9J2RpdmlkZS1saXN0LXggaC05IHctZnVsbCc+XG4gICAgICA8dGQgY2xhc3NOYW1lPSd3LVsyMCVdJz5UaW1lPC90ZD5cbiAgICAgIDx0ZCBjbGFzc05hbWU9J3ctWzE1JV0nPkNvcm5lcjwvdGQ+XG4gICAgICA8dGQgY2xhc3NOYW1lPSd3LVsxNSVdJz5PdmVyPC90ZD5cbiAgICAgIDx0ZCBjbGFzc05hbWU9J3ctWzE1JV0nPkdvYWxzPC90ZD5cbiAgICAgIDx0ZCBjbGFzc05hbWU9J3ctWzIwJV0nPlVuZGVyPC90ZD5cbiAgICAgIDx0ZCBjbGFzc05hbWU9J3ctWzIwJV0nPlVwZGF0ZTwvdGQ+XG4gICAgPC90cj5cbiAgKTtcbn07XG4iXX0= */\"\n                                                ],\n                                                \"data-tw\": \"text-dark-win | text-dark-loss\",\n                                                children: [\n                                                    (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(\"span\", {\n                                                        children: (0,_utils__WEBPACK_IMPORTED_MODULE_7__.convertOdds)(change.odds?.s, market, oddsType, 2)\n                                                    }),\n                                                    (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsxs)(\"span\", {\n                                                        className: \"text-xxs\",\n                                                        children: [\n                                                            change.st === -1 && (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(_public_svg_odd_down_svg__WEBPACK_IMPORTED_MODULE_8__[\"default\"], {}),\n                                                            change.st === 1 && (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(_public_svg_odd_up_svg__WEBPACK_IMPORTED_MODULE_9__[\"default\"], {})\n                                                        ]\n                                                    })\n                                                ]\n                                            })\n                                        }),\n                                        (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(\"td\", {\n                                            className: \"w-[15%]\",\n                                            children: (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsxs)(\"div\", {\n                                                className: \"mx-auto flex w-24 items-center justify-center gap-1\",\n                                                css: [\n                                                    change.tt === 1 && {\n                                                        \"--tw-text-opacity\": \"1\",\n                                                        \"color\": \"rgb(46 167 111 / var(--tw-text-opacity, 1))\"\n                                                    },\n                                                    change.tt === -1 && {\n                                                        \"--tw-text-opacity\": \"1\",\n                                                        \"color\": \"rgb(202 33 0 / var(--tw-text-opacity, 1))\"\n                                                    },\n                                                     false ? 0 : \";label:Odds3in1ChangesTable;\",\n                                                     false ? 0 : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"\n                                                ],\n                                                \"data-tw\": \"text-dark-win | text-dark-loss\",\n                                                children: [\n                                                    (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(\"span\", {\n                                                        children: (0,_utils__WEBPACK_IMPORTED_MODULE_7__.convertOdds)(change.odds?.t, market, oddsType, 3)\n                                                    }),\n                                                    (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsxs)(\"span\", {\n                                                        className: \"text-xxs\",\n                                                        children: [\n                                                            change.tt === -1 && (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(_public_svg_odd_down_svg__WEBPACK_IMPORTED_MODULE_8__[\"default\"], {}),\n                                                            change.tt === 1 && (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(_public_svg_odd_up_svg__WEBPACK_IMPORTED_MODULE_9__[\"default\"], {})\n                                                        ]\n                                                    })\n                                                ]\n                                            })\n                                        })\n                                    ]\n                                }),\n                                (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(\"td\", {\n                                    className: \"w-1/4\",\n                                    children: (0,_barrel_optimize_names_format_date_fns__WEBPACK_IMPORTED_MODULE_12__.format)(new Date(change.ct * 1000), \"dd/MM HH:mm\")\n                                })\n                            ]\n                        }, index);\n                    })\n                })\n            })\n        })\n    });\n};\nconst ScoreOddsChangesTable = ({ bookMaker, market, matchId, half })=>{\n    // const { oddsType } = useOddsStore();\n    const { data, isFetching } = (0,_hooks_useFootball_useOddsData__WEBPACK_IMPORTED_MODULE_2__.useMatchOddsChangeData)(matchId, bookMaker?.id, market, half);\n    if (isFetching) {\n        return (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(\"div\", {\n            className: \"h-[59vh]\",\n            children: \"Loading...\"\n        });\n    }\n    const oddsList = data?.oddsList || [];\n    const shownList = oddsList.map((change, idx)=>{\n        const prevChange = oddsList[idx - 1] || {};\n        const prev = prevChange?.odds || {};\n        return {\n            ...change,\n            prev: prev\n        };\n    }).reverse();\n    return (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(\"div\", {\n        className: \"\",\n        children: (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(\"div\", {\n            className: \"h-[55vh] overflow-y-auto text-sm scrollbar\",\n            children: (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(\"table\", {\n                className: \"min-w-full  border-collapse text-center\",\n                children: (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(\"tbody\", {\n                    className: \"divide-list max-h-[45vh] w-full\",\n                    children: shownList.map((change, idx)=>{\n                        const odds = change.odds || {};\n                        const prev = change.prev || {};\n                        return (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsxs)(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.Fragment, {\n                            children: [\n                                (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsxs)(TwRowSc, {\n                                    className: \"divide-list-x h-11 w-full\",\n                                    css: [\n                                        idx % 2 === 1 && {\n                                            \"--tw-bg-opacity\": \"1\",\n                                            \"backgroundColor\": \"rgb(242 246 249 / var(--tw-bg-opacity, 1))\",\n                                            \":is(.dark *)\": {\n                                                \"--tw-bg-opacity\": \"1\",\n                                                \"backgroundColor\": \"rgb(27 27 27 / var(--tw-bg-opacity, 1))\"\n                                            }\n                                        },\n                                         false ? 0 : \";label:ScoreOddsChangesTable;\",\n                                         false ? 0 : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"\n                                    ],\n                                    \"data-tw\": \"bg-light-match dark:bg-dark-match\",\n                                    children: [\n                                        (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(TwCellSc, {\n                                            className: \"w-[8%]\",\n                                            rowSpan: 3,\n                                            children: \"Live\"\n                                        }),\n                                        (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(TwCellSc, {\n                                            className: \"w-[10%] text-logo-blue\",\n                                            children: \"Home\"\n                                        }),\n                                        change.close ? (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.Fragment, {\n                                            children: (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(TwCellSc, {\n                                                className: \"w-[7%] text-dark-loss\",\n                                                colSpan: 10,\n                                                children: \"Đ\\xf3ng\"\n                                            })\n                                        }) : (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsxs)(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.Fragment, {\n                                            children: [\n                                                (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(TwOddsCellSc, {\n                                                    className: \"w-[7%]\",\n                                                    children: (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(OddsCellSc, {\n                                                        score: \"1:0\",\n                                                        odds: odds.h1,\n                                                        prevOdds: prev.h1,\n                                                        side: 1\n                                                    })\n                                                }),\n                                                (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(TwOddsCellSc, {\n                                                    className: \"w-[7%]\",\n                                                    children: (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(OddsCellSc, {\n                                                        score: \"2:0\",\n                                                        odds: odds.h2,\n                                                        side: 1,\n                                                        prevOdds: prev.h2\n                                                    })\n                                                }),\n                                                (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(TwOddsCellSc, {\n                                                    className: \"w-[7%]\",\n                                                    children: (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(OddsCellSc, {\n                                                        score: \"2:1\",\n                                                        odds: odds.h3,\n                                                        side: 1,\n                                                        prevOdds: prev.h3\n                                                    })\n                                                }),\n                                                (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(TwOddsCellSc, {\n                                                    className: \"w-[7%]\",\n                                                    children: (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(OddsCellSc, {\n                                                        score: \"3:0\",\n                                                        odds: odds.h4,\n                                                        side: 1,\n                                                        prevOdds: prev.h4\n                                                    })\n                                                }),\n                                                (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(TwOddsCellSc, {\n                                                    className: \"w-[7%]\",\n                                                    children: (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(OddsCellSc, {\n                                                        score: \"3:1\",\n                                                        odds: odds.h5,\n                                                        side: 1,\n                                                        prevOdds: prev.h5\n                                                    })\n                                                }),\n                                                (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(TwOddsCellSc, {\n                                                    className: \"w-[7%]\",\n                                                    children: (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(OddsCellSc, {\n                                                        score: \"3:2\",\n                                                        odds: odds.h6,\n                                                        side: 1,\n                                                        prevOdds: prev.h6\n                                                    })\n                                                }),\n                                                (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(TwOddsCellSc, {\n                                                    className: \"w-[7%]\",\n                                                    children: (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(OddsCellSc, {\n                                                        score: \"4:0\",\n                                                        odds: odds.h7,\n                                                        side: 1,\n                                                        prevOdds: prev.h7\n                                                    })\n                                                }),\n                                                (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(TwOddsCellSc, {\n                                                    className: \"w-[7%]\",\n                                                    children: (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(OddsCellSc, {\n                                                        score: \"4:1\",\n                                                        odds: odds.h8,\n                                                        side: 1,\n                                                        prevOdds: prev.h8\n                                                    })\n                                                }),\n                                                (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(TwOddsCellSc, {\n                                                    className: \"w-[7%]\",\n                                                    children: (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(OddsCellSc, {\n                                                        score: \"4:2\",\n                                                        odds: odds.h9,\n                                                        side: 1,\n                                                        prevOdds: prev.h9\n                                                    })\n                                                }),\n                                                (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(TwOddsCellSc, {\n                                                    className: \"w-[7%]\",\n                                                    children: (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(OddsCellSc, {\n                                                        score: \"4:3\",\n                                                        odds: odds.h10,\n                                                        side: 1,\n                                                        prevOdds: prev.h10\n                                                    })\n                                                })\n                                            ]\n                                        }),\n                                        (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(TwCellSc, {\n                                            className: \"w-1/4\",\n                                            rowSpan: 3,\n                                            children: (0,_barrel_optimize_names_format_date_fns__WEBPACK_IMPORTED_MODULE_12__.format)(new Date(change.ct * 1000), \"dd/MM HH:mm\")\n                                        })\n                                    ]\n                                }, `${idx}-a`),\n                                (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsxs)(TwRowSc, {\n                                    className: \"divide-list-x h-10 w-full\",\n                                    css: [\n                                        idx % 2 === 1 && {\n                                            \"--tw-bg-opacity\": \"1\",\n                                            \"backgroundColor\": \"rgb(242 246 249 / var(--tw-bg-opacity, 1))\",\n                                            \":is(.dark *)\": {\n                                                \"--tw-bg-opacity\": \"1\",\n                                                \"backgroundColor\": \"rgb(27 27 27 / var(--tw-bg-opacity, 1))\"\n                                            }\n                                        },\n                                         false ? 0 : \";label:ScoreOddsChangesTable;\",\n                                         false ? 0 : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"\n                                    ],\n                                    \"data-tw\": \"bg-light-match dark:bg-dark-match\",\n                                    children: [\n                                        (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(TwCellSc, {\n                                            className: \"w-[10%] text-dark-text\",\n                                            children: \"Draw\"\n                                        }),\n                                        change.close ? (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(TwCellSc, {\n                                            className: \"w-[75%] text-dark-loss\",\n                                            children: \"Đ\\xf3ng\"\n                                        }) : (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsxs)(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.Fragment, {\n                                            children: [\n                                                (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(TwOddsCellSc, {\n                                                    className: \"w-[7%]\",\n                                                    children: (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(OddsCellSc, {\n                                                        score: \"0:0\",\n                                                        odds: odds.d1,\n                                                        prevOdds: prev.d1\n                                                    })\n                                                }),\n                                                (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(TwOddsCellSc, {\n                                                    className: \"w-[7%]\",\n                                                    children: (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(OddsCellSc, {\n                                                        score: \"1:1\",\n                                                        odds: odds.d2,\n                                                        prevOdds: prev.d2\n                                                    })\n                                                }),\n                                                (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(TwOddsCellSc, {\n                                                    className: \"w-[7%]\",\n                                                    children: (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(OddsCellSc, {\n                                                        score: \"2:2\",\n                                                        odds: odds.d3,\n                                                        prevOdds: prev.d3\n                                                    })\n                                                }),\n                                                (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(TwOddsCellSc, {\n                                                    className: \"w-[7%]\",\n                                                    children: (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(OddsCellSc, {\n                                                        score: \"3:3\",\n                                                        odds: odds.d4,\n                                                        prevOdds: prev.d4\n                                                    })\n                                                }),\n                                                (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(TwOddsCellSc, {\n                                                    className: \"w-[7%]\",\n                                                    children: (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(OddsCellSc, {\n                                                        score: \"4:4\",\n                                                        odds: odds.d5,\n                                                        prevOdds: prev.d5\n                                                    })\n                                                }),\n                                                (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(TwOddsCellSc, {\n                                                    className: \"w-[7%]\",\n                                                    children: (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(OddsCellSc, {\n                                                        score: \"Other\",\n                                                        odds: odds.o,\n                                                        prevOdds: prev.o\n                                                    })\n                                                }),\n                                                (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(TwOddsCellSc, {\n                                                    className: \"w-[7%]\"\n                                                }),\n                                                (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(TwOddsCellSc, {\n                                                    className: \"w-[7%]\"\n                                                }),\n                                                (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(TwOddsCellSc, {\n                                                    className: \"w-[7%]\"\n                                                }),\n                                                (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(TwOddsCellSc, {\n                                                    className: \"w-[7%]\"\n                                                })\n                                            ]\n                                        })\n                                    ]\n                                }, `${idx}-b`),\n                                (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsxs)(TwRowSc, {\n                                    className: \"divide-list-x h-10 w-full\",\n                                    css: [\n                                        idx % 2 === 1 && {\n                                            \"--tw-bg-opacity\": \"1\",\n                                            \"backgroundColor\": \"rgb(242 246 249 / var(--tw-bg-opacity, 1))\",\n                                            \":is(.dark *)\": {\n                                                \"--tw-bg-opacity\": \"1\",\n                                                \"backgroundColor\": \"rgb(27 27 27 / var(--tw-bg-opacity, 1))\"\n                                            }\n                                        },\n                                         false ? 0 : \";label:ScoreOddsChangesTable;\",\n                                         false ? 0 : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"\n                                    ],\n                                    \"data-tw\": \"bg-light-match dark:bg-dark-match\",\n                                    children: [\n                                        (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(TwCellSc, {\n                                            className: \"w-[10%] text-logo-yellow\",\n                                            children: \"Away\"\n                                        }),\n                                        change.close ? (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(TwCellSc, {\n                                            className: \"w-[75%] text-dark-loss\",\n                                            children: \"Đ\\xf3ng\"\n                                        }) : (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsxs)(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.Fragment, {\n                                            children: [\n                                                (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(TwOddsCellSc, {\n                                                    className: \"w-[7%]\",\n                                                    children: (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(OddsCellSc, {\n                                                        score: \"0:1\",\n                                                        odds: odds.a1,\n                                                        side: 2,\n                                                        prevOdds: prev.a1\n                                                    })\n                                                }),\n                                                (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(TwOddsCellSc, {\n                                                    className: \"w-[7%]\",\n                                                    children: (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(OddsCellSc, {\n                                                        score: \"0:2\",\n                                                        odds: odds.a2,\n                                                        side: 2,\n                                                        prevOdds: prev.a2\n                                                    })\n                                                }),\n                                                (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(TwOddsCellSc, {\n                                                    className: \"w-[7%]\",\n                                                    children: (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(OddsCellSc, {\n                                                        score: \"1:2\",\n                                                        odds: odds.a3,\n                                                        side: 2,\n                                                        prevOdds: prev.a3\n                                                    })\n                                                }),\n                                                (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(TwOddsCellSc, {\n                                                    className: \"w-[7%]\",\n                                                    children: (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(OddsCellSc, {\n                                                        score: \"0:3\",\n                                                        odds: odds.a4,\n                                                        side: 2,\n                                                        prevOdds: prev.a4\n                                                    })\n                                                }),\n                                                (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(TwOddsCellSc, {\n                                                    className: \"w-[7%]\",\n                                                    children: (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(OddsCellSc, {\n                                                        score: \"1:3\",\n                                                        odds: odds.a5,\n                                                        side: 2,\n                                                        prevOdds: prev.a5\n                                                    })\n                                                }),\n                                                (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(TwOddsCellSc, {\n                                                    className: \"w-[7%]\",\n                                                    children: (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(OddsCellSc, {\n                                                        score: \"2:3\",\n                                                        odds: odds.a6,\n                                                        side: 2,\n                                                        prevOdds: prev.a6\n                                                    })\n                                                }),\n                                                (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(TwOddsCellSc, {\n                                                    className: \"w-[7%]\",\n                                                    children: (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(OddsCellSc, {\n                                                        score: \"0:4\",\n                                                        odds: odds.a7,\n                                                        side: 2,\n                                                        prevOdds: prev.a7\n                                                    })\n                                                }),\n                                                (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(TwOddsCellSc, {\n                                                    className: \"w-[7%]\",\n                                                    children: (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(OddsCellSc, {\n                                                        score: \"1:4\",\n                                                        odds: odds.a8,\n                                                        side: 2,\n                                                        prevOdds: prev.a8\n                                                    })\n                                                }),\n                                                (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(TwOddsCellSc, {\n                                                    className: \"w-[7%]\",\n                                                    children: (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(OddsCellSc, {\n                                                        score: \"2:4\",\n                                                        odds: odds.a9,\n                                                        side: 2,\n                                                        prevOdds: prev.a9\n                                                    })\n                                                }),\n                                                (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(TwOddsCellSc, {\n                                                    className: \"w-[7%]\",\n                                                    children: (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(OddsCellSc, {\n                                                        score: \"3:4\",\n                                                        odds: odds.a10,\n                                                        side: 2,\n                                                        prevOdds: prev.a10\n                                                    })\n                                                })\n                                            ]\n                                        })\n                                    ]\n                                }, `${idx}-c`)\n                            ]\n                        });\n                    })\n                })\n            })\n        })\n    });\n};\nconst TwCellSc = /*#__PURE__*/ (0,_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"td\",  false ? 0 : {\n    target: \"e17esxtz2\",\n    label: \"TwCellSc\"\n})( false ? 0 : {\n    name: \"0\",\n    styles: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9ub2xhbi9Eb2N1bWVudHMvd3d3L2JsdWUtcGFwZXItYjk2OS9zcmMvY29tcG9uZW50cy9tb2R1bGVzL2Zvb3RiYWxsL29kZHMvT2Rkc0NoYW5nZU1vZGFsUVYudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQXV1QmlCIiwiZmlsZSI6Ii9Vc2Vycy9ub2xhbi9Eb2N1bWVudHMvd3d3L2JsdWUtcGFwZXItYjk2OS9zcmMvY29tcG9uZW50cy9tb2R1bGVzL2Zvb3RiYWxsL29kZHMvT2Rkc0NoYW5nZU1vZGFsUVYudHN4Iiwic291cmNlc0NvbnRlbnQiOlsiLyogZXNsaW50LWRpc2FibGUgQG5leHQvbmV4dC9uby1pbWctZWxlbWVudCAqL1xuaW1wb3J0IHsgRGlhbG9nLCBUcmFuc2l0aW9uIH0gZnJvbSAnQGhlYWRsZXNzdWkvcmVhY3QnO1xuaW1wb3J0IHsgZm9ybWF0IH0gZnJvbSAnZGF0ZS1mbnMnO1xuaW1wb3J0IFJlYWN0LCB7IEZyYWdtZW50LCB1c2VSZWYsIHVzZVN0YXRlIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHR3IGZyb20gJ3R3aW4ubWFjcm8nO1xuXG5pbXBvcnQgeyB1c2VNYXRjaE9kZHNDaGFuZ2VEYXRhIH0gZnJvbSAnQC9ob29rcy91c2VGb290YmFsbC91c2VPZGRzRGF0YSc7XG5cbmltcG9ydCB7IENvcm5lclR4T2Rkc0NoYW5nZXNUYWJsZSB9IGZyb20gJ0AvY29tcG9uZW50cy9tb2R1bGVzL2Zvb3RiYWxsL29kZHMvT2Rkc0NoYW5nZU1vZGFsJztcbmltcG9ydCB7IFBlcmlvZFN3aXRjaGVyIH0gZnJvbSAnQC9jb21wb25lbnRzL21vZHVsZXMvZm9vdGJhbGwvb2Rkcy9QZXJpb2RTd2l0Y2hlcic7XG5pbXBvcnQgeyBUd0ZpbHRlckJ0biB9IGZyb20gJ0AvY29tcG9uZW50cy9tb2R1bGVzL2Zvb3RiYWxsL3R3LWNvbXBvbmVudHMnO1xuXG5pbXBvcnQgeyB1c2VPZGRzUXZTdG9yZSwgdXNlT2Rkc1N0b3JlIH0gZnJvbSAnQC9zdG9yZXMnO1xuXG5pbXBvcnQgeyBjb252ZXJ0T2RkcywgaXNWYWxFbXB0eSB9IGZyb20gJ0AvdXRpbHMnO1xuXG5pbXBvcnQgT2RkRG93blNWRyBmcm9tICcvcHVibGljL3N2Zy9vZGQtZG93bi5zdmcnO1xuaW1wb3J0IE9kZFVwU1ZHIGZyb20gJy9wdWJsaWMvc3ZnL29kZC11cC5zdmcnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBPZGRzQ2hhbmdlc01vZGFsUVYoe1xuICBvcGVuLFxuICBzZXRPcGVuLFxuICBib29rTWFrZXIsXG4gIG1hdGNoSWQsXG4gIGhhbGYgPSAwLFxufToge1xuICBvcGVuOiBib29sZWFuO1xuICBzZXRPcGVuOiAoeDogYm9vbGVhbikgPT4gdm9pZDtcbiAgYm9va01ha2VyPzogYW55O1xuICBtYXRjaElkOiBzdHJpbmc7XG4gIGhhbGY/OiBudW1iZXI7XG59KSB7XG4gIGNvbnN0IGNhbmNlbEJ1dHRvblJlZiA9IHVzZVJlZihudWxsKTtcblxuICByZXR1cm4gKFxuICAgIDxUcmFuc2l0aW9uLlJvb3Qgc2hvdz17b3Blbn0gYXM9e0ZyYWdtZW50fT5cbiAgICAgIDxEaWFsb2dcbiAgICAgICAgYXM9J2RpdidcbiAgICAgICAgY2xhc3NOYW1lPSdyZWxhdGl2ZSB6LTUwIGxnOnotMTAnXG4gICAgICAgIGluaXRpYWxGb2N1cz17Y2FuY2VsQnV0dG9uUmVmfVxuICAgICAgICBvbkNsb3NlPXtzZXRPcGVufVxuICAgICAgPlxuICAgICAgICB7LyogPFRyYW5zaXRpb24uQ2hpbGRcbiAgICAgICAgICBhcz17RnJhZ21lbnR9XG4gICAgICAgICAgZW50ZXI9J2Vhc2Utb3V0IGR1cmF0aW9uLTMwMCdcbiAgICAgICAgICBlbnRlckZyb209J29wYWNpdHktMCdcbiAgICAgICAgICBlbnRlclRvPSdvcGFjaXR5LTEwMCdcbiAgICAgICAgICBsZWF2ZT0nZWFzZS1pbiBkdXJhdGlvbi0yMDAnXG4gICAgICAgICAgbGVhdmVGcm9tPSdvcGFjaXR5LTEwMCdcbiAgICAgICAgICBsZWF2ZVRvPSdvcGFjaXR5LTAnXG4gICAgICAgID5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0nZml4ZWQgaW5zZXQtMCB0cmFuc2l0aW9uLW9wYWNpdHknIC8+XG4gICAgICAgIDwvVHJhbnNpdGlvbi5DaGlsZD4gKi99XG5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9J2ZpeGVkIGluc2V0LTAgei01MCBvdmVyZmxvdy15LWF1dG8gc2Nyb2xsYmFyIGxnOnotMTAnPlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPSdmbGV4IG1pbi1oLWZ1bGwgaXRlbXMtZW5kIGp1c3RpZnktZW5kIGJnLXNsYXRlLTEwMCBiZy1vcGFjaXR5LTQwIHRleHQtY2VudGVyIGxnOml0ZW1zLWNlbnRlciBsZzpqdXN0aWZ5LWNlbnRlcic+XG4gICAgICAgICAgICA8VHJhbnNpdGlvbi5DaGlsZFxuICAgICAgICAgICAgICBhcz17RnJhZ21lbnR9XG4gICAgICAgICAgICAgIGVudGVyPSdlYXNlLW91dCBkdXJhdGlvbi0zMDAnXG4gICAgICAgICAgICAgIGVudGVyRnJvbT0nb3BhY2l0eS0wIHRyYW5zbGF0ZS15LTQgc206dHJhbnNsYXRlLXktMCBzbTpzY2FsZS05NSdcbiAgICAgICAgICAgICAgZW50ZXJUbz0nb3BhY2l0eS0xMDAgdHJhbnNsYXRlLXktMCBzbTpzY2FsZS0xMDAnXG4gICAgICAgICAgICAgIGxlYXZlPSdlYXNlLWluIGR1cmF0aW9uLTIwMCdcbiAgICAgICAgICAgICAgbGVhdmVGcm9tPSdvcGFjaXR5LTEwMCB0cmFuc2xhdGUteS0wIHNtOnNjYWxlLTEwMCdcbiAgICAgICAgICAgICAgbGVhdmVUbz0nb3BhY2l0eS0wIHRyYW5zbGF0ZS15LTQgc206dHJhbnNsYXRlLXktMCBzbTpzY2FsZS05NSdcbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgPERpYWxvZy5QYW5lbCBjbGFzc05hbWU9J3JlbGF0aXZlIHctZnVsbCB0cmFuc2Zvcm0gb3ZlcmZsb3ctaGlkZGVuIHJvdW5kZWQtbGcgYmctd2hpdGUgdGV4dC1saWdodC1ibGFjayAgc2hhZG93LXhsIHRyYW5zaXRpb24tYWxsIGRhcms6YmctbW9kYWwgZGFyazp0ZXh0LWRhcmstdGV4dCBzbTpteS04IGxnOnctWzUwdnddJz5cbiAgICAgICAgICAgICAgICA8T2Rkc0NoYW5nZXNDb21wb25lbnRUYWJsZVxuICAgICAgICAgICAgICAgICAgc2V0T3Blbj17c2V0T3Blbn1cbiAgICAgICAgICAgICAgICAgIGJvb2tNYWtlcj17Ym9va01ha2VyfVxuICAgICAgICAgICAgICAgICAgbWF0Y2hJZD17bWF0Y2hJZH1cbiAgICAgICAgICAgICAgICAgIHBlcmlvZD17aGFsZn1cbiAgICAgICAgICAgICAgICA+PC9PZGRzQ2hhbmdlc0NvbXBvbmVudFRhYmxlPlxuICAgICAgICAgICAgICA8L0RpYWxvZy5QYW5lbD5cbiAgICAgICAgICAgIDwvVHJhbnNpdGlvbi5DaGlsZD5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L0RpYWxvZz5cbiAgICA8L1RyYW5zaXRpb24uUm9vdD5cbiAgKTtcbn1cblxuY29uc3QgT2Rkc0NoYW5nZXNDb21wb25lbnRUYWJsZSA9ICh7XG4gIHNldE9wZW4sXG4gIGJvb2tNYWtlcixcbiAgbWF0Y2hJZCxcbiAgcGVyaW9kID0gMCxcbn06IHtcbiAgc2V0T3BlbjogKG9wZW46IGFueSkgPT4gdm9pZDtcbiAgYm9va01ha2VyOiBhbnk7XG4gIG1hdGNoSWQ6IHN0cmluZztcbiAgcGVyaW9kPzogbnVtYmVyO1xufSkgPT4ge1xuICBjb25zdCB7IG1hcmtldCwgc2hvd0RldGFpbE1vZGFsQ29ybmVyT1UsIHNob3dEZXRhaWxNb2RhbFNjb3JlIH0gPVxuICAgIHVzZU9kZHNRdlN0b3JlKCk7XG4gIGxldCBzaG93bk1hcmtldCA9IG1hcmtldDtcbiAgaWYgKHNob3dEZXRhaWxNb2RhbENvcm5lck9VKSB7XG4gICAgc2hvd25NYXJrZXQgPSAnY29ybmVyVHgnO1xuICB9IGVsc2UgaWYgKHNob3dEZXRhaWxNb2RhbFNjb3JlKSB7XG4gICAgc2hvd25NYXJrZXQgPSAnc2NvcmUnO1xuICB9XG5cbiAgLy8gY29uc3QgW21hcmtldCwgc2V0TWFya2V0XSA9IHVzZVN0YXRlPHN0cmluZz4oKCkgPT4ge1xuICAvLyAgIC8vIFRPRE8gYWRkIG1vcmUgbWFya2V0c1xuICAvLyAgIGlmICghWydoZHAnLCAnc3RkMXgyJywgJ3R4JywgJ3Njb3JlJywgJ2Nvcm5lclR4J10uaW5jbHVkZXMoY29tcGFyZVR5cGUpKSB7XG4gIC8vICAgICByZXR1cm4gJ2hkcCc7XG4gIC8vICAgfVxuICAvLyAgIHJldHVybiBjb21wYXJlVHlwZTtcbiAgLy8gfSk7XG4gIGNvbnN0IFtoYWxmLCBzZXRIYWxmXSA9IHVzZVN0YXRlPG51bWJlcj4ocGVyaW9kKTtcblxuICByZXR1cm4gKFxuICAgIDxkaXYgY2xhc3NOYW1lPScgZGl2aWRlLWxpc3QgJz5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPScgZmxleCBwbGFjZS1jb250ZW50LWNlbnRlciBpdGVtcy1jZW50ZXIgcm91bmRlZC10LWxnIHB5LTMgZm9udC1leHRyYWJvbGQgdGV4dC1ibGFjayBkYXJrOnRleHQtd2hpdGUnPlxuICAgICAgICB7Ym9va01ha2VyLm5hbWV9OiBPZGRzIGNoYW5nZXNcbiAgICAgIDwvZGl2PlxuXG4gICAgICB7LyogT2RkcyBjaGFuZ2VzIG1lbnUgKi99XG4gICAgICA8ZGl2IGNsYXNzTmFtZT0nZmxleCBpdGVtcy1jZW50ZXIganVzdGlmeS1lbmQgcC0yLjUnPlxuICAgICAgICB7LyogPGRpdiBjbGFzc05hbWU9J2ZsZXggZ2FwLTMnPlxuICAgICAgICAgIDxUd0ZpbHRlckJ0blxuICAgICAgICAgICAgb25DbGljaz17KCkgPT4gc2V0TWFya2V0KCdoZHAnKX1cbiAgICAgICAgICAgIGlzQWN0aXZlPXttYXJrZXQgPT09ICdoZHAnfVxuICAgICAgICAgID5cbiAgICAgICAgICAgIFThu7cgbOG7hyBjaMOidSDDgVxuICAgICAgICAgIDwvVHdGaWx0ZXJCdG4+XG4gICAgICAgICAgPFR3RmlsdGVyQnRuXG4gICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiBzZXRNYXJrZXQoJ3R4Jyl9XG4gICAgICAgICAgICBpc0FjdGl2ZT17bWFya2V0ID09PSAndHgnfVxuICAgICAgICAgID5cbiAgICAgICAgICAgIFThu7cgbOG7hyB0w6BpIHjhu4l1XG4gICAgICAgICAgPC9Ud0ZpbHRlckJ0bj5cbiAgICAgICAgICA8VHdGaWx0ZXJCdG5cbiAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHNldE1hcmtldCgnc3RkMXgyJyl9XG4gICAgICAgICAgICBpc0FjdGl2ZT17bWFya2V0ID09PSAnc3RkMXgyJ31cbiAgICAgICAgICA+XG4gICAgICAgICAgICAxeDJcbiAgICAgICAgICA8L1R3RmlsdGVyQnRuPlxuXG4gICAgICAgICAgPFR3RmlsdGVyQnRuXG4gICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiBzZXRNYXJrZXQoJ2Nvcm5lclR4Jyl9XG4gICAgICAgICAgICBpc0FjdGl2ZT17bWFya2V0ID09PSAnY29ybmVyVHgnfVxuICAgICAgICAgID5cbiAgICAgICAgICAgIFBo4bqhdCBnw7NjIFQvWFxuICAgICAgICAgIDwvVHdGaWx0ZXJCdG4+XG5cbiAgICAgICAgICA8VHdGaWx0ZXJCdG5cbiAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHNldE1hcmtldCgnc2NvcmUnKX1cbiAgICAgICAgICAgIGlzQWN0aXZlPXttYXJrZXQgPT09ICdzY29yZSd9XG4gICAgICAgICAgPlxuICAgICAgICAgICAgVOG7tyBz4buRXG4gICAgICAgICAgPC9Ud0ZpbHRlckJ0bj5cbiAgICAgICAgPC9kaXY+ICovfVxuXG4gICAgICAgIDxQZXJpb2RTd2l0Y2hlclxuICAgICAgICAgIG9wdGlvbnM9e1tcbiAgICAgICAgICAgIHsgbmFtZTogJ0ZUJywgdmFsdWU6IDAgfSxcbiAgICAgICAgICAgIHsgbmFtZTogJ0hUJywgdmFsdWU6IDEgfSxcbiAgICAgICAgICBdfVxuICAgICAgICAgIHZhbEdldHRlcj17c2V0SGFsZn1cbiAgICAgICAgICBoYWxmPXtoYWxmfVxuICAgICAgICA+PC9QZXJpb2RTd2l0Y2hlcj5cbiAgICAgIDwvZGl2PlxuXG4gICAgICB7LyogT2RkcyBjaGFuZ2VzIGhlYWRlciBzZWN0aW9uICovfVxuICAgICAgPEhlYWRlclNlY3Rpb24gbWFya2V0PXtzaG93bk1hcmtldH0+PC9IZWFkZXJTZWN0aW9uPlxuXG4gICAgICB7LyogT2RkcyBjaGFuZ2VzIGRhdGEgc2VjdGlvbiAqL31cbiAgICAgIHtbJzNpbjEnLCAnaGRwJywgJ3R4JywgJ3N0ZDF4MiddLmluY2x1ZGVzKHNob3duTWFya2V0KSAmJiAoXG4gICAgICAgIDxPZGRzM2luMUNoYW5nZXNUYWJsZVxuICAgICAgICAgIGJvb2tNYWtlcj17Ym9va01ha2VyfVxuICAgICAgICAgIG1hcmtldD17c2hvd25NYXJrZXR9XG4gICAgICAgICAgbWF0Y2hJZD17bWF0Y2hJZH1cbiAgICAgICAgICBoYWxmPXtoYWxmfVxuICAgICAgICA+PC9PZGRzM2luMUNoYW5nZXNUYWJsZT5cbiAgICAgICl9XG4gICAgICB7c2hvd25NYXJrZXQgPT09ICdzY29yZScgJiYgKFxuICAgICAgICA8U2NvcmVPZGRzQ2hhbmdlc1RhYmxlXG4gICAgICAgICAgYm9va01ha2VyPXtib29rTWFrZXJ9XG4gICAgICAgICAgbWFya2V0PXtzaG93bk1hcmtldH1cbiAgICAgICAgICBtYXRjaElkPXttYXRjaElkfVxuICAgICAgICAgIGhhbGY9e2hhbGZ9XG4gICAgICAgID48L1Njb3JlT2Rkc0NoYW5nZXNUYWJsZT5cbiAgICAgICl9XG4gICAgICB7c2hvd25NYXJrZXQgPT09ICdjb3JuZXJUeCcgJiYgKFxuICAgICAgICA8Q29ybmVyVHhPZGRzQ2hhbmdlc1RhYmxlXG4gICAgICAgICAgYm9va01ha2VyPXtib29rTWFrZXJ9XG4gICAgICAgICAgbWFya2V0PXtzaG93bk1hcmtldH1cbiAgICAgICAgICBtYXRjaElkPXttYXRjaElkfVxuICAgICAgICAgIGhhbGY9e2hhbGZ9XG4gICAgICAgID48L0Nvcm5lclR4T2Rkc0NoYW5nZXNUYWJsZT5cbiAgICAgICl9XG5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPSdmbGV4IGp1c3RpZnktZW5kIHAtMic+XG4gICAgICAgIDxUd0ZpbHRlckJ0blxuICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHtcbiAgICAgICAgICAgIHNldE9wZW4oZmFsc2UpO1xuICAgICAgICAgIH19XG4gICAgICAgID5cbiAgICAgICAgICBDbG9zZVxuICAgICAgICA8L1R3RmlsdGVyQnRuPlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gICk7XG59O1xuXG5jb25zdCBIZWFkZXJTZWN0aW9uID0gKHsgbWFya2V0IH06IHsgbWFya2V0OiBhbnkgfSkgPT4ge1xuICByZXR1cm4gKFxuICAgIDx0YWJsZSBjbGFzc05hbWU9J3ctZnVsbCB0ZXh0LWNlbnRlciB0ZXh0LXNtJz5cbiAgICAgIDx0aGVhZCBjbGFzc05hbWU9J2JvcmRlciBib3JkZXItZGFyay10ZXh0LzIwIGJnLWxpZ2h0LW1hdGNoIGRhcms6YmctZGFyay1tYXRjaCc+XG4gICAgICAgIHtbJzNpbjEnLCAnaGRwJywgJ3R4JywgJ3N0ZDF4MiddLmluY2x1ZGVzKG1hcmtldCkgJiYgKFxuICAgICAgICAgIDx0ciBjbGFzc05hbWU9J2RpdmlkZS1saXN0LXggaC0xMCB3LWZ1bGwnPlxuICAgICAgICAgICAgPHRoIGNsYXNzTmFtZT0ndy1bMTUlXSc+VGltZTwvdGg+XG4gICAgICAgICAgICA8dGggY2xhc3NOYW1lPSd3LVsxNSVdJz5U4bu3IHPhu5E8L3RoPlxuICAgICAgICAgICAgPHRoIGNsYXNzTmFtZT0ndy1bMTUlXSc+e21hcmtldCA9PT0gJ3R4JyA/ICdUw6BpJyA6ICdDaOG7pyd9PC90aD5cbiAgICAgICAgICAgIDx0aCBjbGFzc05hbWU9J3ctWzE1JV0nPnttYXJrZXQgPT09ICd0eCcgPyAnS8OobycgOiAnSMOyYSd9PC90aD5cbiAgICAgICAgICAgIDx0aCBjbGFzc05hbWU9J3ctWzE1JV0nPnttYXJrZXQgPT09ICd0eCcgPyAnWOG7iXUnIDogJ0tow6FjaCd9PC90aD5cbiAgICAgICAgICAgIDx0aCBjbGFzc05hbWU9J3ctMS80Jz5D4bqtcCBuaOG6rXQ8L3RoPlxuICAgICAgICAgIDwvdHI+XG4gICAgICAgICl9XG4gICAgICAgIHttYXJrZXQgPT09ICdzY29yZScgJiYgKFxuICAgICAgICAgIDx0ciBjbGFzc05hbWU9J2RpdmlkZS1saXN0LXggaC0xMCB3LWZ1bGwnPlxuICAgICAgICAgICAgPHRoIGNsYXNzTmFtZT0ndy1bOCVdJz5UaW1lPC90aD5cbiAgICAgICAgICAgIDx0aCBjbGFzc05hbWU9J3ctWzEwJV0nPlRpbWU8L3RoPlxuICAgICAgICAgICAgPHRoIGNsYXNzTmFtZT0ndy1bNzAlXSc+T2RkczwvdGg+XG4gICAgICAgICAgICA8dGggY2xhc3NOYW1lPScnPkPhuq1wIG5o4bqtdDwvdGg+XG4gICAgICAgICAgPC90cj5cbiAgICAgICAgKX1cbiAgICAgICAge21hcmtldCA9PT0gJ2Nvcm5lclR4JyAmJiAoXG4gICAgICAgICAgPHRyIGNsYXNzTmFtZT0nZGl2aWRlLWxpc3QteCBoLTEwIHctZnVsbCc+XG4gICAgICAgICAgICA8dGggY2xhc3NOYW1lPSd3LVsyMCVdJz5UaW1lPC90aD5cbiAgICAgICAgICAgIDx0aCBjbGFzc05hbWU9J3ctWzE1JV0nPkNvcm5lcjwvdGg+XG4gICAgICAgICAgICA8dGggY2xhc3NOYW1lPSd3LVsxNSVdJz5PdmVyPC90aD5cbiAgICAgICAgICAgIDx0aCBjbGFzc05hbWU9J3ctWzE1JV0nPkdvYWxzPC90aD5cbiAgICAgICAgICAgIDx0aCBjbGFzc05hbWU9J3ctWzIwJV0nPlVuZGVyPC90aD5cbiAgICAgICAgICAgIDx0aCBjbGFzc05hbWU9J3ctWzIwJV0nPlVwZGF0ZTwvdGg+XG4gICAgICAgICAgPC90cj5cbiAgICAgICAgKX1cbiAgICAgIDwvdGhlYWQ+XG4gICAgPC90YWJsZT5cbiAgKTtcbn07XG5cbmNvbnN0IE9kZHMzaW4xQ2hhbmdlc1RhYmxlID0gKHtcbiAgYm9va01ha2VyLFxuICBtYXJrZXQsXG4gIG1hdGNoSWQsXG4gIGhhbGYsXG59OiB7XG4gIGJvb2tNYWtlcjogYW55O1xuICBtYXJrZXQ6IHN0cmluZztcbiAgbWF0Y2hJZDogc3RyaW5nO1xuICBoYWxmOiBudW1iZXI7XG59KSA9PiB7XG4gIGNvbnN0IHsgb2Rkc1R5cGUgfSA9IHVzZU9kZHNTdG9yZSgpO1xuICBjb25zdCB7IGRhdGEsIGlzRmV0Y2hpbmcgfSA9IHVzZU1hdGNoT2Rkc0NoYW5nZURhdGEoXG4gICAgbWF0Y2hJZCxcbiAgICBib29rTWFrZXI/LmlkLFxuICAgIG1hcmtldCxcbiAgICBoYWxmXG4gICk7XG5cbiAgaWYgKGlzRmV0Y2hpbmcpIHtcbiAgICByZXR1cm4gPGRpdiBjbGFzc05hbWU9J2gtWzU5dmhdJz5Mb2FkaW5nLi4uPC9kaXY+O1xuICB9XG5cbiAgY29uc3Qgb2Rkc0xpc3QgPSBkYXRhPy5vZGRzTGlzdCB8fCBbXTtcblxuICByZXR1cm4gKFxuICAgIDxkaXYgY2xhc3NOYW1lPScnPlxuICAgICAgey8qIDx0YWJsZSBjbGFzc05hbWU9J3ctZnVsbCB0ZXh0LWNlbnRlciB0ZXh0LXNtJz5cbiAgICAgICAgPHRoZWFkIGNsYXNzTmFtZT0nYm9yZGVyIGJvcmRlci1kYXJrLXRleHQvMjAgYmctbGlnaHQtbWF0Y2ggZGFyazpiZy1kYXJrLW1hdGNoJz5cbiAgICAgICAgICA8dHIgY2xhc3NOYW1lPSdkaXZpZGUtbGlzdC14IGgtMTAgdy1mdWxsJz5cbiAgICAgICAgICAgIDx0aCBjbGFzc05hbWU9J3ctWzE1JV0nPlRpbWU8L3RoPlxuICAgICAgICAgICAgPHRoIGNsYXNzTmFtZT0ndy1bMTUlXSc+VOG7tyBz4buRPC90aD5cbiAgICAgICAgICAgIDx0aCBjbGFzc05hbWU9J3ctWzE1JV0nPnttYXJrZXQgPT09ICd0eCcgPyAnVMOgaScgOiAnQ2jhu6cnfTwvdGg+XG4gICAgICAgICAgICA8dGggY2xhc3NOYW1lPSd3LVsxNSVdJz57bWFya2V0ID09PSAndHgnID8gJ0vDqG8nIDogJ0jDsmEnfTwvdGg+XG4gICAgICAgICAgICA8dGggY2xhc3NOYW1lPSd3LVsxNSVdJz57bWFya2V0ID09PSAndHgnID8gJ1jhu4l1JyA6ICdLaMOhY2gnfTwvdGg+XG4gICAgICAgICAgICA8dGggY2xhc3NOYW1lPSd3LTEvNCc+Q+G6rXAgbmjhuq10PC90aD5cbiAgICAgICAgICA8L3RyPlxuICAgICAgICA8L3RoZWFkPlxuICAgICAgPC90YWJsZT4gKi99XG4gICAgICA8ZGl2IGNsYXNzTmFtZT0naC1bNTV2aF0gb3ZlcmZsb3cteS1hdXRvIHRleHQtc20gc2Nyb2xsYmFyJz5cbiAgICAgICAgPHRhYmxlIGNsYXNzTmFtZT0nbWluLXctZnVsbCAgYm9yZGVyLWNvbGxhcHNlIHRleHQtY2VudGVyJz5cbiAgICAgICAgICA8dGJvZHkgY2xhc3NOYW1lPSdkaXZpZGUtbGlzdCBtYXgtaC1bNDV2aF0gdy1mdWxsJz5cbiAgICAgICAgICAgIHtvZGRzTGlzdC5tYXAoKGNoYW5nZTogYW55LCBpbmRleDogbnVtYmVyKSA9PiB7XG4gICAgICAgICAgICAgIGxldCBtYXRjaFRpbWUgPSAnJztcbiAgICAgICAgICAgICAgaWYgKGAke2NoYW5nZS50eXBlfWAgPT09ICcyJykge1xuICAgICAgICAgICAgICAgIG1hdGNoVGltZSA9ICdMaXZlJztcbiAgICAgICAgICAgICAgfSBlbHNlIGlmIChgJHtjaGFuZ2UudHlwZX1gID09PSAnSFQnKSB7XG4gICAgICAgICAgICAgICAgbWF0Y2hUaW1lID0gJ0hUJztcbiAgICAgICAgICAgICAgfSBlbHNlIGlmIChjaGFuZ2UubXQpIHtcbiAgICAgICAgICAgICAgICBtYXRjaFRpbWUgPSBgJHtjaGFuZ2UubXR9J2A7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBjb25zdCBzY29yZVRleHQgPSAhaXNWYWxFbXB0eShjaGFuZ2UuaHMpXG4gICAgICAgICAgICAgICAgPyBgJHtjaGFuZ2UuaHN9IC0gJHtjaGFuZ2UuYXN9YFxuICAgICAgICAgICAgICAgIDogJyc7XG5cbiAgICAgICAgICAgICAgLy8gY29uc3QgaXNTa2lwcGVkID1cbiAgICAgICAgICAgICAgLy8gICAoYCR7Y2hhbmdlLnR5cGV9YCA9PT0gJzMnICYmICFjaGFuZ2UubXQpIHx8XG4gICAgICAgICAgICAgIC8vICAgKGAke2NoYW5nZS50eXBlfWAgPT09ICcyJyAmJiBjaGFuZ2UuY2xvc2UpO1xuXG4gICAgICAgICAgICAgIC8vIGlmIChpc1NraXBwZWQpIHtcbiAgICAgICAgICAgICAgLy8gICByZXR1cm4gKFxuICAgICAgICAgICAgICAvLyAgICAgLy8gPHRyIGtleT17aW5kZXh9IGNsYXNzTmFtZT0naC04IHctZnVsbCc+XG4gICAgICAgICAgICAgIC8vICAgICAvLyAgIDx0ZCBjbGFzc05hbWU9J3ctWzE1JV0nPjwvdGQ+XG4gICAgICAgICAgICAgIC8vICAgICAvLyAgIDx0ZCBjbGFzc05hbWU9J3ctWzE1JV0nPjwvdGQ+XG4gICAgICAgICAgICAgIC8vICAgICAvLyAgIDx0ZCBjbGFzc05hbWU9J3ctWzE1JV0nPjwvdGQ+XG4gICAgICAgICAgICAgIC8vICAgICAvLyAgIDx0ZCBjbGFzc05hbWU9J3ctWzE1JV0nPjwvdGQ+XG4gICAgICAgICAgICAgIC8vICAgICAvLyAgIDx0ZCBjbGFzc05hbWU9J3ctWzE1JV0nPjwvdGQ+XG4gICAgICAgICAgICAgIC8vICAgICAvLyAgIDx0ZCBjbGFzc05hbWU9J3ctMS80Jz48L3RkPlxuICAgICAgICAgICAgICAvLyAgICAgLy8gPC90cj5cbiAgICAgICAgICAgICAgLy8gICAgIDw+PC8+XG4gICAgICAgICAgICAgIC8vICAgKTtcbiAgICAgICAgICAgICAgLy8gfVxuXG4gICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgPHRyXG4gICAgICAgICAgICAgICAgICBrZXk9e2luZGV4fVxuICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPSdkaXZpZGUtbGlzdC14IGgtOCB3LWZ1bGwnXG4gICAgICAgICAgICAgICAgICBjc3M9e1tcbiAgICAgICAgICAgICAgICAgICAgaW5kZXggJSAyID09PSAxICYmIHR3YGJnLWxpZ2h0LW1hdGNoIGRhcms6YmctZGFyay1tYXRjaGAsXG4gICAgICAgICAgICAgICAgICBdfVxuICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9J3ctWzE1JV0nPnttYXRjaFRpbWV9PC90ZD5cbiAgICAgICAgICAgICAgICAgIDx0ZFxuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9J3ctWzE1JV0nXG4gICAgICAgICAgICAgICAgICAgIGNzcz17W2NoYW5nZS5zYyAmJiB0d2BiZy1sb2dvLWJsdWUvMzBgXX1cbiAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAge3Njb3JlVGV4dH1cbiAgICAgICAgICAgICAgICAgIDwvdGQ+XG4gICAgICAgICAgICAgICAgICB7Y2hhbmdlLmNsb3NlID8gKFxuICAgICAgICAgICAgICAgICAgICA8dGQgY29sU3Bhbj17M30gY2xhc3NOYW1lPSd0ZXh0LWRhcmstbG9zcyc+XG4gICAgICAgICAgICAgICAgICAgICAgxJDDs25nXG4gICAgICAgICAgICAgICAgICAgIDwvdGQ+XG4gICAgICAgICAgICAgICAgICApIDogKFxuICAgICAgICAgICAgICAgICAgICA8PlxuICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9J3ctWzE1JV0nPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdlxuICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9J214LWF1dG8gZmxleCB3LTI0IHBsYWNlLWNvbnRlbnQtY2VudGVyIGl0ZW1zLWNlbnRlciAganVzdGlmeS1jZW50ZXIgZ2FwLTEnXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGNzcz17W1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoYW5nZS5mdCA9PT0gMSAmJiB0d2B0ZXh0LWRhcmstd2luYCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGFuZ2UuZnQgPT09IC0xICYmIHR3YHRleHQtZGFyay1sb3NzYCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgXX1cbiAgICAgICAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge2NvbnZlcnRPZGRzKGNoYW5nZS5vZGRzPy5mLCBtYXJrZXQsIG9kZHNUeXBlLCAxKX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9J3RleHQteHhzJz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7Y2hhbmdlLmZ0ID09PSAtMSAmJiA8T2RkRG93blNWRz48L09kZERvd25TVkc+fVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtjaGFuZ2UuZnQgPT09IDEgJiYgPE9kZFVwU1ZHPjwvT2RkVXBTVkc+fVxuICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxuICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9J3ctWzE1JV0nPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdlxuICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9J214LWF1dG8gZmxleCB3LTI0IGl0ZW1zLWNlbnRlciBqdXN0aWZ5LWNlbnRlciBnYXAtMSdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgY3NzPXtbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hhbmdlLnN0ID09PSAxICYmIHR3YHRleHQtZGFyay13aW5gLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoYW5nZS5zdCA9PT0gLTEgJiYgdHdgdGV4dC1kYXJrLWxvc3NgLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBdfVxuICAgICAgICAgICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7Y29udmVydE9kZHMoY2hhbmdlLm9kZHM/LnMsIG1hcmtldCwgb2Rkc1R5cGUsIDIpfVxuICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT0ndGV4dC14eHMnPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtjaGFuZ2Uuc3QgPT09IC0xICYmIDxPZGREb3duU1ZHPjwvT2RkRG93blNWRz59XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge2NoYW5nZS5zdCA9PT0gMSAmJiA8T2RkVXBTVkc+PC9PZGRVcFNWRz59XG4gICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XG4gICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT0ndy1bMTUlXSc+XG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT0nbXgtYXV0byBmbGV4IHctMjQgaXRlbXMtY2VudGVyIGp1c3RpZnktY2VudGVyIGdhcC0xJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICBjc3M9e1tcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGFuZ2UudHQgPT09IDEgJiYgdHdgdGV4dC1kYXJrLXdpbmAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hhbmdlLnR0ID09PSAtMSAmJiB0d2B0ZXh0LWRhcmstbG9zc2AsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIF19XG4gICAgICAgICAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtjb252ZXJ0T2RkcyhjaGFuZ2Uub2Rkcz8udCwgbWFya2V0LCBvZGRzVHlwZSwgMyl9XG4gICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPSd0ZXh0LXh4cyc+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge2NoYW5nZS50dCA9PT0gLTEgJiYgPE9kZERvd25TVkc+PC9PZGREb3duU1ZHPn1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7Y2hhbmdlLnR0ID09PSAxICYmIDxPZGRVcFNWRz48L09kZFVwU1ZHPn1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgPC90ZD5cbiAgICAgICAgICAgICAgICAgICAgPC8+XG4gICAgICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT0ndy0xLzQnPlxuICAgICAgICAgICAgICAgICAgICB7Zm9ybWF0KG5ldyBEYXRlKGNoYW5nZS5jdCAqIDEwMDApLCAnZGQvTU0gSEg6bW0nKX1cbiAgICAgICAgICAgICAgICAgIDwvdGQ+XG4gICAgICAgICAgICAgICAgPC90cj5cbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH0pfVxuICAgICAgICAgIDwvdGJvZHk+XG4gICAgICAgIDwvdGFibGU+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgKTtcbn07XG5cbmNvbnN0IFNjb3JlT2Rkc0NoYW5nZXNUYWJsZSA9ICh7XG4gIGJvb2tNYWtlcixcbiAgbWFya2V0LFxuICBtYXRjaElkLFxuICBoYWxmLFxufToge1xuICBib29rTWFrZXI6IGFueTtcbiAgbWFya2V0OiBzdHJpbmc7XG4gIG1hdGNoSWQ6IHN0cmluZztcbiAgaGFsZjogbnVtYmVyO1xufSkgPT4ge1xuICAvLyBjb25zdCB7IG9kZHNUeXBlIH0gPSB1c2VPZGRzU3RvcmUoKTtcbiAgY29uc3QgeyBkYXRhLCBpc0ZldGNoaW5nIH0gPSB1c2VNYXRjaE9kZHNDaGFuZ2VEYXRhKFxuICAgIG1hdGNoSWQsXG4gICAgYm9va01ha2VyPy5pZCxcbiAgICBtYXJrZXQsXG4gICAgaGFsZlxuICApO1xuXG4gIGlmIChpc0ZldGNoaW5nKSB7XG4gICAgcmV0dXJuIDxkaXYgY2xhc3NOYW1lPSdoLVs1OXZoXSc+TG9hZGluZy4uLjwvZGl2PjtcbiAgfVxuXG4gIGNvbnN0IG9kZHNMaXN0ID0gZGF0YT8ub2Rkc0xpc3QgfHwgW107XG4gIGNvbnN0IHNob3duTGlzdCA9IG9kZHNMaXN0XG4gICAgLm1hcCgoY2hhbmdlOiBhbnksIGlkeDogbnVtYmVyKSA9PiB7XG4gICAgICBjb25zdCBwcmV2Q2hhbmdlID0gb2Rkc0xpc3RbaWR4IC0gMV0gfHwge307XG4gICAgICBjb25zdCBwcmV2ID0gcHJldkNoYW5nZT8ub2RkcyB8fCB7fTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIC4uLmNoYW5nZSxcbiAgICAgICAgcHJldjogcHJldixcbiAgICAgIH07XG4gICAgfSlcbiAgICAucmV2ZXJzZSgpO1xuXG4gIHJldHVybiAoXG4gICAgPGRpdiBjbGFzc05hbWU9Jyc+XG4gICAgICB7LyogPHRhYmxlIGNsYXNzTmFtZT0ndy1mdWxsIHRleHQtY2VudGVyIHRleHQtc20nPlxuICAgICAgICA8dGhlYWQgY2xhc3NOYW1lPSdib3JkZXIgYm9yZGVyLWRhcmstdGV4dC8yMCBiZy1saWdodC1tYXRjaCBkYXJrOmJnLWRhcmstbWF0Y2gnPlxuICAgICAgICAgIDx0ciBjbGFzc05hbWU9J2RpdmlkZS1saXN0LXggaC0xMCB3LWZ1bGwnPlxuICAgICAgICAgICAgPHRoIGNsYXNzTmFtZT0ndy1bMTUlXSc+VGltZTwvdGg+XG4gICAgICAgICAgICA8dGggY2xhc3NOYW1lPSd3LVs3MCVdJz48L3RoPlxuICAgICAgICAgICAgPHRoIGNsYXNzTmFtZT0ndy1bMTUlXSc+Q+G6rXAgbmjhuq10PC90aD5cbiAgICAgICAgICA8L3RyPlxuICAgICAgICA8L3RoZWFkPlxuICAgICAgPC90YWJsZT4gKi99XG4gICAgICA8ZGl2IGNsYXNzTmFtZT0naC1bNTV2aF0gb3ZlcmZsb3cteS1hdXRvIHRleHQtc20gc2Nyb2xsYmFyJz5cbiAgICAgICAgPHRhYmxlIGNsYXNzTmFtZT0nbWluLXctZnVsbCAgYm9yZGVyLWNvbGxhcHNlIHRleHQtY2VudGVyJz5cbiAgICAgICAgICA8dGJvZHkgY2xhc3NOYW1lPSdkaXZpZGUtbGlzdCBtYXgtaC1bNDV2aF0gdy1mdWxsJz5cbiAgICAgICAgICAgIHtzaG93bkxpc3QubWFwKChjaGFuZ2U6IGFueSwgaWR4OiBudW1iZXIpID0+IHtcbiAgICAgICAgICAgICAgY29uc3Qgb2RkcyA9IGNoYW5nZS5vZGRzIHx8IHt9O1xuICAgICAgICAgICAgICBjb25zdCBwcmV2ID0gY2hhbmdlLnByZXYgfHwge307XG5cbiAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICA8PlxuICAgICAgICAgICAgICAgICAgPFR3Um93U2NcbiAgICAgICAgICAgICAgICAgICAga2V5PXtgJHtpZHh9LWFgfVxuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9J2RpdmlkZS1saXN0LXggaC0xMSB3LWZ1bGwnXG4gICAgICAgICAgICAgICAgICAgIGNzcz17W1xuICAgICAgICAgICAgICAgICAgICAgIGlkeCAlIDIgPT09IDEgJiYgdHdgYmctbGlnaHQtbWF0Y2ggZGFyazpiZy1kYXJrLW1hdGNoYCxcbiAgICAgICAgICAgICAgICAgICAgXX1cbiAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgPFR3Q2VsbFNjIGNsYXNzTmFtZT0ndy1bOCVdJyByb3dTcGFuPXszfT5cbiAgICAgICAgICAgICAgICAgICAgICBMaXZlXG4gICAgICAgICAgICAgICAgICAgIDwvVHdDZWxsU2M+XG4gICAgICAgICAgICAgICAgICAgIDxUd0NlbGxTYyBjbGFzc05hbWU9J3ctWzEwJV0gdGV4dC1sb2dvLWJsdWUnPkhvbWU8L1R3Q2VsbFNjPlxuXG4gICAgICAgICAgICAgICAgICAgIHtjaGFuZ2UuY2xvc2UgPyAoXG4gICAgICAgICAgICAgICAgICAgICAgPD5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxUd0NlbGxTY1xuICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9J3ctWzclXSB0ZXh0LWRhcmstbG9zcydcbiAgICAgICAgICAgICAgICAgICAgICAgICAgY29sU3Bhbj17MTB9XG4gICAgICAgICAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgICAgICAgIMSQw7NuZ1xuICAgICAgICAgICAgICAgICAgICAgICAgPC9Ud0NlbGxTYz5cbiAgICAgICAgICAgICAgICAgICAgICA8Lz5cbiAgICAgICAgICAgICAgICAgICAgKSA6IChcbiAgICAgICAgICAgICAgICAgICAgICA8PlxuICAgICAgICAgICAgICAgICAgICAgICAgPFR3T2Rkc0NlbGxTYyBjbGFzc05hbWU9J3ctWzclXSc+XG4gICAgICAgICAgICAgICAgICAgICAgICAgIDxPZGRzQ2VsbFNjXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2NvcmU9JzE6MCdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvZGRzPXtvZGRzLmgxfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByZXZPZGRzPXtwcmV2LmgxfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNpZGU9ezF9XG4gICAgICAgICAgICAgICAgICAgICAgICAgID48L09kZHNDZWxsU2M+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L1R3T2Rkc0NlbGxTYz5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxUd09kZHNDZWxsU2MgY2xhc3NOYW1lPSd3LVs3JV0nPlxuICAgICAgICAgICAgICAgICAgICAgICAgICA8T2Rkc0NlbGxTY1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjb3JlPScyOjAnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb2Rkcz17b2Rkcy5oMn1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaWRlPXsxfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByZXZPZGRzPXtwcmV2LmgyfVxuICAgICAgICAgICAgICAgICAgICAgICAgICA+PC9PZGRzQ2VsbFNjPlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9Ud09kZHNDZWxsU2M+XG4gICAgICAgICAgICAgICAgICAgICAgICA8VHdPZGRzQ2VsbFNjIGNsYXNzTmFtZT0ndy1bNyVdJz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgPE9kZHNDZWxsU2NcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY29yZT0nMjoxJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9kZHM9e29kZHMuaDN9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2lkZT17MX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmV2T2Rkcz17cHJldi5oM31cbiAgICAgICAgICAgICAgICAgICAgICAgICAgPjwvT2Rkc0NlbGxTYz5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvVHdPZGRzQ2VsbFNjPlxuICAgICAgICAgICAgICAgICAgICAgICAgPFR3T2Rkc0NlbGxTYyBjbGFzc05hbWU9J3ctWzclXSc+XG4gICAgICAgICAgICAgICAgICAgICAgICAgIDxPZGRzQ2VsbFNjXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2NvcmU9JzM6MCdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvZGRzPXtvZGRzLmg0fVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNpZGU9ezF9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJldk9kZHM9e3ByZXYuaDR9XG4gICAgICAgICAgICAgICAgICAgICAgICAgID48L09kZHNDZWxsU2M+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L1R3T2Rkc0NlbGxTYz5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxUd09kZHNDZWxsU2MgY2xhc3NOYW1lPSd3LVs3JV0nPlxuICAgICAgICAgICAgICAgICAgICAgICAgICA8T2Rkc0NlbGxTY1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjb3JlPSczOjEnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb2Rkcz17b2Rkcy5oNX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaWRlPXsxfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByZXZPZGRzPXtwcmV2Lmg1fVxuICAgICAgICAgICAgICAgICAgICAgICAgICA+PC9PZGRzQ2VsbFNjPlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9Ud09kZHNDZWxsU2M+XG4gICAgICAgICAgICAgICAgICAgICAgICA8VHdPZGRzQ2VsbFNjIGNsYXNzTmFtZT0ndy1bNyVdJz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgPE9kZHNDZWxsU2NcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY29yZT0nMzoyJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9kZHM9e29kZHMuaDZ9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2lkZT17MX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmV2T2Rkcz17cHJldi5oNn1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgPjwvT2Rkc0NlbGxTYz5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvVHdPZGRzQ2VsbFNjPlxuICAgICAgICAgICAgICAgICAgICAgICAgPFR3T2Rkc0NlbGxTYyBjbGFzc05hbWU9J3ctWzclXSc+XG4gICAgICAgICAgICAgICAgICAgICAgICAgIDxPZGRzQ2VsbFNjXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2NvcmU9JzQ6MCdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvZGRzPXtvZGRzLmg3fVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNpZGU9ezF9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJldk9kZHM9e3ByZXYuaDd9XG4gICAgICAgICAgICAgICAgICAgICAgICAgID48L09kZHNDZWxsU2M+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L1R3T2Rkc0NlbGxTYz5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxUd09kZHNDZWxsU2MgY2xhc3NOYW1lPSd3LVs3JV0nPlxuICAgICAgICAgICAgICAgICAgICAgICAgICA8T2Rkc0NlbGxTY1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjb3JlPSc0OjEnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb2Rkcz17b2Rkcy5oOH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaWRlPXsxfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByZXZPZGRzPXtwcmV2Lmg4fVxuICAgICAgICAgICAgICAgICAgICAgICAgICA+PC9PZGRzQ2VsbFNjPlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9Ud09kZHNDZWxsU2M+XG4gICAgICAgICAgICAgICAgICAgICAgICA8VHdPZGRzQ2VsbFNjIGNsYXNzTmFtZT0ndy1bNyVdJz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgPE9kZHNDZWxsU2NcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY29yZT0nNDoyJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9kZHM9e29kZHMuaDl9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2lkZT17MX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmV2T2Rkcz17cHJldi5oOX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgPjwvT2Rkc0NlbGxTYz5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvVHdPZGRzQ2VsbFNjPlxuICAgICAgICAgICAgICAgICAgICAgICAgPFR3T2Rkc0NlbGxTYyBjbGFzc05hbWU9J3ctWzclXSc+XG4gICAgICAgICAgICAgICAgICAgICAgICAgIDxPZGRzQ2VsbFNjXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2NvcmU9JzQ6MydcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvZGRzPXtvZGRzLmgxMH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaWRlPXsxfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByZXZPZGRzPXtwcmV2LmgxMH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgPjwvT2Rkc0NlbGxTYz5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvVHdPZGRzQ2VsbFNjPlxuICAgICAgICAgICAgICAgICAgICAgIDwvPlxuICAgICAgICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgICAgICAgICA8VHdDZWxsU2MgY2xhc3NOYW1lPSd3LTEvNCcgcm93U3Bhbj17M30+XG4gICAgICAgICAgICAgICAgICAgICAge2Zvcm1hdChuZXcgRGF0ZShjaGFuZ2UuY3QgKiAxMDAwKSwgJ2RkL01NIEhIOm1tJyl9XG4gICAgICAgICAgICAgICAgICAgIDwvVHdDZWxsU2M+XG4gICAgICAgICAgICAgICAgICA8L1R3Um93U2M+XG5cbiAgICAgICAgICAgICAgICAgIDxUd1Jvd1NjXG4gICAgICAgICAgICAgICAgICAgIGtleT17YCR7aWR4fS1iYH1cbiAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPSdkaXZpZGUtbGlzdC14IGgtMTAgdy1mdWxsJ1xuICAgICAgICAgICAgICAgICAgICBjc3M9e1tcbiAgICAgICAgICAgICAgICAgICAgICBpZHggJSAyID09PSAxICYmIHR3YGJnLWxpZ2h0LW1hdGNoIGRhcms6YmctZGFyay1tYXRjaGAsXG4gICAgICAgICAgICAgICAgICAgIF19XG4gICAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgIHsvKiA8dGQgY2xhc3NOYW1lPSd3LVs1JV0nPkxpdmU8L3RkPiAqL31cbiAgICAgICAgICAgICAgICAgICAgPFR3Q2VsbFNjIGNsYXNzTmFtZT0ndy1bMTAlXSB0ZXh0LWRhcmstdGV4dCc+RHJhdzwvVHdDZWxsU2M+XG4gICAgICAgICAgICAgICAgICAgIHtjaGFuZ2UuY2xvc2UgPyAoXG4gICAgICAgICAgICAgICAgICAgICAgPFR3Q2VsbFNjIGNsYXNzTmFtZT0ndy1bNzUlXSB0ZXh0LWRhcmstbG9zcyc+XG4gICAgICAgICAgICAgICAgICAgICAgICDEkMOzbmdcbiAgICAgICAgICAgICAgICAgICAgICA8L1R3Q2VsbFNjPlxuICAgICAgICAgICAgICAgICAgICApIDogKFxuICAgICAgICAgICAgICAgICAgICAgIDw+XG4gICAgICAgICAgICAgICAgICAgICAgICA8VHdPZGRzQ2VsbFNjIGNsYXNzTmFtZT0ndy1bNyVdJz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgPE9kZHNDZWxsU2NcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY29yZT0nMDowJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9kZHM9e29kZHMuZDF9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJldk9kZHM9e3ByZXYuZDF9XG4gICAgICAgICAgICAgICAgICAgICAgICAgID48L09kZHNDZWxsU2M+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L1R3T2Rkc0NlbGxTYz5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxUd09kZHNDZWxsU2MgY2xhc3NOYW1lPSd3LVs3JV0nPlxuICAgICAgICAgICAgICAgICAgICAgICAgICA8T2Rkc0NlbGxTY1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjb3JlPScxOjEnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb2Rkcz17b2Rkcy5kMn1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmV2T2Rkcz17cHJldi5kMn1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgPjwvT2Rkc0NlbGxTYz5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvVHdPZGRzQ2VsbFNjPlxuICAgICAgICAgICAgICAgICAgICAgICAgPFR3T2Rkc0NlbGxTYyBjbGFzc05hbWU9J3ctWzclXSc+XG4gICAgICAgICAgICAgICAgICAgICAgICAgIDxPZGRzQ2VsbFNjXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2NvcmU9JzI6MidcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvZGRzPXtvZGRzLmQzfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByZXZPZGRzPXtwcmV2LmQzfVxuICAgICAgICAgICAgICAgICAgICAgICAgICA+PC9PZGRzQ2VsbFNjPlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9Ud09kZHNDZWxsU2M+XG4gICAgICAgICAgICAgICAgICAgICAgICA8VHdPZGRzQ2VsbFNjIGNsYXNzTmFtZT0ndy1bNyVdJz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgPE9kZHNDZWxsU2NcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY29yZT0nMzozJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9kZHM9e29kZHMuZDR9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJldk9kZHM9e3ByZXYuZDR9XG4gICAgICAgICAgICAgICAgICAgICAgICAgID48L09kZHNDZWxsU2M+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L1R3T2Rkc0NlbGxTYz5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxUd09kZHNDZWxsU2MgY2xhc3NOYW1lPSd3LVs3JV0nPlxuICAgICAgICAgICAgICAgICAgICAgICAgICA8T2Rkc0NlbGxTY1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjb3JlPSc0OjQnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb2Rkcz17b2Rkcy5kNX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmV2T2Rkcz17cHJldi5kNX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgPjwvT2Rkc0NlbGxTYz5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvVHdPZGRzQ2VsbFNjPlxuICAgICAgICAgICAgICAgICAgICAgICAgPFR3T2Rkc0NlbGxTYyBjbGFzc05hbWU9J3ctWzclXSc+XG4gICAgICAgICAgICAgICAgICAgICAgICAgIDxPZGRzQ2VsbFNjXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2NvcmU9J090aGVyJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9kZHM9e29kZHMub31cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmV2T2Rkcz17cHJldi5vfVxuICAgICAgICAgICAgICAgICAgICAgICAgICA+PC9PZGRzQ2VsbFNjPlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9Ud09kZHNDZWxsU2M+XG4gICAgICAgICAgICAgICAgICAgICAgICA8VHdPZGRzQ2VsbFNjIGNsYXNzTmFtZT0ndy1bNyVdJz48L1R3T2Rkc0NlbGxTYz5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxUd09kZHNDZWxsU2MgY2xhc3NOYW1lPSd3LVs3JV0nPjwvVHdPZGRzQ2VsbFNjPlxuICAgICAgICAgICAgICAgICAgICAgICAgPFR3T2Rkc0NlbGxTYyBjbGFzc05hbWU9J3ctWzclXSc+PC9Ud09kZHNDZWxsU2M+XG4gICAgICAgICAgICAgICAgICAgICAgICA8VHdPZGRzQ2VsbFNjIGNsYXNzTmFtZT0ndy1bNyVdJz48L1R3T2Rkc0NlbGxTYz5cbiAgICAgICAgICAgICAgICAgICAgICA8Lz5cbiAgICAgICAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgICAgICAgIDwvVHdSb3dTYz5cblxuICAgICAgICAgICAgICAgICAgPFR3Um93U2NcbiAgICAgICAgICAgICAgICAgICAga2V5PXtgJHtpZHh9LWNgfVxuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9J2RpdmlkZS1saXN0LXggaC0xMCB3LWZ1bGwnXG4gICAgICAgICAgICAgICAgICAgIGNzcz17W1xuICAgICAgICAgICAgICAgICAgICAgIGlkeCAlIDIgPT09IDEgJiYgdHdgYmctbGlnaHQtbWF0Y2ggZGFyazpiZy1kYXJrLW1hdGNoYCxcbiAgICAgICAgICAgICAgICAgICAgXX1cbiAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgey8qIDx0ZCBjbGFzc05hbWU9J3ctWzUlXSc+TGl2ZTwvdGQ+ICovfVxuICAgICAgICAgICAgICAgICAgICA8VHdDZWxsU2MgY2xhc3NOYW1lPSd3LVsxMCVdIHRleHQtbG9nby15ZWxsb3cnPlxuICAgICAgICAgICAgICAgICAgICAgIEF3YXlcbiAgICAgICAgICAgICAgICAgICAgPC9Ud0NlbGxTYz5cbiAgICAgICAgICAgICAgICAgICAge2NoYW5nZS5jbG9zZSA/IChcbiAgICAgICAgICAgICAgICAgICAgICA8VHdDZWxsU2MgY2xhc3NOYW1lPSd3LVs3NSVdIHRleHQtZGFyay1sb3NzJz5cbiAgICAgICAgICAgICAgICAgICAgICAgIMSQw7NuZ1xuICAgICAgICAgICAgICAgICAgICAgIDwvVHdDZWxsU2M+XG4gICAgICAgICAgICAgICAgICAgICkgOiAoXG4gICAgICAgICAgICAgICAgICAgICAgPD5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxUd09kZHNDZWxsU2MgY2xhc3NOYW1lPSd3LVs3JV0nPlxuICAgICAgICAgICAgICAgICAgICAgICAgICA8T2Rkc0NlbGxTY1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjb3JlPScwOjEnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb2Rkcz17b2Rkcy5hMX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaWRlPXsyfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByZXZPZGRzPXtwcmV2LmExfVxuICAgICAgICAgICAgICAgICAgICAgICAgICA+PC9PZGRzQ2VsbFNjPlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9Ud09kZHNDZWxsU2M+XG4gICAgICAgICAgICAgICAgICAgICAgICA8VHdPZGRzQ2VsbFNjIGNsYXNzTmFtZT0ndy1bNyVdJz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgPE9kZHNDZWxsU2NcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY29yZT0nMDoyJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9kZHM9e29kZHMuYTJ9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2lkZT17Mn1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmV2T2Rkcz17cHJldi5hMn1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgPjwvT2Rkc0NlbGxTYz5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvVHdPZGRzQ2VsbFNjPlxuICAgICAgICAgICAgICAgICAgICAgICAgPFR3T2Rkc0NlbGxTYyBjbGFzc05hbWU9J3ctWzclXSc+XG4gICAgICAgICAgICAgICAgICAgICAgICAgIDxPZGRzQ2VsbFNjXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2NvcmU9JzE6MidcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvZGRzPXtvZGRzLmEzfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNpZGU9ezJ9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJldk9kZHM9e3ByZXYuYTN9XG4gICAgICAgICAgICAgICAgICAgICAgICAgID48L09kZHNDZWxsU2M+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L1R3T2Rkc0NlbGxTYz5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxUd09kZHNDZWxsU2MgY2xhc3NOYW1lPSd3LVs3JV0nPlxuICAgICAgICAgICAgICAgICAgICAgICAgICA8T2Rkc0NlbGxTY1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjb3JlPScwOjMnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb2Rkcz17b2Rkcy5hNH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaWRlPXsyfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByZXZPZGRzPXtwcmV2LmE0fVxuICAgICAgICAgICAgICAgICAgICAgICAgICA+PC9PZGRzQ2VsbFNjPlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9Ud09kZHNDZWxsU2M+XG4gICAgICAgICAgICAgICAgICAgICAgICA8VHdPZGRzQ2VsbFNjIGNsYXNzTmFtZT0ndy1bNyVdJz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgPE9kZHNDZWxsU2NcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY29yZT0nMTozJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9kZHM9e29kZHMuYTV9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2lkZT17Mn1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmV2T2Rkcz17cHJldi5hNX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgPjwvT2Rkc0NlbGxTYz5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvVHdPZGRzQ2VsbFNjPlxuICAgICAgICAgICAgICAgICAgICAgICAgPFR3T2Rkc0NlbGxTYyBjbGFzc05hbWU9J3ctWzclXSc+XG4gICAgICAgICAgICAgICAgICAgICAgICAgIDxPZGRzQ2VsbFNjXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2NvcmU9JzI6MydcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvZGRzPXtvZGRzLmE2fVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNpZGU9ezJ9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJldk9kZHM9e3ByZXYuYTZ9XG4gICAgICAgICAgICAgICAgICAgICAgICAgID48L09kZHNDZWxsU2M+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L1R3T2Rkc0NlbGxTYz5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxUd09kZHNDZWxsU2MgY2xhc3NOYW1lPSd3LVs3JV0nPlxuICAgICAgICAgICAgICAgICAgICAgICAgICA8T2Rkc0NlbGxTY1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjb3JlPScwOjQnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb2Rkcz17b2Rkcy5hN31cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaWRlPXsyfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByZXZPZGRzPXtwcmV2LmE3fVxuICAgICAgICAgICAgICAgICAgICAgICAgICA+PC9PZGRzQ2VsbFNjPlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9Ud09kZHNDZWxsU2M+XG4gICAgICAgICAgICAgICAgICAgICAgICA8VHdPZGRzQ2VsbFNjIGNsYXNzTmFtZT0ndy1bNyVdJz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgPE9kZHNDZWxsU2NcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY29yZT0nMTo0J1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9kZHM9e29kZHMuYTh9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2lkZT17Mn1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmV2T2Rkcz17cHJldi5hOH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgPjwvT2Rkc0NlbGxTYz5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvVHdPZGRzQ2VsbFNjPlxuICAgICAgICAgICAgICAgICAgICAgICAgPFR3T2Rkc0NlbGxTYyBjbGFzc05hbWU9J3ctWzclXSc+XG4gICAgICAgICAgICAgICAgICAgICAgICAgIDxPZGRzQ2VsbFNjXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2NvcmU9JzI6NCdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvZGRzPXtvZGRzLmE5fVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNpZGU9ezJ9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJldk9kZHM9e3ByZXYuYTl9XG4gICAgICAgICAgICAgICAgICAgICAgICAgID48L09kZHNDZWxsU2M+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L1R3T2Rkc0NlbGxTYz5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxUd09kZHNDZWxsU2MgY2xhc3NOYW1lPSd3LVs3JV0nPlxuICAgICAgICAgICAgICAgICAgICAgICAgICA8T2Rkc0NlbGxTY1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjb3JlPSczOjQnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb2Rkcz17b2Rkcy5hMTB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2lkZT17Mn1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmV2T2Rkcz17cHJldi5hMTB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgID48L09kZHNDZWxsU2M+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L1R3T2Rkc0NlbGxTYz5cbiAgICAgICAgICAgICAgICAgICAgICA8Lz5cbiAgICAgICAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgICAgICAgIDwvVHdSb3dTYz5cbiAgICAgICAgICAgICAgICA8Lz5cbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH0pfVxuICAgICAgICAgIDwvdGJvZHk+XG4gICAgICAgIDwvdGFibGU+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgKTtcbn07XG5cbmNvbnN0IFR3Q2VsbFNjID0gdHcudGRgYDtcbmNvbnN0IFR3T2Rkc0NlbGxTYyA9IHR3LnRkYHRleHQtc21gO1xuY29uc3QgVHdSb3dTYyA9IHR3LnRyYGA7XG5cbmNvbnN0IE9kZHNDZWxsU2MgPSAoe1xuICBzY29yZSxcbiAgb2RkcyxcbiAgc2lkZSxcbiAgcHJldk9kZHMsXG59OiB7XG4gIHNjb3JlOiBzdHJpbmc7XG4gIG9kZHM6IG51bWJlcjtcbiAgc2lkZT86IG51bWJlcjtcbiAgcHJldk9kZHM6IG51bWJlcjtcbn0pID0+IHtcbiAgcmV0dXJuIChcbiAgICA8ZGl2IGNsYXNzTmFtZT0naC1mdWxsIHB5LTAuNSc+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT0ndGV4dC1jeHMgdGV4dC1kYXJrLXRleHQnPntzY29yZX08L2Rpdj5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPSdkYXJrOnRleHQtZGFyay1kZWZhdWx0Jz5cbiAgICAgICAgPHNwYW5cbiAgICAgICAgICBjc3M9e1tcbiAgICAgICAgICAgIHByZXZPZGRzICYmIHByZXZPZGRzID4gb2RkcyAmJiB0d2B0ZXh0LXJlZC02MDBgLFxuICAgICAgICAgICAgcHJldk9kZHMgJiYgcHJldk9kZHMgPCBvZGRzICYmIHR3YHRleHQtZGFyay13aW5gLFxuICAgICAgICAgIF19XG4gICAgICAgID5cbiAgICAgICAgICB7b2Rkc31cbiAgICAgICAgPC9zcGFuPlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gICk7XG59O1xuXG5jb25zdCBDb3JuZXJUeFJvdyA9ICgpID0+IHtcbiAgcmV0dXJuIChcbiAgICA8dHIgY2xhc3NOYW1lPSdkaXZpZGUtbGlzdC14IGgtOSB3LWZ1bGwnPlxuICAgICAgPHRkIGNsYXNzTmFtZT0ndy1bMjAlXSc+VGltZTwvdGQ+XG4gICAgICA8dGQgY2xhc3NOYW1lPSd3LVsxNSVdJz5Db3JuZXI8L3RkPlxuICAgICAgPHRkIGNsYXNzTmFtZT0ndy1bMTUlXSc+T3ZlcjwvdGQ+XG4gICAgICA8dGQgY2xhc3NOYW1lPSd3LVsxNSVdJz5Hb2FsczwvdGQ+XG4gICAgICA8dGQgY2xhc3NOYW1lPSd3LVsyMCVdJz5VbmRlcjwvdGQ+XG4gICAgICA8dGQgY2xhc3NOYW1lPSd3LVsyMCVdJz5VcGRhdGU8L3RkPlxuICAgIDwvdHI+XG4gICk7XG59O1xuIl19 */\",\n    toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n});\nconst TwOddsCellSc = /*#__PURE__*/ (0,_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"td\",  false ? 0 : {\n    target: \"e17esxtz1\",\n    label: \"TwOddsCellSc\"\n})( false ? 0 : {\n    name: \"1504nod\",\n    styles: \"font-size:0.875rem;line-height:1.25rem/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n    toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n});\nconst TwRowSc = /*#__PURE__*/ (0,_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"tr\",  false ? 0 : {\n    target: \"e17esxtz0\",\n    label: \"TwRowSc\"\n})( false ? 0 : {\n    name: \"0\",\n    styles: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n    toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n});\nconst OddsCellSc = ({ score, odds, side, prevOdds })=>{\n    return (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsxs)(\"div\", {\n        className: \"h-full py-0.5\",\n        children: [\n            (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(\"div\", {\n                className: \"text-cxs text-dark-text\",\n                children: score\n            }),\n            (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(\"div\", {\n                className: \"dark:text-dark-default\",\n                children: (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(\"span\", {\n                    css: [\n                        prevOdds && prevOdds > odds && {\n                            \"--tw-text-opacity\": \"1\",\n                            \"color\": \"rgb(224 36 36 / var(--tw-text-opacity, 1))\"\n                        },\n                        prevOdds && prevOdds < odds && {\n                            \"--tw-text-opacity\": \"1\",\n                            \"color\": \"rgb(46 167 111 / var(--tw-text-opacity, 1))\"\n                        },\n                         false ? 0 : \";label:OddsCellSc;\",\n                         false ? 0 : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"\n                    ],\n                    \"data-tw\": \"text-red-600 | text-dark-win\",\n                    children: odds\n                })\n            })\n        ]\n    });\n};\nconst CornerTxRow = ()=>{\n    return (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsxs)(\"tr\", {\n        className: \"divide-list-x h-9 w-full\",\n        children: [\n            (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(\"td\", {\n                className: \"w-[20%]\",\n                children: \"Time\"\n            }),\n            (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(\"td\", {\n                className: \"w-[15%]\",\n                children: \"Corner\"\n            }),\n            (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(\"td\", {\n                className: \"w-[15%]\",\n                children: \"Over\"\n            }),\n            (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(\"td\", {\n                className: \"w-[15%]\",\n                children: \"Goals\"\n            }),\n            (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(\"td\", {\n                className: \"w-[20%]\",\n                children: \"Under\"\n            }),\n            (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(\"td\", {\n                className: \"w-[20%]\",\n                children: \"Update\"\n            })\n        ]\n    });\n};\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/components/modules/football/odds/OddsChangeModalQV.tsx\n");

/***/ }),

/***/ "./src/components/modules/football/odds/PeriodSwitcher.tsx":
/*!*****************************************************************!*\
  !*** ./src/components/modules/football/odds/PeriodSwitcher.tsx ***!
  \*****************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PeriodSwitcher: () => (/* binding */ PeriodSwitcher)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"react\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @emotion/react/jsx-runtime */ \"@emotion/react/jsx-runtime\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__]);\n_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\nconst PeriodSwitcher = ({ options, valGetter, half = 0 })=>{\n    const [choice, setChoice] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(options[half || 0].value);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        valGetter(choice);\n    }, [\n        choice,\n        valGetter\n    ]);\n    return (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(\"div\", {\n        className: \"flex items-center\",\n        children: [\n            (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"button\", {\n                className: \"item-hover w-14 rounded-s-lg px-3 py-1.5 text-sm \",\n                onClick: ()=>setChoice(options[0].value),\n                css: [\n                    choice === options[0].value && {\n                        \"--tw-bg-opacity\": \"1\",\n                        \"backgroundColor\": \"rgb(33 135 229 / var(--tw-bg-opacity, 1))\",\n                        \"--tw-text-opacity\": \"1\",\n                        \"color\": \"rgb(255 255 255 / var(--tw-text-opacity, 1))\"\n                    },\n                    choice === options[1].value && {\n                        \"--tw-bg-opacity\": \"1\",\n                        \"backgroundColor\": \"rgb(242 246 249 / var(--tw-bg-opacity, 1))\",\n                        \":is(.dark *)\": {\n                            \"--tw-bg-opacity\": \"1\",\n                            \"backgroundColor\": \"rgb(27 27 27 / var(--tw-bg-opacity, 1))\"\n                        }\n                    },\n                     false ? 0 : \";label:PeriodSwitcher;\",\n                     false ? 0 : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9ub2xhbi9Eb2N1bWVudHMvd3d3L2JsdWUtcGFwZXItYjk2OS9zcmMvY29tcG9uZW50cy9tb2R1bGVzL2Zvb3RiYWxsL29kZHMvUGVyaW9kU3dpdGNoZXIudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQXVCUSIsImZpbGUiOiIvVXNlcnMvbm9sYW4vRG9jdW1lbnRzL3d3dy9ibHVlLXBhcGVyLWI5Njkvc3JjL2NvbXBvbmVudHMvbW9kdWxlcy9mb290YmFsbC9vZGRzL1BlcmlvZFN3aXRjaGVyLnRzeCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHVzZUVmZmVjdCwgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgdHcgZnJvbSAndHdpbi5tYWNybyc7XG5cbmV4cG9ydCBjb25zdCBQZXJpb2RTd2l0Y2hlciA9ICh7XG4gIG9wdGlvbnMsXG4gIHZhbEdldHRlcixcbiAgaGFsZiA9IDAsXG59OiB7XG4gIG9wdGlvbnM6IGFueVtdO1xuICB2YWxHZXR0ZXI6ICh4OiBhbnkpID0+IHZvaWQ7XG4gIGhhbGY6IG51bWJlcjtcbn0pID0+IHtcbiAgY29uc3QgW2Nob2ljZSwgc2V0Q2hvaWNlXSA9IHVzZVN0YXRlPG51bWJlcj4ob3B0aW9uc1toYWxmIHx8IDBdLnZhbHVlKTtcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIHZhbEdldHRlcihjaG9pY2UpO1xuICB9LCBbY2hvaWNlLCB2YWxHZXR0ZXJdKTtcblxuICByZXR1cm4gKFxuICAgIDxkaXYgY2xhc3NOYW1lPSdmbGV4IGl0ZW1zLWNlbnRlcic+XG4gICAgICA8YnV0dG9uXG4gICAgICAgIGNsYXNzTmFtZT0naXRlbS1ob3ZlciB3LTE0IHJvdW5kZWQtcy1sZyBweC0zIHB5LTEuNSB0ZXh0LXNtICdcbiAgICAgICAgb25DbGljaz17KCkgPT4gc2V0Q2hvaWNlKG9wdGlvbnNbMF0udmFsdWUpfVxuICAgICAgICBjc3M9e1tcbiAgICAgICAgICBjaG9pY2UgPT09IG9wdGlvbnNbMF0udmFsdWUgJiYgdHdgYmctbG9nby1ibHVlIHRleHQtd2hpdGVgLFxuICAgICAgICAgIGNob2ljZSA9PT0gb3B0aW9uc1sxXS52YWx1ZSAmJiB0d2BiZy1saWdodC1tYXRjaCBkYXJrOmJnLWRhcmstbWF0Y2hgLFxuICAgICAgICBdfVxuICAgICAgPlxuICAgICAgICB7b3B0aW9uc1swXS5uYW1lfVxuICAgICAgPC9idXR0b24+XG4gICAgICA8YnV0dG9uXG4gICAgICAgIGNsYXNzTmFtZT0naXRlbS1ob3ZlciB3LTE0IHJvdW5kZWQtZS1sZyBweC0zIHB5LTEuNSB0ZXh0LXNtICdcbiAgICAgICAgb25DbGljaz17KCkgPT4gc2V0Q2hvaWNlKG9wdGlvbnNbMV0udmFsdWUpfVxuICAgICAgICBjc3M9e1tcbiAgICAgICAgICBjaG9pY2UgPT09IG9wdGlvbnNbMV0udmFsdWUgJiYgdHdgYmctbG9nby1ibHVlIHRleHQtd2hpdGVgLFxuICAgICAgICAgIGNob2ljZSA9PT0gb3B0aW9uc1swXS52YWx1ZSAmJiB0d2BiZy1saWdodC1tYXRjaCBkYXJrOmJnLWRhcmstbWF0Y2hgLFxuICAgICAgICBdfVxuICAgICAgPlxuICAgICAgICB7b3B0aW9uc1sxXS5uYW1lfVxuICAgICAgPC9idXR0b24+XG4gICAgPC9kaXY+XG4gICk7XG59O1xuIl19 */\"\n                ],\n                \"data-tw\": \"bg-logo-blue text-white | bg-light-match dark:bg-dark-match\",\n                children: options[0].name\n            }),\n            (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"button\", {\n                className: \"item-hover w-14 rounded-e-lg px-3 py-1.5 text-sm \",\n                onClick: ()=>setChoice(options[1].value),\n                css: [\n                    choice === options[1].value && {\n                        \"--tw-bg-opacity\": \"1\",\n                        \"backgroundColor\": \"rgb(33 135 229 / var(--tw-bg-opacity, 1))\",\n                        \"--tw-text-opacity\": \"1\",\n                        \"color\": \"rgb(255 255 255 / var(--tw-text-opacity, 1))\"\n                    },\n                    choice === options[0].value && {\n                        \"--tw-bg-opacity\": \"1\",\n                        \"backgroundColor\": \"rgb(242 246 249 / var(--tw-bg-opacity, 1))\",\n                        \":is(.dark *)\": {\n                            \"--tw-bg-opacity\": \"1\",\n                            \"backgroundColor\": \"rgb(27 27 27 / var(--tw-bg-opacity, 1))\"\n                        }\n                    },\n                     false ? 0 : \";label:PeriodSwitcher;\",\n                     false ? 0 : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9ub2xhbi9Eb2N1bWVudHMvd3d3L2JsdWUtcGFwZXItYjk2OS9zcmMvY29tcG9uZW50cy9tb2R1bGVzL2Zvb3RiYWxsL29kZHMvUGVyaW9kU3dpdGNoZXIudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQWlDUSIsImZpbGUiOiIvVXNlcnMvbm9sYW4vRG9jdW1lbnRzL3d3dy9ibHVlLXBhcGVyLWI5Njkvc3JjL2NvbXBvbmVudHMvbW9kdWxlcy9mb290YmFsbC9vZGRzL1BlcmlvZFN3aXRjaGVyLnRzeCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHVzZUVmZmVjdCwgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgdHcgZnJvbSAndHdpbi5tYWNybyc7XG5cbmV4cG9ydCBjb25zdCBQZXJpb2RTd2l0Y2hlciA9ICh7XG4gIG9wdGlvbnMsXG4gIHZhbEdldHRlcixcbiAgaGFsZiA9IDAsXG59OiB7XG4gIG9wdGlvbnM6IGFueVtdO1xuICB2YWxHZXR0ZXI6ICh4OiBhbnkpID0+IHZvaWQ7XG4gIGhhbGY6IG51bWJlcjtcbn0pID0+IHtcbiAgY29uc3QgW2Nob2ljZSwgc2V0Q2hvaWNlXSA9IHVzZVN0YXRlPG51bWJlcj4ob3B0aW9uc1toYWxmIHx8IDBdLnZhbHVlKTtcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIHZhbEdldHRlcihjaG9pY2UpO1xuICB9LCBbY2hvaWNlLCB2YWxHZXR0ZXJdKTtcblxuICByZXR1cm4gKFxuICAgIDxkaXYgY2xhc3NOYW1lPSdmbGV4IGl0ZW1zLWNlbnRlcic+XG4gICAgICA8YnV0dG9uXG4gICAgICAgIGNsYXNzTmFtZT0naXRlbS1ob3ZlciB3LTE0IHJvdW5kZWQtcy1sZyBweC0zIHB5LTEuNSB0ZXh0LXNtICdcbiAgICAgICAgb25DbGljaz17KCkgPT4gc2V0Q2hvaWNlKG9wdGlvbnNbMF0udmFsdWUpfVxuICAgICAgICBjc3M9e1tcbiAgICAgICAgICBjaG9pY2UgPT09IG9wdGlvbnNbMF0udmFsdWUgJiYgdHdgYmctbG9nby1ibHVlIHRleHQtd2hpdGVgLFxuICAgICAgICAgIGNob2ljZSA9PT0gb3B0aW9uc1sxXS52YWx1ZSAmJiB0d2BiZy1saWdodC1tYXRjaCBkYXJrOmJnLWRhcmstbWF0Y2hgLFxuICAgICAgICBdfVxuICAgICAgPlxuICAgICAgICB7b3B0aW9uc1swXS5uYW1lfVxuICAgICAgPC9idXR0b24+XG4gICAgICA8YnV0dG9uXG4gICAgICAgIGNsYXNzTmFtZT0naXRlbS1ob3ZlciB3LTE0IHJvdW5kZWQtZS1sZyBweC0zIHB5LTEuNSB0ZXh0LXNtICdcbiAgICAgICAgb25DbGljaz17KCkgPT4gc2V0Q2hvaWNlKG9wdGlvbnNbMV0udmFsdWUpfVxuICAgICAgICBjc3M9e1tcbiAgICAgICAgICBjaG9pY2UgPT09IG9wdGlvbnNbMV0udmFsdWUgJiYgdHdgYmctbG9nby1ibHVlIHRleHQtd2hpdGVgLFxuICAgICAgICAgIGNob2ljZSA9PT0gb3B0aW9uc1swXS52YWx1ZSAmJiB0d2BiZy1saWdodC1tYXRjaCBkYXJrOmJnLWRhcmstbWF0Y2hgLFxuICAgICAgICBdfVxuICAgICAgPlxuICAgICAgICB7b3B0aW9uc1sxXS5uYW1lfVxuICAgICAgPC9idXR0b24+XG4gICAgPC9kaXY+XG4gICk7XG59O1xuIl19 */\"\n                ],\n                \"data-tw\": \"bg-logo-blue text-white | bg-light-match dark:bg-dark-match\",\n                children: options[1].name\n            })\n        ]\n    });\n};\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvY29tcG9uZW50cy9tb2R1bGVzL2Zvb3RiYWxsL29kZHMvUGVyaW9kU3dpdGNoZXIudHN4IiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBMkM7QUFBQztBQUdyQyxNQUFNTSxpQkFBaUJBLENBQUMsRUFDN0JDLE9BQU8sRUFDUEMsU0FBUyxFQUNUQyxPQUFPLEdBS1I7SUFDQyxNQUFNLENBQUNDLFFBQVFDLFVBQVUsR0FBR1YsK0NBQVFBLENBQVNNLE9BQU8sQ0FBQ0UsUUFBUSxFQUFFLENBQUNHLEtBQUs7SUFFckVaLGdEQUFTQSxDQUFDO1FBQ1JRLFVBQVVFO0lBQ1osR0FBRztRQUFDQTtRQUFRRjtLQUFVO0lBRXRCLE9BQ0VILGdFQUFBQSxDQUFBO1FBQUtRLFdBQVU7UUFBbUJDLFVBQUE7WUFDaENYLCtEQUFBQSxDQUFBO2dCQUNFVSxXQUFVO2dCQUNWRSxTQUFTQSxJQUFNSixVQUFVSixPQUFPLENBQUMsRUFBRSxDQUFDSyxLQUFLO2dCQUN6Q0ksS0FBRztvQkFDRE4sV0FBV0gsT0FBTyxDQUFDLEVBQUUsQ0FBQ0ssS0FBSyxJQUFNO3dCQUFBO3dCQUFBO3dCQUFBO3dCQUFBO29CQUF3QjtvQkFDekRGLFdBQVdILE9BQU8sQ0FBQyxFQUFFLENBQUNLLEtBQUssSUFBTTt3QkFBQTt3QkFBQTt3QkFBQTs0QkFBQTs0QkFBQTt3QkFBQTtvQkFBa0M7b0JBekI3RSxNQXlCOEU7b0JBekI5RSxNQXlCOEU7aUJBQ3BFO2dCQUFBO2dCQUFBRSxVQUVEUCxPQUFPLENBQUMsRUFBRSxDQUFDVSxJQUFBQTtZQUFJO1lBRWxCZCwrREFBQUEsQ0FBQTtnQkFDRVUsV0FBVTtnQkFDVkUsU0FBU0EsSUFBTUosVUFBVUosT0FBTyxDQUFDLEVBQUUsQ0FBQ0ssS0FBSztnQkFDekNJLEtBQUc7b0JBQ0ROLFdBQVdILE9BQU8sQ0FBQyxFQUFFLENBQUNLLEtBQUssSUFBTTt3QkFBQTt3QkFBQTt3QkFBQTt3QkFBQTtvQkFBd0I7b0JBQ3pERixXQUFXSCxPQUFPLENBQUMsRUFBRSxDQUFDSyxLQUFLLElBQU07d0JBQUE7d0JBQUE7d0JBQUE7NEJBQUE7NEJBQUE7d0JBQUE7b0JBQWtDO29CQW5DN0UsTUFtQzhFO29CQW5DOUUsTUFtQzhFO2lCQUNwRTtnQkFBQTtnQkFBQUUsVUFFRFAsT0FBTyxDQUFDLEVBQUUsQ0FBQ1UsSUFBQUE7WUFBSTtTQUNUO0lBQUE7QUFHZixFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmx1ZS1wYXBlci1iOTY5Ly4vc3JjL2NvbXBvbmVudHMvbW9kdWxlcy9mb290YmFsbC9vZGRzL1BlcmlvZFN3aXRjaGVyLnRzeD9lNjIyIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHVzZUVmZmVjdCwgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgdHcgZnJvbSAndHdpbi5tYWNybyc7XG5cbmV4cG9ydCBjb25zdCBQZXJpb2RTd2l0Y2hlciA9ICh7XG4gIG9wdGlvbnMsXG4gIHZhbEdldHRlcixcbiAgaGFsZiA9IDAsXG59OiB7XG4gIG9wdGlvbnM6IGFueVtdO1xuICB2YWxHZXR0ZXI6ICh4OiBhbnkpID0+IHZvaWQ7XG4gIGhhbGY6IG51bWJlcjtcbn0pID0+IHtcbiAgY29uc3QgW2Nob2ljZSwgc2V0Q2hvaWNlXSA9IHVzZVN0YXRlPG51bWJlcj4ob3B0aW9uc1toYWxmIHx8IDBdLnZhbHVlKTtcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIHZhbEdldHRlcihjaG9pY2UpO1xuICB9LCBbY2hvaWNlLCB2YWxHZXR0ZXJdKTtcblxuICByZXR1cm4gKFxuICAgIDxkaXYgY2xhc3NOYW1lPSdmbGV4IGl0ZW1zLWNlbnRlcic+XG4gICAgICA8YnV0dG9uXG4gICAgICAgIGNsYXNzTmFtZT0naXRlbS1ob3ZlciB3LTE0IHJvdW5kZWQtcy1sZyBweC0zIHB5LTEuNSB0ZXh0LXNtICdcbiAgICAgICAgb25DbGljaz17KCkgPT4gc2V0Q2hvaWNlKG9wdGlvbnNbMF0udmFsdWUpfVxuICAgICAgICBjc3M9e1tcbiAgICAgICAgICBjaG9pY2UgPT09IG9wdGlvbnNbMF0udmFsdWUgJiYgdHdgYmctbG9nby1ibHVlIHRleHQtd2hpdGVgLFxuICAgICAgICAgIGNob2ljZSA9PT0gb3B0aW9uc1sxXS52YWx1ZSAmJiB0d2BiZy1saWdodC1tYXRjaCBkYXJrOmJnLWRhcmstbWF0Y2hgLFxuICAgICAgICBdfVxuICAgICAgPlxuICAgICAgICB7b3B0aW9uc1swXS5uYW1lfVxuICAgICAgPC9idXR0b24+XG4gICAgICA8YnV0dG9uXG4gICAgICAgIGNsYXNzTmFtZT0naXRlbS1ob3ZlciB3LTE0IHJvdW5kZWQtZS1sZyBweC0zIHB5LTEuNSB0ZXh0LXNtICdcbiAgICAgICAgb25DbGljaz17KCkgPT4gc2V0Q2hvaWNlKG9wdGlvbnNbMV0udmFsdWUpfVxuICAgICAgICBjc3M9e1tcbiAgICAgICAgICBjaG9pY2UgPT09IG9wdGlvbnNbMV0udmFsdWUgJiYgdHdgYmctbG9nby1ibHVlIHRleHQtd2hpdGVgLFxuICAgICAgICAgIGNob2ljZSA9PT0gb3B0aW9uc1swXS52YWx1ZSAmJiB0d2BiZy1saWdodC1tYXRjaCBkYXJrOmJnLWRhcmstbWF0Y2hgLFxuICAgICAgICBdfVxuICAgICAgPlxuICAgICAgICB7b3B0aW9uc1sxXS5uYW1lfVxuICAgICAgPC9idXR0b24+XG4gICAgPC9kaXY+XG4gICk7XG59O1xuIl0sIm5hbWVzIjpbInVzZUVmZmVjdCIsInVzZVN0YXRlIiwianN4IiwiX2pzeCIsImpzeHMiLCJfanN4cyIsIlBlcmlvZFN3aXRjaGVyIiwib3B0aW9ucyIsInZhbEdldHRlciIsImhhbGYiLCJjaG9pY2UiLCJzZXRDaG9pY2UiLCJ2YWx1ZSIsImNsYXNzTmFtZSIsImNoaWxkcmVuIiwib25DbGljayIsImNzcyIsIm5hbWUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/components/modules/football/odds/PeriodSwitcher.tsx\n");

/***/ }),

/***/ "./src/components/modules/football/quickviewColumn/QuickViewOddsTab.tsx":
/*!******************************************************************************!*\
  !*** ./src/components/modules/football/quickviewColumn/QuickViewOddsTab.tsx ***!
  \******************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @emotion/styled/base */ \"@emotion/styled/base\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"react\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _hooks_useFootball_useOddsData__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/hooks/useFootball/useOddsData */ \"./src/hooks/useFootball/useOddsData.ts\");\n/* harmony import */ var _components_modules_football_odds_OddsChangeModalQV__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @/components/modules/football/odds/OddsChangeModalQV */ \"./src/components/modules/football/odds/OddsChangeModalQV.tsx\");\n/* harmony import */ var _components_modules_football_tw_components__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @/components/modules/football/tw-components */ \"./src/components/modules/football/tw-components/index.ts\");\n/* harmony import */ var _stores__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @/stores */ \"./src/stores/index.ts\");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @/utils */ \"./src/utils/index.ts\");\n/* harmony import */ var _emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @emotion/react/jsx-runtime */ \"@emotion/react/jsx-runtime\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__, _hooks_useFootball_useOddsData__WEBPACK_IMPORTED_MODULE_2__, _components_modules_football_odds_OddsChangeModalQV__WEBPACK_IMPORTED_MODULE_3__, _components_modules_football_tw_components__WEBPACK_IMPORTED_MODULE_4__, _stores__WEBPACK_IMPORTED_MODULE_5__, _emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__]);\n([_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__, _hooks_useFootball_useOddsData__WEBPACK_IMPORTED_MODULE_2__, _components_modules_football_odds_OddsChangeModalQV__WEBPACK_IMPORTED_MODULE_3__, _components_modules_football_tw_components__WEBPACK_IMPORTED_MODULE_4__, _stores__WEBPACK_IMPORTED_MODULE_5__, _emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n\nfunction _EMOTION_STRINGIFIED_CSS_ERROR__() {\n    return \"You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).\";\n}\n\n\n\n\n\n\n\nconst QuickViewOddsTab = ({ matchData })=>{\n    return (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsxs)(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.Fragment, {\n        children: [\n            (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(PopularOddsSection, {\n                matchData: matchData\n            }),\n            (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(CorrectScoreSection, {\n                matchData: matchData\n            }),\n            (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(OddsChangeModalSection, {\n                matchData: matchData\n            }),\n            (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(OddsChangeModalSectionCornerOU, {\n                matchData: matchData\n            }),\n            (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(OddsChangeModalSectionScore, {\n                matchData: matchData\n            })\n        ]\n    });\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (QuickViewOddsTab);\nconst OddsChangeModalSectionScore = ({ matchData })=>{\n    const { halfScore, showDetailModalScore, setShowDetailModalScore, correctScoreBookMaker } = (0,_stores__WEBPACK_IMPORTED_MODULE_5__.useOddsQvStore)();\n    return (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(\"div\", {\n        className: \"\",\n        children: (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(_components_modules_football_odds_OddsChangeModalQV__WEBPACK_IMPORTED_MODULE_3__[\"default\"], {\n            open: showDetailModalScore,\n            setOpen: setShowDetailModalScore,\n            bookMaker: {\n                id: correctScoreBookMaker,\n                name: correctScoreBookMaker === 31 ? \"Sbobet\" : \"Bwin\"\n            },\n            matchId: matchData?.id,\n            half: halfScore\n        })\n    });\n};\nconst OddsChangeModalSection = ({ matchData })=>{\n    const { half, showDetailModal, selectedBookMaker, setShowDetailModal } = (0,_stores__WEBPACK_IMPORTED_MODULE_5__.useOddsQvStore)();\n    return (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(\"div\", {\n        className: \"\",\n        children: (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(_components_modules_football_odds_OddsChangeModalQV__WEBPACK_IMPORTED_MODULE_3__[\"default\"], {\n            open: showDetailModal,\n            setOpen: setShowDetailModal,\n            bookMaker: selectedBookMaker,\n            matchId: matchData?.id,\n            half: half\n        })\n    });\n};\nconst OddsChangeModalSectionCornerOU = ({ matchData })=>{\n    const { halfCornerOU, showDetailModalCornerOU, selectedBookMaker, setShowDetailModalCornerOU } = (0,_stores__WEBPACK_IMPORTED_MODULE_5__.useOddsQvStore)();\n    return (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(\"div\", {\n        className: \"\",\n        children: (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(_components_modules_football_odds_OddsChangeModalQV__WEBPACK_IMPORTED_MODULE_3__[\"default\"], {\n            open: showDetailModalCornerOU,\n            setOpen: setShowDetailModalCornerOU,\n            bookMaker: selectedBookMaker,\n            matchId: matchData?.id,\n            half: halfCornerOU\n        })\n    });\n};\nconst PopularOddsSection = ({ matchData })=>{\n    return (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsxs)(_components_modules_football_tw_components__WEBPACK_IMPORTED_MODULE_4__.TwQuickViewSection, {\n        className: \"p-2.5\",\n        children: [\n            (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(PopularOddsFilterSection, {}),\n            (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(ShowPopularOddsSection, {\n                matchId: matchData?.id\n            })\n        ]\n    });\n};\nconst PopularOddsFilterSection = ()=>{\n    const { market, setMarket, half, setHalf } = (0,_stores__WEBPACK_IMPORTED_MODULE_5__.useOddsQvStore)();\n    return (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsxs)(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.Fragment, {\n        children: [\n            (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(TwOddsTitle, {\n                className: \"\",\n                children: \"Popular Odds\"\n            }),\n            (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsxs)(\"div\", {\n                className: \"text-center text-csm \",\n                children: [\n                    (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsxs)(\"div\", {\n                        className: \" my-2 flex justify-between gap-2\",\n                        children: [\n                            (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(\"button\", {\n                                className: \"flex-1 cursor-pointer rounded-md py-1.5 \",\n                                css: [\n                                    market === \"hdp\" && {\n                                        \"--tw-bg-opacity\": \"1\",\n                                        \"backgroundColor\": \"rgb(33 135 229 / var(--tw-bg-opacity, 1))\",\n                                        \"--tw-text-opacity\": \"1\",\n                                        \"color\": \"rgb(255 255 255 / var(--tw-text-opacity, 1))\",\n                                        \"--tw-shadow\": \"0 1px 2px 0 rgb(0 0 0 / 0.05)\",\n                                        \"--tw-shadow-colored\": \"0 1px 2px 0 var(--tw-shadow-color)\",\n                                        \"boxShadow\": \"var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow)\"\n                                    },\n                                    market === \"std1x2\" && {\n                                        \"--tw-bg-opacity\": \"1\",\n                                        \"backgroundColor\": \"rgb(255 255 255 / var(--tw-bg-opacity, 1))\",\n                                        \"--tw-shadow\": \"0 1px 2px 0 rgb(0 0 0 / 0.05)\",\n                                        \"--tw-shadow-colored\": \"0 1px 2px 0 var(--tw-shadow-color)\",\n                                        \"boxShadow\": \"var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow)\",\n                                        \":is(.dark *)\": {\n                                            \"--tw-bg-opacity\": \"1\",\n                                            \"backgroundColor\": \"rgb(31 31 31 / var(--tw-bg-opacity, 1))\"\n                                        }\n                                    },\n                                    market === \"tx\" && {\n                                        \"--tw-bg-opacity\": \"1\",\n                                        \"backgroundColor\": \"rgb(255 255 255 / var(--tw-bg-opacity, 1))\",\n                                        \"--tw-shadow\": \"0 1px 2px 0 rgb(0 0 0 / 0.05)\",\n                                        \"--tw-shadow-colored\": \"0 1px 2px 0 var(--tw-shadow-color)\",\n                                        \"boxShadow\": \"var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow)\",\n                                        \":is(.dark *)\": {\n                                            \"--tw-bg-opacity\": \"1\",\n                                            \"backgroundColor\": \"rgb(31 31 31 / var(--tw-bg-opacity, 1))\"\n                                        }\n                                    },\n                                     false ? 0 : \";label:PopularOddsFilterSection;\",\n                                     false ? 0 : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"\n                                ],\n                                onClick: ()=>setMarket(\"hdp\"),\n                                \"data-tw\": \"bg-logo-blue text-white shadow-sm | bg-white dark:bg-dark-hl-1 shadow-sm  | bg-white dark:bg-dark-hl-1 shadow-sm\",\n                                children: \"Asian HDP\"\n                            }),\n                            (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(\"button\", {\n                                className: \"w-1/3 cursor-pointer rounded-md py-1.5\",\n                                onClick: ()=>setMarket(\"std1x2\"),\n                                css: [\n                                    market === \"std1x2\" && {\n                                        \"--tw-bg-opacity\": \"1\",\n                                        \"backgroundColor\": \"rgb(33 135 229 / var(--tw-bg-opacity, 1))\",\n                                        \"--tw-text-opacity\": \"1\",\n                                        \"color\": \"rgb(255 255 255 / var(--tw-text-opacity, 1))\",\n                                        \"--tw-shadow\": \"0 1px 2px 0 rgb(0 0 0 / 0.05)\",\n                                        \"--tw-shadow-colored\": \"0 1px 2px 0 var(--tw-shadow-color)\",\n                                        \"boxShadow\": \"var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow)\"\n                                    },\n                                    market === \"hdp\" && {\n                                        \"--tw-bg-opacity\": \"1\",\n                                        \"backgroundColor\": \"rgb(255 255 255 / var(--tw-bg-opacity, 1))\",\n                                        \"--tw-shadow\": \"0 1px 2px 0 rgb(0 0 0 / 0.05)\",\n                                        \"--tw-shadow-colored\": \"0 1px 2px 0 var(--tw-shadow-color)\",\n                                        \"boxShadow\": \"var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow)\",\n                                        \":is(.dark *)\": {\n                                            \"--tw-bg-opacity\": \"1\",\n                                            \"backgroundColor\": \"rgb(31 31 31 / var(--tw-bg-opacity, 1))\"\n                                        }\n                                    },\n                                    market === \"tx\" && {\n                                        \"--tw-bg-opacity\": \"1\",\n                                        \"backgroundColor\": \"rgb(255 255 255 / var(--tw-bg-opacity, 1))\",\n                                        \"--tw-shadow\": \"0 1px 2px 0 rgb(0 0 0 / 0.05)\",\n                                        \"--tw-shadow-colored\": \"0 1px 2px 0 var(--tw-shadow-color)\",\n                                        \"boxShadow\": \"var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow)\",\n                                        \":is(.dark *)\": {\n                                            \"--tw-bg-opacity\": \"1\",\n                                            \"backgroundColor\": \"rgb(31 31 31 / var(--tw-bg-opacity, 1))\"\n                                        }\n                                    },\n                                     false ? 0 : \";label:PopularOddsFilterSection;\",\n                                     false ? 0 : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"\n                                ],\n                                \"data-tw\": \"bg-logo-blue text-white shadow-sm | bg-white dark:bg-dark-hl-1 shadow-sm | bg-white dark:bg-dark-hl-1 shadow-sm\",\n                                children: \"1x2\"\n                            }),\n                            (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(\"button\", {\n                                className: \"w-1/3 cursor-pointer rounded-md py-1.5 \",\n                                onClick: ()=>setMarket(\"tx\"),\n                                css: [\n                                    market === \"tx\" && {\n                                        \"--tw-bg-opacity\": \"1\",\n                                        \"backgroundColor\": \"rgb(33 135 229 / var(--tw-bg-opacity, 1))\",\n                                        \"--tw-text-opacity\": \"1\",\n                                        \"color\": \"rgb(255 255 255 / var(--tw-text-opacity, 1))\",\n                                        \"--tw-shadow\": \"0 1px 2px 0 rgb(0 0 0 / 0.05)\",\n                                        \"--tw-shadow-colored\": \"0 1px 2px 0 var(--tw-shadow-color)\",\n                                        \"boxShadow\": \"var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow)\"\n                                    },\n                                    market === \"hdp\" && {\n                                        \"--tw-bg-opacity\": \"1\",\n                                        \"backgroundColor\": \"rgb(255 255 255 / var(--tw-bg-opacity, 1))\",\n                                        \"--tw-shadow\": \"0 1px 2px 0 rgb(0 0 0 / 0.05)\",\n                                        \"--tw-shadow-colored\": \"0 1px 2px 0 var(--tw-shadow-color)\",\n                                        \"boxShadow\": \"var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow)\",\n                                        \":is(.dark *)\": {\n                                            \"--tw-bg-opacity\": \"1\",\n                                            \"backgroundColor\": \"rgb(31 31 31 / var(--tw-bg-opacity, 1))\"\n                                        }\n                                    },\n                                    market === \"std1x2\" && {\n                                        \"--tw-bg-opacity\": \"1\",\n                                        \"backgroundColor\": \"rgb(255 255 255 / var(--tw-bg-opacity, 1))\",\n                                        \"--tw-shadow\": \"0 1px 2px 0 rgb(0 0 0 / 0.05)\",\n                                        \"--tw-shadow-colored\": \"0 1px 2px 0 var(--tw-shadow-color)\",\n                                        \"boxShadow\": \"var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow)\",\n                                        \":is(.dark *)\": {\n                                            \"--tw-bg-opacity\": \"1\",\n                                            \"backgroundColor\": \"rgb(31 31 31 / var(--tw-bg-opacity, 1))\"\n                                        }\n                                    },\n                                     false ? 0 : \";label:PopularOddsFilterSection;\",\n                                     false ? 0 : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"\n                                ],\n                                \"data-tw\": \"bg-logo-blue text-white shadow-sm | bg-white dark:bg-dark-hl-1 shadow-sm | bg-white dark:bg-dark-hl-1 shadow-sm\",\n                                children: \"Over/Under\"\n                            })\n                        ]\n                    }),\n                    (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsxs)(\"div\", {\n                        className: \" flex flex-1 gap-2 rounded-md\",\n                        children: [\n                            (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(\"button\", {\n                                className: \" w-1/2 cursor-pointer rounded-md py-1\",\n                                css: [\n                                    half === 0 && {\n                                        \"--tw-bg-opacity\": \"1\",\n                                        \"backgroundColor\": \"rgb(33 135 229 / var(--tw-bg-opacity, 1))\",\n                                        \"--tw-text-opacity\": \"1\",\n                                        \"color\": \"rgb(255 255 255 / var(--tw-text-opacity, 1))\",\n                                        \"--tw-shadow\": \"0 1px 2px 0 rgb(0 0 0 / 0.05)\",\n                                        \"--tw-shadow-colored\": \"0 1px 2px 0 var(--tw-shadow-color)\",\n                                        \"boxShadow\": \"var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow)\"\n                                    },\n                                    half === 1 && {\n                                        \"--tw-bg-opacity\": \"1\",\n                                        \"backgroundColor\": \"rgb(255 255 255 / var(--tw-bg-opacity, 1))\",\n                                        \"--tw-shadow\": \"0 1px 2px 0 rgb(0 0 0 / 0.05)\",\n                                        \"--tw-shadow-colored\": \"0 1px 2px 0 var(--tw-shadow-color)\",\n                                        \"boxShadow\": \"var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow)\",\n                                        \":is(.dark *)\": {\n                                            \"--tw-bg-opacity\": \"1\",\n                                            \"backgroundColor\": \"rgb(31 31 31 / var(--tw-bg-opacity, 1))\"\n                                        }\n                                    },\n                                     false ? 0 : \";label:PopularOddsFilterSection;\",\n                                     false ? 0 : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"\n                                ],\n                                onClick: ()=>setHalf(0),\n                                \"data-tw\": \"bg-logo-blue text-white shadow-sm | bg-white dark:bg-dark-hl-1 shadow-sm\",\n                                children: \"FT\"\n                            }),\n                            (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(\"button\", {\n                                className: \" flex-1 cursor-pointer rounded-md py-1\",\n                                css: [\n                                    half === 1 && {\n                                        \"--tw-bg-opacity\": \"1\",\n                                        \"backgroundColor\": \"rgb(33 135 229 / var(--tw-bg-opacity, 1))\",\n                                        \"--tw-text-opacity\": \"1\",\n                                        \"color\": \"rgb(255 255 255 / var(--tw-text-opacity, 1))\",\n                                        \"--tw-shadow\": \"0 1px 2px 0 rgb(0 0 0 / 0.05)\",\n                                        \"--tw-shadow-colored\": \"0 1px 2px 0 var(--tw-shadow-color)\",\n                                        \"boxShadow\": \"var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow)\"\n                                    },\n                                    half === 0 && {\n                                        \"--tw-bg-opacity\": \"1\",\n                                        \"backgroundColor\": \"rgb(255 255 255 / var(--tw-bg-opacity, 1))\",\n                                        \"--tw-shadow\": \"0 1px 2px 0 rgb(0 0 0 / 0.05)\",\n                                        \"--tw-shadow-colored\": \"0 1px 2px 0 var(--tw-shadow-color)\",\n                                        \"boxShadow\": \"var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow)\",\n                                        \":is(.dark *)\": {\n                                            \"--tw-bg-opacity\": \"1\",\n                                            \"backgroundColor\": \"rgb(31 31 31 / var(--tw-bg-opacity, 1))\"\n                                        }\n                                    },\n                                     false ? 0 : \";label:PopularOddsFilterSection;\",\n                                     false ? 0 : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"\n                                ],\n                                onClick: ()=>setHalf(1),\n                                \"data-tw\": \"bg-logo-blue text-white shadow-sm | bg-white dark:bg-dark-hl-1 shadow-sm\",\n                                children: \"HT\"\n                            })\n                        ]\n                    })\n                ]\n            })\n        ]\n    });\n};\nconst ShowPopularOddsSection = ({ matchId })=>{\n    const { market, half, setSelectedBookMaker, setShowDetailModal } = (0,_stores__WEBPACK_IMPORTED_MODULE_5__.useOddsQvStore)();\n    const { oddsType } = (0,_stores__WEBPACK_IMPORTED_MODULE_5__.useOddsStore)();\n    const { data: shownData, isFetching } = (0,_hooks_useFootball_useOddsData__WEBPACK_IMPORTED_MODULE_2__.useMatchCompareMarketsOddsData)(matchId || \"\", half || 0, market);\n    const { data: bookMakerData, isFetching: isFetchingBM } = (0,_hooks_useFootball_useOddsData__WEBPACK_IMPORTED_MODULE_2__.useBookmakersData)();\n    const mapBookMakers = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(()=>{\n        return bookMakerData?.bookmakers?.reduce((acc, cur)=>{\n            acc[cur?.id] = cur.name;\n            return acc;\n        }, {}) || {};\n    }, [\n        bookMakerData\n    ]);\n    if (isFetching || isFetchingBM) {\n        return (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(ShowPopularOddsSkeletons, {}); // TODO skeleton later\n    }\n    return (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(\"div\", {\n        className: \"mt-4 rounded-md\",\n        children: (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsxs)(TwTable, {\n            className: \"w-full text-ccsm\",\n            children: [\n                (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(\"thead\", {\n                    className: \"\",\n                    children: (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsxs)(\"div\", {\n                        className: \"grid grid-cols-11 border border-light-stroke dark:border-dark-draw\",\n                        children: [\n                            (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(\"td\", {\n                                className: \"col-span-4\"\n                            }),\n                            (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(\"td\", {\n                                className: \"col-span-2 text-black dark:text-white\",\n                                children: \"Home\"\n                            }),\n                            (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(\"td\", {\n                                className: \"col-span-2 text-black dark:text-white\",\n                                children: \"X\"\n                            }),\n                            (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(\"td\", {\n                                className: \"col-span-2 text-black dark:text-white\",\n                                children: \"Away\"\n                            })\n                        ]\n                    })\n                }),\n                (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(\"tbody\", {\n                    className: \"flex flex-col\",\n                    children: Object.keys(shownData || {}).map((bookId, idx)=>{\n                        const bookName = mapBookMakers[bookId] || bookId;\n                        const oddsData = shownData[bookId];\n                        const { choices } = oddsData[market] || {};\n                        const [first, second, third] = choices || [];\n                        return (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsxs)(\"div\", {\n                            className: \"grid grid-cols-11\",\n                            children: [\n                                (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(\"div\", {\n                                    className: \"col-span-4 flex items-center border border-t-0 border-light-stroke p-2 dark:border-dark-draw\",\n                                    children: bookName\n                                }),\n                                (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsxs)(\"div\", {\n                                    className: \"col-span-7 flex flex-col border-b border-r border-light-stroke dark:border-dark-draw\",\n                                    children: [\n                                        (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsxs)(\"div\", {\n                                            className: \" grid grid-cols-7 border-l border-[#2196F3]\",\n                                            children: [\n                                                (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(\"td\", {\n                                                    className: \"col-span-2 flex h-7 items-center justify-center border-b border-l-0 border-r border-light-stroke dark:border-dark-draw\",\n                                                    children: (0,_utils__WEBPACK_IMPORTED_MODULE_6__.convertOdds)(first?.iv, market, oddsType, 1)\n                                                }),\n                                                (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(\"td\", {\n                                                    className: \"col-span-2 flex h-7 items-center justify-center border-b border-r border-light-stroke dark:border-dark-draw\",\n                                                    children: (0,_utils__WEBPACK_IMPORTED_MODULE_6__.convertOdds)(second?.iv, market, oddsType, 2)\n                                                }),\n                                                (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(\"td\", {\n                                                    className: \"col-span-2 flex h-7 items-center justify-center border-b border-r border-light-stroke dark:border-dark-draw\",\n                                                    children: (0,_utils__WEBPACK_IMPORTED_MODULE_6__.convertOdds)(third?.iv, market, oddsType, 3)\n                                                })\n                                            ]\n                                        }),\n                                        (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsxs)(\"div\", {\n                                            className: \" grid grid-cols-7 border-l border-[#FFBA5A]\",\n                                            children: [\n                                                (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(\"td\", {\n                                                    className: \"col-span-2 flex h-7 items-center justify-center border-b border-l-0 border-r border-light-stroke dark:border-dark-draw\",\n                                                    children: (0,_utils__WEBPACK_IMPORTED_MODULE_6__.convertOdds)(first?.lv, market, oddsType, 1)\n                                                }),\n                                                (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(\"td\", {\n                                                    className: \" col-span-2 h-7 border-b border-r border-light-stroke dark:border-dark-draw\",\n                                                    children: (0,_utils__WEBPACK_IMPORTED_MODULE_6__.convertOdds)(second?.lv, market, oddsType, 2)\n                                                }),\n                                                (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(\"td\", {\n                                                    className: \" col-span-2 flex h-7 items-center justify-center border-b border-r border-light-stroke dark:border-dark-draw\",\n                                                    children: (0,_utils__WEBPACK_IMPORTED_MODULE_6__.convertOdds)(third?.lv, market, oddsType, 3)\n                                                }),\n                                                (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(\"td\", {\n                                                    children: \">\"\n                                                })\n                                            ]\n                                        }),\n                                        (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsxs)(\"div\", {\n                                            className: \"grid grid-cols-7 border-l border-[#5DB400]\",\n                                            children: [\n                                                (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(\"td\", {\n                                                    className: \"col-span-2 flex h-7 items-center justify-center border-l-0 border-r border-light-stroke dark:border-dark-draw\",\n                                                    children: (0,_utils__WEBPACK_IMPORTED_MODULE_6__.convertOdds)(first?.v, market, oddsType, 1)\n                                                }),\n                                                (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(\"td\", {\n                                                    className: \"col-span-2 flex h-7 items-center justify-center border-r border-light-stroke dark:border-dark-draw\",\n                                                    children: (0,_utils__WEBPACK_IMPORTED_MODULE_6__.convertOdds)(second?.v, market, oddsType, 2)\n                                                }),\n                                                (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(\"td\", {\n                                                    className: \"col-span-2 flex h-7 items-center justify-center border-r border-light-stroke dark:border-dark-draw\",\n                                                    children: (0,_utils__WEBPACK_IMPORTED_MODULE_6__.convertOdds)(third?.v, market, oddsType, 3)\n                                                })\n                                            ]\n                                        })\n                                    ]\n                                })\n                            ]\n                        }, idx);\n                    // }\n                    // return (\n                    //   <TwBodyRow key={idx}>\n                    //     <TwCell>{bookName}</TwCell>\n                    //     <td>{convertOdds(first.v, market, oddsType, 1)}</td>\n                    //     <td>{convertOdds(second.v, market, oddsType, 2)}</td>\n                    //     <td>{convertOdds(third.v, market, oddsType, 3)}</td>\n                    //     <td>\n                    //       <div className='flex h-full w-full items-center px-1'>\n                    //         <button\n                    //           onClick={() => {\n                    //             setSelectedBookMaker({\n                    //               id: bookId,\n                    //               name: bookName,\n                    //             });\n                    //             setShowDetailModal(true);\n                    //           }}\n                    //         >\n                    //           <HiTrendingUp className='item-hover h-6 w-6 rounded-md border border-gray-light p-1 text-dark-text'></HiTrendingUp>\n                    //         </button>\n                    //       </div>\n                    //     </td>\n                    //   </TwBodyRow>\n                    // );\n                    })\n                })\n            ]\n        })\n    });\n};\nconst ShowPopularOddsSkeletons = ()=>{\n    return(//   <TwTable className='w-full border-collapse'>\n    //     <thead className='border-common table-border text-center text-sm text-dark-text'>\n    //       <TwHeaderRow className='table-border'>\n    //         <TwCell className='w-[20%]' rowSpan={2}>\n    //           <Skeleton></Skeleton>\n    //         </TwCell>\n    //         <TwCell className='w-[40%]' colSpan={3}>\n    //           First\n    //         </TwCell>\n    //         <TwCell className='w-[40%]' colSpan={3}>\n    //           Live\n    //         </TwCell>\n    //       </TwHeaderRow>\n    //       <TwHeaderRow>\n    //         <td className='w-[10%]'>O</td>\n    //         <td className='w-[10%]'>T</td>\n    //         <td className='w-[10%]'>U</td>\n    //         <td className='w-[10%]'>O</td>\n    //         <td className='w-[10%]'>T</td>\n    //         <td className='w-[10%]'>U</td>\n    //       </TwHeaderRow>\n    //     </thead>\n    //     <tbody>\n    //       <TwBodyRow>\n    //         <TwCell>Bet365</TwCell>\n    //         <td>0.95</td>\n    //         <td>1</td>\n    //         <td>0.82</td>\n    //         <td>0.95</td>\n    //         <td>1</td>\n    //         <td>0.82</td>\n    //       </TwBodyRow>\n    //       <TwBodyRow>\n    //         <TwCell>Bet365</TwCell>\n    //         <td>0.95</td>\n    //         <td>1</td>\n    //         <td>0.82</td>\n    //         <td>0.95</td>\n    //         <td>1</td>\n    //         <td>0.82</td>\n    //       </TwBodyRow>\n    //       <TwBodyRow>\n    //         <TwCell>Bet365</TwCell>\n    //         <td>0.95</td>\n    //         <td>1</td>\n    //         <td>0.82</td>\n    //         <td>0.95</td>\n    //         <td>1</td>\n    //         <td>0.82</td>\n    //       </TwBodyRow>\n    //       <TwBodyRow>\n    //         <TwCell>Bet365</TwCell>\n    //         <td>0.95</td>\n    //         <td>1</td>\n    //         <td>0.82</td>\n    //         <td>0.95</td>\n    //         <td>1</td>\n    //         <td>0.82</td>\n    //       </TwBodyRow>\n    //     </tbody>\n    //   </TwTable>\n    // </div>\n    (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(\"div\", {\n        children: \"Loading...\"\n    }));\n};\nconst CornerOUOddsSection = ({ matchData })=>{\n    return (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsxs)(_components_modules_football_tw_components__WEBPACK_IMPORTED_MODULE_4__.TwQuickViewSection, {\n        className: \"p-2.5\",\n        children: [\n            (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(CornerOUOddsFilterSection, {}),\n            (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(ShowCornerOUSection, {\n                matchId: matchData?.id\n            })\n        ]\n    });\n};\nconst CornerOUOddsFilterSection = ()=>{\n    return (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(\"div\", {\n        className: \"\",\n        children: (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(TwOddsTitle, {\n            className: \"\",\n            children: \"Phạt g\\xf3c T/X\"\n        })\n    });\n};\nconst ShowCornerOUSection = ({ matchId })=>{\n    const { market, showPrematchCornerOU, halfCornerOU, setShowDetailModalCornerOU, setSelectedBookMaker } = (0,_stores__WEBPACK_IMPORTED_MODULE_5__.useOddsQvStore)();\n    const { oddsType } = (0,_stores__WEBPACK_IMPORTED_MODULE_5__.useOddsStore)();\n    const { data: shownData } = (0,_hooks_useFootball_useOddsData__WEBPACK_IMPORTED_MODULE_2__.useMatchCompareMarketsOddsData)(matchId || \"\", halfCornerOU || 0, \"cornerTx\");\n    const { data: bookMakerData } = (0,_hooks_useFootball_useOddsData__WEBPACK_IMPORTED_MODULE_2__.useBookmakersData)();\n    const mapBookMakers = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(()=>{\n        return bookMakerData?.bookmakers?.reduce((acc, cur)=>{\n            acc[cur?.id] = cur.name;\n            return acc;\n        }, {}) || {};\n    }, [\n        bookMakerData\n    ]);\n    return (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(\"div\", {\n        className: \" mt-4 rounded-md\",\n        children: (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsxs)(TwTable, {\n            className: \"w-full border-collapse text-ccsm\",\n            children: [\n                (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(\"thead\", {\n                    className: \"border-common table-border border border-light-stroke text-center text-sm text-dark-text brightness-150 dark:border-dark-draw\",\n                    children: (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsxs)(\"div\", {\n                        className: \"table-border grid grid-cols-11\",\n                        children: [\n                            (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(\"td\", {\n                                className: \"col-span-4\"\n                            }),\n                            (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(\"td\", {\n                                className: \"light:text-black col-span-2\",\n                                children: \"Home\"\n                            }),\n                            (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(\"td\", {\n                                className: \"light:text-black col-span-2\",\n                                children: \"X\"\n                            }),\n                            (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(\"td\", {\n                                className: \"light:text-black col-span-2\",\n                                children: \"Away\"\n                            })\n                        ]\n                    })\n                }),\n                (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(\"tbody\", {\n                    className: \"flex flex-col\",\n                    children: Object.keys(shownData || {}).map((bookId, idx)=>{\n                        const bookName = mapBookMakers[bookId] || bookId;\n                        const oddsData = shownData[bookId];\n                        const { choices } = oddsData[\"cornerTx\"] || {};\n                        const [first, second, third] = choices || [];\n                        return (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsxs)(\"div\", {\n                            className: \"grid grid-cols-11\",\n                            children: [\n                                (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(\"div\", {\n                                    className: \"col-span-4 flex items-center border border-t-0 border-light-stroke p-2 dark:border-dark-draw\",\n                                    children: bookName\n                                }),\n                                (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsxs)(\"div\", {\n                                    className: \"col-span-7 flex flex-col border-b border-r border-light-stroke dark:border-dark-draw\",\n                                    children: [\n                                        (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsxs)(\"div\", {\n                                            className: \" grid grid-cols-7 \",\n                                            children: [\n                                                (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(\"td\", {\n                                                    className: \"col-span-2 flex h-7 items-center justify-center\",\n                                                    children: (0,_utils__WEBPACK_IMPORTED_MODULE_6__.convertOdds)(first?.iv, market, oddsType, 1)\n                                                }),\n                                                (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(\"td\", {\n                                                    className: \"col-span-2 flex h-7 items-center justify-center\",\n                                                    children: (0,_utils__WEBPACK_IMPORTED_MODULE_6__.convertOdds)(second?.iv, market, oddsType, 2)\n                                                }),\n                                                (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(\"td\", {\n                                                    className: \"col-span-2 flex h-7 items-center justify-center border-r border-light-stroke dark:border-dark-draw\",\n                                                    children: (0,_utils__WEBPACK_IMPORTED_MODULE_6__.convertOdds)(third?.iv, market, oddsType, 3)\n                                                })\n                                            ]\n                                        }),\n                                        (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsxs)(\"div\", {\n                                            className: \" grid grid-cols-7\",\n                                            children: [\n                                                (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(\"td\", {\n                                                    className: \"col-span-2 flex h-7 items-center justify-center\",\n                                                    children: (0,_utils__WEBPACK_IMPORTED_MODULE_6__.convertOdds)(first?.lv, market, oddsType, 1)\n                                                }),\n                                                (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(\"td\", {\n                                                    className: \"col-span-2 h-7 \",\n                                                    children: (0,_utils__WEBPACK_IMPORTED_MODULE_6__.convertOdds)(second?.lv, market, oddsType, 2)\n                                                }),\n                                                (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(\"td\", {\n                                                    className: \"col-span-2 flex h-7 items-center justify-center border-r border-light-stroke dark:border-dark-draw\",\n                                                    children: (0,_utils__WEBPACK_IMPORTED_MODULE_6__.convertOdds)(third?.lv, market, oddsType, 3)\n                                                }),\n                                                (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(\"td\", {\n                                                    onClick: ()=>{\n                                                        setSelectedBookMaker({\n                                                            id: bookId,\n                                                            name: bookName\n                                                        });\n                                                        setShowDetailModalCornerOU(true);\n                                                    },\n                                                    children: \">\"\n                                                })\n                                            ]\n                                        }),\n                                        (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsxs)(\"div\", {\n                                            className: \"grid grid-cols-7 \",\n                                            children: [\n                                                (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(\"td\", {\n                                                    className: \"col-span-2 flex h-7 items-center justify-center\",\n                                                    children: (0,_utils__WEBPACK_IMPORTED_MODULE_6__.convertOdds)(first?.v, market, oddsType, 1)\n                                                }),\n                                                (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(\"td\", {\n                                                    className: \"col-span-2 flex h-7 items-center justify-center\",\n                                                    children: (0,_utils__WEBPACK_IMPORTED_MODULE_6__.convertOdds)(second?.v, market, oddsType, 2)\n                                                }),\n                                                (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(\"td\", {\n                                                    className: \"col-span-2 flex h-7 items-center justify-center border-r border-light-stroke dark:border-dark-draw\",\n                                                    children: (0,_utils__WEBPACK_IMPORTED_MODULE_6__.convertOdds)(third?.v, market, oddsType, 3)\n                                                })\n                                            ]\n                                        })\n                                    ]\n                                })\n                            ]\n                        }, idx);\n                    })\n                })\n            ]\n        })\n    });\n};\nconst ShowCornerOUSectionSkeletons = ()=>{\n    return (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(\"div\", {\n        className: \" rounded-md\",\n        children: (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsxs)(TwTable, {\n            className: \"w-full border-collapse\",\n            children: [\n                (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsxs)(\"thead\", {\n                    className: \"border-common table-border text-center text-sm text-dark-text\",\n                    children: [\n                        (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsxs)(TwHeaderRow, {\n                            className: \"table-border\",\n                            children: [\n                                (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(TwCell, {\n                                    className: \"w-[20%]\",\n                                    rowSpan: 2,\n                                    children: \"Company\"\n                                }),\n                                (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(TwCell, {\n                                    className: \"w-[40%]\",\n                                    colSpan: 3,\n                                    children: \"First\"\n                                }),\n                                (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(TwCell, {\n                                    className: \"w-[40%]\",\n                                    colSpan: 3,\n                                    children: \"Live\"\n                                })\n                            ]\n                        }),\n                        (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsxs)(TwHeaderRow, {\n                            children: [\n                                (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(\"td\", {\n                                    className: \"w-[10%]\",\n                                    children: \"O\"\n                                }),\n                                (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(\"td\", {\n                                    className: \"w-[10%]\",\n                                    children: \"T\"\n                                }),\n                                (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(\"td\", {\n                                    className: \"w-[10%]\",\n                                    children: \"U\"\n                                }),\n                                (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(\"td\", {\n                                    className: \"w-[10%]\",\n                                    children: \"O\"\n                                }),\n                                (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(\"td\", {\n                                    className: \"w-[10%]\",\n                                    children: \"T\"\n                                }),\n                                (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(\"td\", {\n                                    className: \"w-[10%]\",\n                                    children: \"U\"\n                                })\n                            ]\n                        })\n                    ]\n                }),\n                (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsxs)(\"tbody\", {\n                    children: [\n                        (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsxs)(TwBodyRow, {\n                            children: [\n                                (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(TwCell, {\n                                    children: \"Bet365\"\n                                }),\n                                (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(\"td\", {\n                                    children: \"0.95\"\n                                }),\n                                (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(\"td\", {\n                                    children: \"1\"\n                                }),\n                                (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(\"td\", {\n                                    children: \"0.82\"\n                                }),\n                                (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(\"td\", {\n                                    children: \"0.95\"\n                                }),\n                                (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(\"td\", {\n                                    children: \"1\"\n                                }),\n                                (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(\"td\", {\n                                    children: \"0.82\"\n                                })\n                            ]\n                        }),\n                        (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsxs)(TwBodyRow, {\n                            children: [\n                                (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(TwCell, {\n                                    children: \"Bet365\"\n                                }),\n                                (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(\"td\", {\n                                    children: \"0.95\"\n                                }),\n                                (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(\"td\", {\n                                    children: \"1\"\n                                }),\n                                (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(\"td\", {\n                                    children: \"0.82\"\n                                }),\n                                (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(\"td\", {\n                                    children: \"0.95\"\n                                }),\n                                (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(\"td\", {\n                                    children: \"1\"\n                                }),\n                                (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(\"td\", {\n                                    children: \"0.82\"\n                                })\n                            ]\n                        })\n                    ]\n                })\n            ]\n        })\n    });\n};\nconst ValueSwitcher = ({ options, valGetter })=>{\n    const [choice, setChoice] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(options[0].value);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        valGetter(choice);\n    }, [\n        choice,\n        valGetter\n    ]);\n    return (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsxs)(\"div\", {\n        className: \"flex items-center\",\n        children: [\n            (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(\"button\", {\n                className: \"item-hover w-1/2 rounded-s-lg px-3 py-1 text-sm \",\n                onClick: ()=>setChoice(options[0].value),\n                css: [\n                    choice === options[0].value && {\n                        \"--tw-bg-opacity\": \"1\",\n                        \"backgroundColor\": \"rgb(33 135 229 / var(--tw-bg-opacity, 1))\",\n                        \"--tw-text-opacity\": \"1\",\n                        \"color\": \"rgb(255 255 255 / var(--tw-text-opacity, 1))\"\n                    },\n                    choice === options[1].value && {\n                        \"--tw-bg-opacity\": \"1\",\n                        \"backgroundColor\": \"rgb(242 246 249 / var(--tw-bg-opacity, 1))\",\n                        \":is(.dark *)\": {\n                            \"--tw-bg-opacity\": \"1\",\n                            \"backgroundColor\": \"rgb(27 27 27 / var(--tw-bg-opacity, 1))\"\n                        }\n                    },\n                     false ? 0 : \";label:ValueSwitcher;\",\n                     false ? 0 : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"\n                ],\n                \"data-tw\": \"bg-logo-blue text-white | bg-light-match dark:bg-dark-match\",\n                children: options[0].name\n            }),\n            (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(\"button\", {\n                className: \"item-hover w-1/2 rounded-e-lg px-3 py-1 text-sm \",\n                onClick: ()=>setChoice(options[1].value),\n                css: [\n                    choice === options[1].value && {\n                        \"--tw-bg-opacity\": \"1\",\n                        \"backgroundColor\": \"rgb(33 135 229 / var(--tw-bg-opacity, 1))\",\n                        \"--tw-text-opacity\": \"1\",\n                        \"color\": \"rgb(255 255 255 / var(--tw-text-opacity, 1))\"\n                    },\n                    choice === options[0].value && {\n                        \"--tw-bg-opacity\": \"1\",\n                        \"backgroundColor\": \"rgb(242 246 249 / var(--tw-bg-opacity, 1))\",\n                        \":is(.dark *)\": {\n                            \"--tw-bg-opacity\": \"1\",\n                            \"backgroundColor\": \"rgb(27 27 27 / var(--tw-bg-opacity, 1))\"\n                        }\n                    },\n                     false ? 0 : \";label:ValueSwitcher;\",\n                     false ? 0 : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"\n                ],\n                \"data-tw\": \"bg-logo-blue text-white | bg-light-match dark:bg-dark-match\",\n                children: options[1].name\n            })\n        ]\n    });\n};\nconst CorrectScoreSection = ({ matchData })=>{\n    return (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsxs)(_components_modules_football_tw_components__WEBPACK_IMPORTED_MODULE_4__.TwQuickViewSection, {\n        className: \"p-2.5\",\n        children: [\n            (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(CorrectScoreFilterSection, {}),\n            (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(ShowCorrectScoreSection, {\n                matchId: matchData?.id\n            })\n        ]\n    });\n};\nconst ShowScoreDetailModal = ()=>{\n    const { setShowDetailModalScore } = (0,_stores__WEBPACK_IMPORTED_MODULE_5__.useOddsQvStore)();\n    return (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(\"div\", {\n        className: \"flex cursor-pointer place-content-center items-center pt-1.5 text-center text-sm text-logo-blue underline\",\n        children: (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(\"button\", {\n            onClick: ()=>{\n                setShowDetailModalScore(true);\n            },\n            children: \"More\"\n        })\n    });\n};\nconst CorrectScoreFilterSection = ()=>{\n    const { correctScoreBookMaker, setCorrectScoreBookMaker } = (0,_stores__WEBPACK_IMPORTED_MODULE_5__.useOddsQvStore)();\n    return (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsxs)(\"div\", {\n        className: \"\",\n        children: [\n            (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(TwOddsTitle, {\n                className: \"\",\n                children: \"Tỷ số\"\n            }),\n            (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(\"div\", {\n                className: \"text-center text-sm \",\n                children: (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(\"div\", {\n                    className: \" mb-2 flex gap-2 py-2 text-center\",\n                    children: (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsxs)(\"div\", {\n                        className: \" border-common flex w-8/12 rounded-md dark:bg-dark-hl-1\",\n                        children: [\n                            (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(\"div\", {\n                                className: \" w-1/2 cursor-pointer rounded-s-md  py-1  \",\n                                css: [\n                                    `${correctScoreBookMaker}` === \"31\" && {\n                                        \"--tw-bg-opacity\": \"1\",\n                                        \"backgroundColor\": \"rgb(33 135 229 / var(--tw-bg-opacity, 1))\",\n                                        \"--tw-text-opacity\": \"1\",\n                                        \"color\": \"rgb(255 255 255 / var(--tw-text-opacity, 1))\"\n                                    },\n                                    `${correctScoreBookMaker}` !== \"31\" && {\n                                        \"--tw-bg-opacity\": \"1\",\n                                        \"backgroundColor\": \"rgb(255 255 255 / var(--tw-bg-opacity, 1))\",\n                                        \"--tw-shadow\": \"0 1px 2px 0 rgb(0 0 0 / 0.05)\",\n                                        \"--tw-shadow-colored\": \"0 1px 2px 0 var(--tw-shadow-color)\",\n                                        \"boxShadow\": \"var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow)\",\n                                        \":is(.dark *)\": {\n                                            \"--tw-bg-opacity\": \"1\",\n                                            \"backgroundColor\": \"rgb(31 31 31 / var(--tw-bg-opacity, 1))\"\n                                        }\n                                    },\n                                     false ? 0 : \";label:CorrectScoreFilterSection;\",\n                                     false ? 0 : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"\n                                ],\n                                onClick: ()=>setCorrectScoreBookMaker(31),\n                                \"data-tw\": \"bg-logo-blue text-white | bg-white dark:bg-dark-hl-1 shadow-sm\",\n                                children: \"Sbobet\"\n                            }),\n                            (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(\"div\", {\n                                className: \" flex-1 cursor-pointer rounded-e-md py-1\",\n                                css: [\n                                    `${correctScoreBookMaker}` === \"49\" && {\n                                        \"--tw-bg-opacity\": \"1\",\n                                        \"backgroundColor\": \"rgb(33 135 229 / var(--tw-bg-opacity, 1))\",\n                                        \"--tw-text-opacity\": \"1\",\n                                        \"color\": \"rgb(255 255 255 / var(--tw-text-opacity, 1))\"\n                                    },\n                                    `${correctScoreBookMaker}` !== \"49\" && {\n                                        \"--tw-bg-opacity\": \"1\",\n                                        \"backgroundColor\": \"rgb(255 255 255 / var(--tw-bg-opacity, 1))\",\n                                        \"--tw-shadow\": \"0 1px 2px 0 rgb(0 0 0 / 0.05)\",\n                                        \"--tw-shadow-colored\": \"0 1px 2px 0 var(--tw-shadow-color)\",\n                                        \"boxShadow\": \"var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow)\",\n                                        \":is(.dark *)\": {\n                                            \"--tw-bg-opacity\": \"1\",\n                                            \"backgroundColor\": \"rgb(31 31 31 / var(--tw-bg-opacity, 1))\"\n                                        }\n                                    },\n                                     false ? 0 : \";label:CorrectScoreFilterSection;\",\n                                     false ? 0 : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"\n                                ],\n                                onClick: ()=>setCorrectScoreBookMaker(49),\n                                \"data-tw\": \"bg-logo-blue text-white | bg-white dark:bg-dark-hl-1 shadow-sm\",\n                                children: \"Bwin\"\n                            })\n                        ]\n                    })\n                })\n            })\n        ]\n    });\n};\nconst ShowCorrectScoreSection = ({ matchId })=>{\n    const { halfScore, correctScoreBookMaker } = (0,_stores__WEBPACK_IMPORTED_MODULE_5__.useOddsQvStore)();\n    const { data, isFetching } = (0,_hooks_useFootball_useOddsData__WEBPACK_IMPORTED_MODULE_2__.useMatchCompareMarketsOddsData)(matchId || \"\", halfScore || 0, \"score\");\n    if (isFetching) {\n        return (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(ShowCorrectScoreSectionSkeletons, {});\n    }\n    const isEmpty = (0,_utils__WEBPACK_IMPORTED_MODULE_6__.isValEmpty)(data);\n    const shownData = data ? data[correctScoreBookMaker] : {};\n    const odds = shownData?.odds || {};\n    return (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsxs)(\"div\", {\n        className: \"\",\n        children: [\n            (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsxs)(\"table\", {\n                className: \"w-full border-collapse rounded-md text-center\",\n                children: [\n                    (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(ScoreOddsHeader, {}),\n                    (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(\"tbody\", {\n                        className: \"text-csm\",\n                        children: (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(ScoreOddsRow, {\n                            odds: odds\n                        })\n                    })\n                ]\n            }),\n            (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsxs)(\"table\", {\n                className: \"w-full border-collapse rounded-md text-center\",\n                children: [\n                    (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(ScoreOddsHeaderDraw, {}),\n                    (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(\"tbody\", {\n                        className: \"text-csm\",\n                        children: (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(ScoreOddsRowDraw, {\n                            odds: odds\n                        })\n                    })\n                ]\n            }),\n            !isEmpty && (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(ShowScoreDetailModal, {})\n        ]\n    });\n};\nconst ShowCorrectScoreSectionSkeletons = ()=>{\n    return (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsxs)(\"div\", {\n        className: \"\",\n        children: [\n            (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsxs)(TwTable, {\n                className: \"w-full border-collapse rounded-md \",\n                children: [\n                    (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(ScoreOddsHeader, {}),\n                    (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsxs)(\"tbody\", {\n                        children: [\n                            (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsxs)(\"tr\", {\n                                className: \"h-10\",\n                                children: [\n                                    (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(TwCell, {\n                                        className: \"w-[10%]\",\n                                        children: \"Home\"\n                                    }),\n                                    (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(TwCell, {\n                                        className: \"w-[9%]\",\n                                        children: \"-\"\n                                    }),\n                                    (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(TwCell, {\n                                        className: \"w-[9%]\",\n                                        children: \"-\"\n                                    }),\n                                    (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(TwCell, {\n                                        className: \"w-[9%]\",\n                                        children: \"-\"\n                                    }),\n                                    (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(TwCell, {\n                                        className: \"w-[9%]\",\n                                        children: \"-\"\n                                    }),\n                                    (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(TwCell, {\n                                        className: \"w-[9%]\",\n                                        children: \"-\"\n                                    }),\n                                    (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(TwCell, {\n                                        className: \"w-[9%]\",\n                                        children: \"-\"\n                                    }),\n                                    (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(TwCell, {\n                                        className: \"w-[9%]\",\n                                        children: \"-\"\n                                    }),\n                                    (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(TwCell, {\n                                        className: \"w-[9%]\",\n                                        children: \"-\"\n                                    }),\n                                    (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(TwCell, {\n                                        className: \"w-[9%]\",\n                                        children: \"-\"\n                                    }),\n                                    (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(TwCell, {\n                                        className: \"w-[9%]\",\n                                        children: \"-\"\n                                    })\n                                ]\n                            }),\n                            (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsxs)(\"tr\", {\n                                className: \"h-10\",\n                                children: [\n                                    (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(TwCell, {\n                                        className: \"w-[10%]\",\n                                        children: \"Away\"\n                                    }),\n                                    (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(TwCell, {\n                                        className: \"w-[9%]\",\n                                        children: \"-\"\n                                    }),\n                                    (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(TwCell, {\n                                        className: \"w-[9%]\",\n                                        children: \"-\"\n                                    }),\n                                    (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(TwCell, {\n                                        className: \"w-[9%]\",\n                                        children: \"-\"\n                                    }),\n                                    (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(TwCell, {\n                                        className: \"w-[9%]\",\n                                        children: \"-\"\n                                    }),\n                                    (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(TwCell, {\n                                        className: \"w-[9%]\",\n                                        children: \"-\"\n                                    }),\n                                    (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(TwCell, {\n                                        className: \"w-[9%]\",\n                                        children: \"-\"\n                                    }),\n                                    (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(TwCell, {\n                                        className: \"w-[9%]\",\n                                        children: \"-\"\n                                    }),\n                                    (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(TwCell, {\n                                        className: \"w-[9%]\",\n                                        children: \"-\"\n                                    }),\n                                    (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(TwCell, {\n                                        className: \"w-[9%]\",\n                                        children: \"-\"\n                                    }),\n                                    (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(TwCell, {\n                                        className: \"w-[9%]\",\n                                        children: \"-\"\n                                    })\n                                ]\n                            })\n                        ]\n                    })\n                ]\n            }),\n            (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsxs)(TwTable, {\n                className: \"w-full border-collapse rounded-md\",\n                children: [\n                    (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(ScoreOddsHeaderDraw, {}),\n                    (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(\"tbody\", {\n                        children: (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsxs)(\"tr\", {\n                            className: \"h-10\",\n                            children: [\n                                (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(TwCell, {\n                                    className: \"w-[10%]\",\n                                    children: \"Draw\"\n                                }),\n                                (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(TwCell, {\n                                    className: \"w-[9%]\",\n                                    children: \"-\"\n                                }),\n                                (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(TwCell, {\n                                    className: \"w-[9%]\",\n                                    children: \"-\"\n                                }),\n                                (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(TwCell, {\n                                    className: \"w-[9%]\",\n                                    children: \"-\"\n                                }),\n                                (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(TwCell, {\n                                    className: \"w-[9%]\",\n                                    children: \"-\"\n                                }),\n                                (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(TwCell, {\n                                    className: \"w-[9%]\",\n                                    children: \"-\"\n                                }),\n                                (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(TwCell, {\n                                    className: \"w-[9%]\",\n                                    children: \"-\"\n                                }),\n                                (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(TwCell, {\n                                    className: \"w-[9%]\",\n                                    children: \"-\"\n                                }),\n                                (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(TwCell, {\n                                    className: \"w-[9%]\",\n                                    children: \"-\"\n                                }),\n                                (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(TwCell, {\n                                    className: \"w-[9%]\",\n                                    children: \"-\"\n                                }),\n                                (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(TwCell, {\n                                    className: \"w-[9%]\",\n                                    children: \"-\"\n                                })\n                            ]\n                        })\n                    })\n                ]\n            })\n        ]\n    });\n};\nconst TwCell = /*#__PURE__*/ (0,_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"td\",  false ? 0 : {\n    target: \"e1otomdu5\",\n    label: \"TwCell\"\n})( false ? 0 : {\n    name: \"8sfl86\",\n    styles: \"border-width:1px;--tw-border-opacity:1;border-color:rgb(205 221 237 / var(--tw-border-opacity, 1));:is(.dark *){--tw-border-opacity:1;border-color:rgb(170 170 170 / var(--tw-border-opacity, 1));}/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n    toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n});\nconst TwBodyRow = /*#__PURE__*/ (0,_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"tr\",  false ? 0 : {\n    target: \"e1otomdu4\",\n    label: \"TwBodyRow\"\n})( false ? 0 : {\n    name: \"191l0w\",\n    styles: \"height:2.25rem;border-width:1px;--tw-border-opacity:1;border-color:rgb(205 221 237 / var(--tw-border-opacity, 1));:is(.dark *){--tw-border-opacity:1;border-color:rgb(170 170 170 / var(--tw-border-opacity, 1));}/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n    toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n});\nconst TwHeaderRow = /*#__PURE__*/ (0,_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"tr\",  false ? 0 : {\n    target: \"e1otomdu3\",\n    label: \"TwHeaderRow\"\n})( false ? 0 : {\n    name: \"1h65bxs\",\n    styles: \"height:1.75rem;border-width:1px;--tw-border-opacity:1;border-color:rgb(205 221 237 / var(--tw-border-opacity, 1));--tw-text-opacity:1;color:rgb(34 34 34 / var(--tw-text-opacity, 1));--tw-brightness:brightness(1.5);filter:var(--tw-blur) var(--tw-brightness) var(--tw-contrast) var(--tw-grayscale) var(--tw-hue-rotate) var(--tw-invert) var(--tw-saturate) var(--tw-sepia) var(--tw-drop-shadow);:is(.dark *){--tw-border-opacity:1;border-color:rgb(170 170 170 / var(--tw-border-opacity, 1));--tw-text-opacity:1;color:rgb(228 230 235 / var(--tw-text-opacity, 1));}/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n    toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n});\nconst TwTable = /*#__PURE__*/ (0,_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"table\",  false ? 0 : {\n    target: \"e1otomdu2\",\n    label: \"TwTable\"\n})( false ? 0 : {\n    name: \"1d4ts2g\",\n    styles: \"border-collapse:collapse;text-align:center;font-size:0.875rem;line-height:1.25rem/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n    toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n});\nconst TwBodySingleRow = /*#__PURE__*/ (0,_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"tr\",  false ? 0 : {\n    target: \"e1otomdu1\",\n    label: \"TwBodySingleRow\"\n})( false ? 0 : {\n    name: \"a75b2b\",\n    styles: \"height:2.25rem/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n    toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n});\nconst TwOddsTitle = /*#__PURE__*/ (0,_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"h5\",  false ? 0 : {\n    target: \"e1otomdu0\",\n    label: \"TwOddsTitle\"\n})( false ? 0 : {\n    name: \"agicb\",\n    styles: \"font-size:0.875rem;line-height:1.25rem;font-weight:700;text-transform:capitalize;font-style:normal;--tw-text-opacity:1;color:rgb(33 135 229 / var(--tw-text-opacity, 1))/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n    toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n});\nconst ScoreOddsRow = ({ odds })=>{\n    return (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsxs)(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.Fragment, {\n        children: [\n            (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsxs)(TwBodySingleRow, {\n                className: \"\",\n                children: [\n                    (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(TwCell, {\n                        className: \"w-[10%] text-logo-blue\",\n                        children: \"Home\"\n                    }),\n                    (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(TwCell, {\n                        className: \"w-[9%]\",\n                        children: odds.h1\n                    }),\n                    (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(TwCell, {\n                        className: \"w-[9%]\",\n                        children: odds.h2\n                    }),\n                    (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(TwCell, {\n                        className: \"w-[9%]\",\n                        children: odds.h3\n                    }),\n                    (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(TwCell, {\n                        className: \"w-[9%]\",\n                        children: odds.h4\n                    }),\n                    (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(TwCell, {\n                        className: \"w-[9%]\",\n                        children: odds.h5\n                    }),\n                    (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(TwCell, {\n                        className: \"w-[9%]\",\n                        children: odds.h6\n                    }),\n                    (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(TwCell, {\n                        className: \"w-[9%]\",\n                        children: odds.h7\n                    }),\n                    (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(TwCell, {\n                        className: \"w-[9%]\",\n                        children: odds.h8\n                    }),\n                    (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(TwCell, {\n                        className: \"w-[9%]\",\n                        children: odds.h9\n                    }),\n                    (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(TwCell, {\n                        className: \"w-[9%]\",\n                        children: odds.h10\n                    })\n                ]\n            }),\n            (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsxs)(TwBodySingleRow, {\n                className: \"\",\n                children: [\n                    (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(TwCell, {\n                        className: \"w-[10%] text-logo-yellow\",\n                        children: \"Away\"\n                    }),\n                    (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(TwCell, {\n                        className: \"w-[9%]\",\n                        children: odds.a1\n                    }),\n                    (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(TwCell, {\n                        className: \"w-[9%]\",\n                        children: odds.a2\n                    }),\n                    (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(TwCell, {\n                        className: \"w-[9%]\",\n                        children: odds.a3\n                    }),\n                    (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(TwCell, {\n                        className: \"w-[9%]\",\n                        children: odds.a4\n                    }),\n                    (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(TwCell, {\n                        className: \"w-[9%]\",\n                        children: odds.a5\n                    }),\n                    (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(TwCell, {\n                        className: \"w-[9%]\",\n                        children: odds.a6\n                    }),\n                    (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(TwCell, {\n                        className: \"w-[9%]\",\n                        children: odds.a7\n                    }),\n                    (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(TwCell, {\n                        className: \"w-[9%]\",\n                        children: odds.a8\n                    }),\n                    (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(TwCell, {\n                        className: \"w-[9%]\",\n                        children: odds.a9\n                    }),\n                    (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(TwCell, {\n                        className: \"w-[9%]\",\n                        children: odds.a10\n                    })\n                ]\n            })\n        ]\n    });\n};\nconst ScoreOddsRowDraw = ({ odds })=>{\n    return (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.Fragment, {\n        children: (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsxs)(TwBodySingleRow, {\n            className: \"\",\n            children: [\n                (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(TwCell, {\n                    className: \"w-[10%] text-dark-text\",\n                    children: \"Draw\"\n                }),\n                (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(TwCell, {\n                    className: \" w-[9%]\",\n                    children: odds.d1\n                }),\n                (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(TwCell, {\n                    className: \" w-[9%]\",\n                    children: odds.d2\n                }),\n                (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(TwCell, {\n                    className: \" w-[9%]\",\n                    children: odds.d3\n                }),\n                (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(TwCell, {\n                    className: \" w-[9%]\",\n                    children: odds.d4\n                }),\n                (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(TwCell, {\n                    className: \" w-[9%]\",\n                    children: odds.d5\n                }),\n                (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(TwCell, {\n                    className: \" w-[18%]\",\n                    colSpan: 2,\n                    children: odds.o\n                }),\n                (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(TwCell, {\n                    className: \" w-[9%]\"\n                }),\n                (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(TwCell, {\n                    className: \" w-[9%]\"\n                }),\n                (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(TwCell, {\n                    className: \" w-[9%]\"\n                })\n            ]\n        })\n    });\n};\nconst ScoreOddsHeader = ()=>{\n    return (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(\"thead\", {\n        className: \"text-csm font-bold text-black dark:text-dark-default\",\n        children: (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsxs)(TwHeaderRow, {\n            className: \"h-10 bg-light-match dark:bg-dark-match\",\n            children: [\n                (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(TwCell, {\n                    className: \"w-[10%]\"\n                }),\n                (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(TwCell, {\n                    className: \"w-[9%]\",\n                    children: \"1:0\"\n                }),\n                (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(TwCell, {\n                    className: \"w-[9%]\",\n                    children: \"2:0\"\n                }),\n                (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(TwCell, {\n                    className: \"w-[9%]\",\n                    children: \"2:1\"\n                }),\n                (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(TwCell, {\n                    className: \"w-[9%]\",\n                    children: \"3:0\"\n                }),\n                (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(TwCell, {\n                    className: \"w-[9%]\",\n                    children: \"3:1\"\n                }),\n                (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(TwCell, {\n                    className: \"w-[9%]\",\n                    children: \"3:2\"\n                }),\n                (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(TwCell, {\n                    className: \"w-[9%]\",\n                    children: \"4:0\"\n                }),\n                (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(TwCell, {\n                    className: \"w-[9%]\",\n                    children: \"4:1\"\n                }),\n                (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(TwCell, {\n                    className: \"w-[9%]\",\n                    children: \"4:2\"\n                }),\n                (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(TwCell, {\n                    className: \"w-[9%]\",\n                    children: \"4:3\"\n                })\n            ]\n        })\n    });\n};\nconst ScoreOddsHeaderDraw = ()=>{\n    return (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(\"thead\", {\n        className: \"text-csm font-bold text-black dark:text-dark-default \",\n        children: (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsxs)(TwHeaderRow, {\n            className: \"h-10 bg-light-match dark:bg-dark-match\",\n            children: [\n                (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(TwCell, {\n                    className: \"w-[10%]\"\n                }),\n                (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(TwCell, {\n                    className: \"w-[9%]\",\n                    children: \"0:0\"\n                }),\n                (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(TwCell, {\n                    className: \"w-[9%]\",\n                    children: \"1:1\"\n                }),\n                (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(TwCell, {\n                    className: \"w-[9%]\",\n                    children: \"2:2\"\n                }),\n                (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(TwCell, {\n                    className: \"w-[9%]\",\n                    children: \"3:3\"\n                }),\n                (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(TwCell, {\n                    className: \"w-[9%]\",\n                    children: \"4:4\"\n                }),\n                (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(TwCell, {\n                    className: \"w-[18%] \",\n                    colSpan: 2,\n                    children: \"Other\"\n                }),\n                (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(TwCell, {\n                    className: \"w-[9%]\"\n                }),\n                (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(TwCell, {\n                    className: \"w-[9%]\"\n                }),\n                (0,_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(TwCell, {\n                    className: \"w-[9%]\"\n                })\n            ]\n        })\n    });\n};\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/components/modules/football/quickviewColumn/QuickViewOddsTab.tsx\n");

/***/ })

};
;